<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lidong&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lidong.me/"/>
  <updated>2020-06-02T23:21:31.000Z</updated>
  <id>https://lidong.me/</id>
  
  <author>
    <name>Lidong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebRTC 媒体流 mediastream</title>
    <link href="https://lidong.me/webrtc-mediastream/"/>
    <id>https://lidong.me/webrtc-mediastream/</id>
    <published>2020-06-02T23:21:31.000Z</published>
    <updated>2020-06-02T23:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>添加轨</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaStream.addTrack();</span><br></pre></td></tr></table></figure><p>移除轨</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaStream.removeTrack();</span><br></pre></td></tr></table></figure><p>获取视频轨道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaStream.getVideoTracks();</span><br></pre></td></tr></table></figure><p>获取音频轨道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaStream.getAudioTracks();</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mediaStream.onaddtrack</span><br><span class="line">mediaStream.onremovetrack</span><br><span class="line">mediaStream.onended</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/6/2 23:21:31 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;添加轨&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://lidong.me/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC 视频滤镜</title>
    <link href="https://lidong.me/webrtc-video-filter/"/>
    <id>https://lidong.me/webrtc-video-filter/</id>
    <published>2020-06-02T20:53:49.000Z</published>
    <updated>2020-06-02T20:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频特效实现</p><ol><li>CSS filter, filter</li><li>video 与 filter 关联</li></ol><p>支持的特效种类</p><table><thead><tr><th style="text-align:center">特效</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">grayscale</td><td style="text-align:center">灰度</td></tr><tr><td style="text-align:center">sepia</td><td style="text-align:center">褐色</td></tr><tr><td style="text-align:center">saturate</td><td style="text-align:center">饱和度</td></tr><tr><td style="text-align:center">hue-rotate</td><td style="text-align:center">色相旋转</td></tr><tr><td style="text-align:center">invert</td><td style="text-align:center">反色</td></tr><tr><td style="text-align:center">opacity</td><td style="text-align:center">透明度</td></tr><tr><td style="text-align:center">brightness</td><td style="text-align:center">亮度</td></tr><tr><td style="text-align:center">contrast</td><td style="text-align:center">对比度</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">模糊</td></tr><tr><td style="text-align:center">drop-shadow</td><td style="text-align:center">阴影</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频特效实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS filter, filter&lt;/li&gt;
&lt;li&gt;video 与 filter 关联&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;支持的特效种类&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:ce
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://lidong.me/tags/webrtc/"/>
    
      <category term="video" scheme="https://lidong.me/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>socketio</title>
    <link href="https://lidong.me/socketio/"/>
    <id>https://lidong.me/socketio/</id>
    <published>2020-05-31T17:11:13.000Z</published>
    <updated>2020-05-31T17:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务端发送消息"><a href="#服务端发送消息" class="headerlink" title="服务端发送消息"></a>服务端发送消息</h2><p>给本次连接发消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.emit();</span><br></pre></td></tr></table></figure><p>给某个房间内所有人发消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.in(room).emit();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.sockets.in(room).emit;</span><br></pre></td></tr></table></figure><p>除了本连接外，给房间所有人发消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.to(room).emit();</span><br></pre></td></tr></table></figure><p>除了本连接外，给所有人发消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.broadcast.emit();</span><br></pre></td></tr></table></figure><h2 id="客户端处理消息"><a href="#客户端处理消息" class="headerlink" title="客户端处理消息"></a>客户端处理消息</h2><p>发送 action 命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: socket.emit(<span class="string">'action'</span>);</span><br><span class="line">c: socket.on(<span class="string">'action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>发送 action 命令,包含 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: socket.emit(<span class="string">'action'</span>, data);</span><br><span class="line">c: socket.on(<span class="string">'action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>发送 action 命令,包含两个参数 data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s: socket.emit(<span class="string">'action'</span>, arg1, arg2);</span><br><span class="line">c: socket.on(<span class="string">'action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>发送 action 命令, 在 emit 方法中包含回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s:  socket.emit(<span class="string">'action'</span>,data,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>));</span></span><br><span class="line"><span class="function"><span class="title">c</span>:  <span class="title">socket</span>.<span class="title">on</span>(<span class="params"><span class="string">'action'</span>,function(data,fn</span>)</span>&#123;fn(<span class="string">'a'</span>,<span class="string">'b'</span>)&#125;)</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/5/31 17:11:13 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务端发送消息&quot;&gt;&lt;a href=&quot;#服务端发送消息&quot; class=&quot;headerlink&quot; title=&quot;服务端发送消息&quot;&gt;&lt;/a&gt;服务端发送消息&lt;/h2&gt;&lt;p&gt;给本次连接发消息&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebRTC 媒体流录制</title>
    <link href="https://lidong.me/webrtc-media-recorder/"/>
    <id>https://lidong.me/webrtc-media-recorder/</id>
    <published>2020-05-29T22:30:12.000Z</published>
    <updated>2020-05-29T22:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MediaRecorder"><a href="#MediaRecorder" class="headerlink" title="MediaRecorder"></a>MediaRecorder</h2><p>媒体流录制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mediaRecorder = <span class="keyword">new</span> MediaRecorder(stream[,option]);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">stream</td><td style="text-align:center">媒体流，<br>可从 <code>getUserMedia</code>，<code>&lt;video&gt;</code>，<br> <code>&lt;audio&gt;</code> 或 <code>&lt;canvas&gt;</code> 获取</td></tr><tr><td style="text-align:center">options</td><td style="text-align:center">限制选项</td></tr></tbody></table><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">mimeType</td><td style="text-align:center">video/webm<br> audio/webm <br> video/webm;codecs=vp8<br>video/webm;codecs=vp8<br> audio/webm;codecs=opus</td></tr><tr><td style="text-align:center">audioBitsPerSecond</td><td style="text-align:center">音频玛率</td></tr><tr><td style="text-align:center">videoBitsPerSecond</td><td style="text-align:center">视频玛率</td></tr><tr><td style="text-align:center">bitsPerSecond</td><td style="text-align:center">整体玛率</td></tr></tbody></table><h3 id="MediaRecorder-API"><a href="#MediaRecorder-API" class="headerlink" title="MediaRecorder API"></a>MediaRecorder API</h3><p>开启录制媒体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.start([timeslice])</span><br></pre></td></tr></table></figure><blockquote><p>timeslice 可选 如果设置了，会按照时间切片存储数据</p></blockquote><p>停止录制媒体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.stop()</span><br></pre></td></tr></table></figure><p>暂停录制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.pause()</span><br></pre></td></tr></table></figure><p>恢复录制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.resume()</span><br></pre></td></tr></table></figure><p>类型检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.isTypeSupported()</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.ondataavailable</span><br></pre></td></tr></table></figure><p>每次记录一定时间的数据时（如果没有指定时间片，则记录整个数据时）会触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaRecorder.onerror</span><br></pre></td></tr></table></figure><p>当有错误发生时，录制会被停止</p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ul><li><p>字符串</p></li><li><p>Blob (该格式相当于对 ArrayBuffer 封装)</p></li><li><p>ArrayBuffer</p></li><li><p>ArrayBufferView</p></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/5/29 22:30:12 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MediaRecorder&quot;&gt;&lt;a href=&quot;#MediaRecorder&quot; class=&quot;headerlink&quot; title=&quot;MediaRecorder&quot;&gt;&lt;/a&gt;MediaRecorder&lt;/h2&gt;&lt;p&gt;媒体流录制&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://lidong.me/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC 音视频采集</title>
    <link href="https://lidong.me/audio-and-video-capture/"/>
    <id>https://lidong.me/audio-and-video-capture/</id>
    <published>2020-05-28T20:53:49.000Z</published>
    <updated>2020-05-28T20:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <code>getUserMedia</code> 获取音视频</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = navigator.mediaDevices.getUserMedia(constraints);</span><br></pre></td></tr></table></figure><p>适配不同浏览器</p><p><a href="https://webrtc.github.io/adapter/adapter-latest.js" target="_blank" rel="noopener">https://webrtc.github.io/adapter/adapter-latest.js</a></p><p>获取设备信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = navigator.mediaDevices.enumerateDevices();</span><br></pre></td></tr></table></figure><p>视频约束</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">width</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">height</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">frameRate</td><td style="text-align:center">帧率</td></tr><tr><td style="text-align:center">facingMode</td><td style="text-align:center">摄像头选择</td></tr></tbody></table><p>facingMode 的可选值：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">user</td><td style="text-align:center">前置摄像头</td></tr><tr><td style="text-align:center">environment</td><td style="text-align:center">后置</td></tr><tr><td style="text-align:center">left</td><td style="text-align:center">前置左侧</td></tr><tr><td style="text-align:center">right</td><td style="text-align:center">前置右侧</td></tr></tbody></table><p>音频约束</p><table><thead><tr><th style="text-align:center"></th><th></th></tr></thead><tbody><tr><td style="text-align:center">volume</td><td>声音大小 0~1</td></tr><tr><td style="text-align:center">sampleRate</td><td>采样率</td></tr><tr><td style="text-align:center">sampleSize</td></tr><tr><td style="text-align:center">echoCancellation</td><td>回音消除</td></tr><tr><td style="text-align:center">autoGainControl</td><td>自动增益 true /false</td></tr><tr><td style="text-align:center">noiseSuppression</td><td>降噪国内</td></tr><tr><td style="text-align:center">latency</td><td>延迟效果</td></tr><tr><td style="text-align:center">channelCount</td><td>声道</td></tr><tr><td style="text-align:center">deviceID</td><td>设备 id</td></tr><tr><td style="text-align:center">groupID</td></tr></tbody></table><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">audio:<span class="literal">true</span></span><br><span class="line">video:&#123;</span><br><span class="line">  width:&#123;</span><br><span class="line">    min:<span class="number">300</span>,</span><br><span class="line">    max:<span class="number">640</span></span><br><span class="line">  &#125;,</span><br><span class="line">  height:&#123;</span><br><span class="line">    min:<span class="number">300</span>,</span><br><span class="line">    max:<span class="number">480</span></span><br><span class="line">    &#125;,</span><br><span class="line">    frameRate:&#123;</span><br><span class="line">      min:<span class="number">15</span>,</span><br><span class="line">      max:<span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/5/28 20:53:49 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 &lt;code&gt;getUserMedia&lt;/code&gt; 获取音视频&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://lidong.me/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 命令速查表</title>
    <link href="https://lidong.me/mongodb-cheat-sheet/"/>
    <id>https://lidong.me/mongodb-cheat-sheet/</id>
    <published>2020-03-07T14:53:13.000Z</published>
    <updated>2020-03-07T14:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><blockquote><p><code>db.getCollection(&quot;users&quot;).find(用于过滤记录的字典，用于限定字段的字典)</code></p></blockquote><p>查找所有数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find()</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>查询特定数据</p><p>查询单个字段条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123; <span class="string">"age"</span>: <span class="number">17</span> &#125;)</span><br></pre></td></tr></table></figure><p>查询多个字段条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123; <span class="string">"age"</span>: <span class="number">17</span>, <span class="string">"name"</span>: <span class="string">"张小三"</span> &#125;)</span><br></pre></td></tr></table></figure><p>查询范围值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 "age" 大于等于23且小于30 的用户</span></span><br><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123; <span class="string">"age"</span>: &#123; <span class="string">"$gte"</span>: <span class="number">23</span>, <span class="string">"$lt"</span>: <span class="number">30</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>限定返回哪些字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123;&#125;, &#123; <span class="string">"address"</span>: <span class="number">0</span>, <span class="string">"age"</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>0 表示在全部字段中剔除值为0的这些字段并返回，1 表示只返回值为1的这些字段</p></blockquote><p>修饰返回结果</p><ul><li><code>count()</code> 返回满足要求的数据条数</li><li><code>limit()</code> 限定返回结果条数</li><li><code>sort()</code> 对查询结果进行排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123;&#125;, &#123; <span class="string">"age"</span>: <span class="number">0</span> &#125;).count()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123;&#125;, &#123; <span class="string">"age"</span>: <span class="number">0</span> &#125;).limit(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).find(&#123;&#125;, &#123; <span class="string">"age"</span>: <span class="number">0</span> &#125;).sort(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>-1 表示倒序， 1 表示正序</p></blockquote><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>插入单条数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).insertOne(&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"张小三"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">17</span>,</span><br><span class="line">  address: <span class="string">"北京"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>批量插入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">"users"</span>).insertMany([</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"张小三"</span>, <span class="string">"age"</span>: <span class="number">17</span>, <span class="attr">address</span>: <span class="string">"北京"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"刘小四"</span>, <span class="string">"age"</span>: <span class="number">23</span>, <span class="attr">address</span>: <span class="string">"上海"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"王小五"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="attr">address</span>: <span class="string">"山东"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"马小六"</span>, <span class="string">"age"</span>: <span class="number">22</span>, <span class="attr">address</span>: <span class="string">"河南"</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>updateOne 更新第1条满足要求的数据</p><p>updateMany 更新所有满足要求的数据</p><p>updateMany 的第1个参数是一个字典，用来寻找所有需要被更新的记录；第二个参数是一个字典，它的Key为”$set”，它的值为另一个字典，这个字典里面是需要被修改的字段名和新的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getConllection(<span class="string">"users"</span>).updateMany(</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"张小三"</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"$set"</span>:&#123;<span class="string">"address"</span>:<span class="string">"苏州"</span>，<span class="string">"work"</span>:<span class="string">"工程师"</span>&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getConllection(<span class="string">"users"</span>).deleteOne(&#123;<span class="string">"name"</span>:<span class="string">"张小三"</span>&#125;)</span><br><span class="line">db.getConllection(<span class="string">"users"</span>).deleteMany(&#123;<span class="string">"name"</span>:<span class="string">"张小三"</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"刘小四"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h2><blockquote><p><code>distinct</code> 接收两个参数，第1个参数为字段名，表示对哪一个字段进行去重，第2个参数就是查询命令 <code>find()</code> 第1个参数，可以省略</p></blockquote><p>对 <code>age</code> 字段去重<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getConllection(<span class="string">"users"</span>).distinct(&#123;<span class="string">"age"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>对满足特定条件的数据去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getConllection(<span class="string">"users"</span>).distinct(<span class="string">"age"</span>,&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">24</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/3/7 14:53:13 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;查询&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;db.getCollection(&amp;quot;users&amp;quot;).find(用于过滤记录的字典，
      
    
    </summary>
    
    
      <category term="mongodb" scheme="https://lidong.me/tags/mongodb/"/>
    
      <category term="cheatsheet" scheme="https://lidong.me/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>JWT 认证实例</title>
    <link href="https://lidong.me/jwt-authentication/"/>
    <id>https://lidong.me/jwt-authentication/</id>
    <published>2020-03-06T15:15:16.000Z</published>
    <updated>2020-03-06T15:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express dotenv jsonwebtoken</span><br></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight plain"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ACCESS_TOKEN_SECRET=dbf8de</span><br><span class="line">REFRESH_TOKEN_SECRET=7ac2a3</span><br></pre></td></tr></table></figure><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"dotenv"</span>).config();</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>);</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;</span><br><span class="line">    username: <span class="string">"Kyle"</span>,</span><br><span class="line">    title: <span class="string">"Post 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    username: <span class="string">"Jim"</span>,</span><br><span class="line">    title: <span class="string">"Post 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时保存 refreshTokens，实际应用可以保存到数据库中</span></span><br><span class="line"><span class="keyword">let</span> refreshTokens = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录，获取accessToken、 refreshToken</span></span><br><span class="line">app.post(<span class="string">"/login"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Authenticate User</span></span><br><span class="line">  <span class="keyword">const</span> username = req.body.username;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: username &#125;;</span><br><span class="line">  <span class="keyword">const</span> accessToken = generateAccessToken(user);</span><br><span class="line">  <span class="keyword">const</span> refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET);</span><br><span class="line">  refreshTokens.push(refreshToken);</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    accessToken,</span><br><span class="line">    refreshToken</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 refreshToken 获取 accessToken</span></span><br><span class="line">app.post(<span class="string">"/token"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> refreshToken = req.body.token;</span><br><span class="line">  <span class="keyword">if</span> (refreshToken == <span class="literal">null</span>) <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>);</span><br><span class="line">  <span class="keyword">if</span> (!refreshTokens.includes(refreshToken)) <span class="keyword">return</span> res.sendStatus(<span class="number">403</span>);</span><br><span class="line"></span><br><span class="line">  jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.sendStatus(<span class="number">403</span>);</span><br><span class="line">    <span class="keyword">const</span> accessToken = generateAccessToken(&#123; <span class="attr">name</span>: user.name &#125;);</span><br><span class="line">    res.json(&#123; accessToken &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取需要认证的文章</span></span><br><span class="line">app.get(<span class="string">"/posts"</span>, authenticateToken, (req, res) =&gt; &#123;</span><br><span class="line">  res.json(posts.filter(<span class="function"><span class="params">post</span> =&gt;</span> post.username === req.user.name));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录 删除 refreshToken</span></span><br><span class="line">app.delete(<span class="string">"/logout"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  refreshTokens = refreshTokens.filter(<span class="function"><span class="params">token</span> =&gt;</span> token !== req.body.token);</span><br><span class="line">  res.sendStatus(<span class="number">204</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">authenticateToken</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> authHeader = req.headers[<span class="string">"authorization"</span>];</span><br><span class="line">  <span class="keyword">const</span> token = authHeader &amp;&amp; authHeader.split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.sendStatus(<span class="number">403</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    req.user = user;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成token</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAccessToken</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, &#123;</span><br><span class="line">    expiresIn: <span class="string">"30s"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h2><figure class="highlight http"><figcaption><span>request.http</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">###</span><br><span class="line">POST http://localhost:3000/login</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "username":"Jim"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">POST http://localhost:3000/token</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTgzNDkxMjUzfQ.aM_n0O2nt5TXBIrolk7mk9wvXvMHrhYzdJ7FdFWCd8U"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">GET http://localhost:3000/posts</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTgzNDkxMjcyLCJleHAiOjE1ODM0OTEzMDJ9.W7mrj8Jr9sMQ1vIVB-uI_lZdHVCixlC3DVb3lmf9zJU</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">GET http://localhost:3000/logout</span><br><span class="line"><span class="attribute">Authorization</span>: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTgzNDkxMjcyLCJleHAiOjE1ODM0OTEzMDJ9.W7mrj8Jr9sMQ1vIVB-uI_lZdHVCixlC3DVb3lmf9zJU</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/3/6 15:15:16 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="jwt" scheme="https://lidong.me/tags/jwt/"/>
    
      <category term="auth" scheme="https://lidong.me/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 安装</title>
    <link href="https://lidong.me/install-mongodb/"/>
    <id>https://lidong.me/install-mongodb/</id>
    <published>2020-03-05T15:07:56.000Z</published>
    <updated>2020-03-05T15:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><h3 id="使用-brew-安装"><a href="#使用-brew-安装" class="headerlink" title="使用 brew 安装"></a>使用 brew 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-community</span><br></pre></td></tr></table></figure><h3 id="前台运行"><a href="#前台运行" class="headerlink" title="前台运行"></a>前台运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /usr/<span class="built_in">local</span>/etc/mongod.conf</span><br></pre></td></tr></table></figure><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mongodb-community</span><br></pre></td></tr></table></figure><h3 id="停止运行"><a href="#停止运行" class="headerlink" title="停止运行"></a>停止运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop mongodb-community</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><figcaption><span>/usr/local/etc/mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /usr/local/var/log/mongodb/mongo.log</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /usr/local/var/mongodb</span><br><span class="line">net:</span><br><span class="line">  bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="ubuntu-18-04"><a href="#ubuntu-18-04" class="headerlink" title="ubuntu 18.04"></a>ubuntu 18.04</h2><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y mongodb</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /etc/mongodb.conf</span><br></pre></td></tr></table></figure><h3 id="查看-MongoDB-运行状态"><a href="#查看-MongoDB-运行状态" class="headerlink" title="查看 MongoDB 运行状态"></a>查看 MongoDB 运行状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mongodb</span><br></pre></td></tr></table></figure><h3 id="启动-MongoDB"><a href="#启动-MongoDB" class="headerlink" title="启动 MongoDB"></a>启动 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><h3 id="停止-MongoDB"><a href="#停止-MongoDB" class="headerlink" title="停止 MongoDB"></a>停止 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mongod</span><br></pre></td></tr></table></figure><h3 id="设置开机启动-MongoDB"><a href="#设置开机启动-MongoDB" class="headerlink" title="设置开机启动 MongoDB"></a>设置开机启动 MongoDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mongod</span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/mongodb.conf</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/7e28fe926291da61cfd3ebbe60de6e4e" target="_blank" rel="noopener">https://gist.github.com/7e28fe926291da61cfd3ebbe60de6e4e</a></p><h2 id="docker-运行"><a href="#docker-运行" class="headerlink" title="docker 运行"></a>docker 运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mongo -d mongo</span><br></pre></td></tr></table></figure><p><a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener">参考链接</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/3/5 15:07:56 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MacOS&quot;&gt;&lt;a href=&quot;#MacOS&quot; class=&quot;headerlink&quot; title=&quot;MacOS&quot;&gt;&lt;/a&gt;MacOS&lt;/h2&gt;&lt;h3 id=&quot;使用-brew-安装&quot;&gt;&lt;a href=&quot;#使用-brew-安装&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="install" scheme="https://lidong.me/tags/install/"/>
    
      <category term="mongodb" scheme="https://lidong.me/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>通过 DNS Api 签发 Let&#39;s Encrypt 证书</title>
    <link href="https://lidong.me/letsencrypt-dns-api/"/>
    <id>https://lidong.me/letsencrypt-dns-api/</id>
    <published>2020-02-20T22:47:53.000Z</published>
    <updated>2020-02-20T22:47:53.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>我域名的DNS托管在 Cloudflare，所以这里只记录 Cloudflare DNS 的操作。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>需要<a href="https://lidong.me/blog/docker-ce-install/">安装 docker</a></p><h2 id="获取CloudFlare-API"><a href="#获取CloudFlare-API" class="headerlink" title="获取CloudFlare API"></a>获取CloudFlare API</h2><p>需要获取 Global API Key</p><p>填入 <code>/root/.secrets/cerbot/cloudflare.ini</code> 格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dns_cloudflare_email = example@example.com</span><br><span class="line">dns_cloudflare_api_key = 12345678901234567</span><br></pre></td></tr></table></figure><blockquote><p>设置文件权限，可以避免获取证书时出现相关警告</p><p><code>sudo chmod 0400 /root/.secrets/cerbot/cloudflare.ini</code></p></blockquote><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>使用 certbot 提供了 Cloudflare 镜像，拉去运行就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --rm --name certbot \</span><br><span class="line">            -v <span class="string">"/etc/letsencrypt:/etc/letsencrypt"</span> \</span><br><span class="line">            -v <span class="string">"/var/lib/letsencrypt:/var/lib/letsencrypt"</span> \</span><br><span class="line">            -v <span class="string">"/root/.secrets/cerbot/cloudflare.ini:/root/.secrets/cerbot/cloudflare.ini"</span> \</span><br><span class="line">            certbot/dns-cloudflare certonly --expand --dns-cloudflare \</span><br><span class="line">            --dns-cloudflare-credentials /root/.secrets/cerbot/cloudflare.ini \</span><br><span class="line">            --dns-cloudflare-propagation-seconds 60 \</span><br><span class="line">            -d lidong.me \</span><br><span class="line">            -d *.lidong.me \</span><br><span class="line">            -d funs.app \</span><br><span class="line">            -d *.funs.app \</span><br><span class="line">            -d oonnnoo.com \</span><br><span class="line">            -d *.oonnnoo.com \</span><br><span class="line">            -d *.rorg.oonnnoo.com \</span><br><span class="line">            -d *.rcom.oonnnoo.com \</span><br><span class="line">            -d *.rnet.oonnnoo.com</span><br></pre></td></tr></table></figure><p>其他常用的DNS服务商，也有相关镜像，在这里：<a href="https://hub.docker.com/u/certbot" target="_blank" rel="noopener">https://hub.docker.com/u/certbot</a></p><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ol><li><a href="https://lidong.me/blog/certbot-letsencrypt/">使用 Certbot工具，签发 Let’s Encrypt 证书</a></li><li><a href="https://github.com/ryanlid/sites/blob/master/cert/README.md" target="_blank" rel="noopener">https://github.com/ryanlid/sites/blob/master/cert/README.md</a></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/2/20 22:47:53 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我域名的DNS托管在 Cloudflare，所以这里只记录 Cloudflare DNS 的操作。&lt;/p&gt;
&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h
      
    
    </summary>
    
    
      <category term="https" scheme="https://lidong.me/tags/https/"/>
    
      <category term="letsencrypt" scheme="https://lidong.me/tags/letsencrypt/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="dns-api" scheme="https://lidong.me/tags/dns-api/"/>
    
      <category term="api" scheme="https://lidong.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Circleci SSH 服务端设置</title>
    <link href="https://lidong.me/circleci-ssh-setup/"/>
    <id>https://lidong.me/circleci-ssh-setup/</id>
    <published>2020-02-19T18:31:51.000Z</published>
    <updated>2020-02-19T18:31:51.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="添加-circleci-用户"><a href="#添加-circleci-用户" class="headerlink" title="添加 circleci 用户"></a>添加 circleci 用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">useradd circleci</span><br></pre></td></tr></table></figure><h2 id="导入密钥"><a href="#导入密钥" class="headerlink" title="导入密钥"></a>导入密钥</h2><p>创建 authorized_keys，并设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/circleci/.ssh/</span><br><span class="line">touch /home/circleci/.ssh/authorized_keys</span><br><span class="line">sudo chown circleci:circleci /home/circleci/.ssh/</span><br><span class="line">sudo chown circleci:circleci /home/circleci/.ssh/authorized_keys</span><br><span class="line">sudo chmod 700 /home/circleci/.ssh/</span><br><span class="line">sudo chmod 600 /home/circleci/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>导入公钥</p><p>将公钥文件导入 <code>/home/circleci/.ssh/authorized_keys</code></p><h2 id="赋予-circleci-用户文件权限"><a href="#赋予-circleci-用户文件权限" class="headerlink" title="赋予 circleci 用户文件权限"></a>赋予 circleci 用户文件权限</h2><p>根据需要设置 circleci 权限文件，如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R circleci:circleci /srv/www</span><br></pre></td></tr></table></figure><p>根据需要重启ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/2/19 18:31:51 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;添加-circleci-用户&quot;&gt;&lt;a href=&quot;#添加-circleci-用户&quot; class=&quot;headerlink&quot; title=&quot;添加 circleci 用户&quot;&gt;&lt;/a&gt;添加 circleci 用户&lt;/h2&gt;&lt;figure
      
    
    </summary>
    
    
      <category term="circleci" scheme="https://lidong.me/tags/circleci/"/>
    
      <category term="ci" scheme="https://lidong.me/tags/ci/"/>
    
      <category term="ssh" scheme="https://lidong.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 组件示例</title>
    <link href="https://lidong.me/flutter-example/"/>
    <id>https://lidong.me/flutter-example/</id>
    <published>2020-02-03T17:10:41.000Z</published>
    <updated>2020-02-17T10:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MaterialDesign-风格组件"><a href="#MaterialDesign-风格组件" class="headerlink" title="MaterialDesign 风格组件"></a>MaterialDesign 风格组件</h2><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><a href="https://gist.github.com/b615309c5739479ca53a4b48531ea622" target="_blank" rel="noopener">https://gist.github.com/b615309c5739479ca53a4b48531ea622</a><br><img src="https://static.lidong.me/upload/HGPp0r7Id.png" style="width:300px;"></p><h3 id="路由示例"><a href="#路由示例" class="headerlink" title="路由示例"></a>路由示例</h3><p><a href="https://gist.github.com/7c60cac663677a014322f5051d1268a2" target="_blank" rel="noopener">https://gist.github.com/7c60cac663677a014322f5051d1268a2</a><br><img src="https://static.lidong.me/upload/cU0JeHiN_.gif" style="width:300px;"></p><h3 id="Scaffold-脚手架示例"><a href="#Scaffold-脚手架示例" class="headerlink" title="Scaffold 脚手架示例"></a>Scaffold 脚手架示例</h3><p><a href="https://gist.github.com/b53284b339b0512a3236b38ec3be7e3d" target="_blank" rel="noopener">https://gist.github.com/b53284b339b0512a3236b38ec3be7e3d</a><br><img src="https://static.lidong.me/upload/Wzks-ngkF.png" style="width:300px;"></p><h3 id="AppBar-组件示例"><a href="#AppBar-组件示例" class="headerlink" title="AppBar 组件示例"></a>AppBar 组件示例</h3><p><a href="https://gist.github.com/50005399007ff190332a7b0e6b2028a7" target="_blank" rel="noopener">https://gist.github.com/50005399007ff190332a7b0e6b2028a7</a><br><img src="https://static.lidong.me/upload/Cy1wQuz3j.png" style="width:300px;"></p><h3 id="BottomNavigationBar-示例"><a href="#BottomNavigationBar-示例" class="headerlink" title="BottomNavigationBar 示例"></a>BottomNavigationBar 示例</h3><p><a href="https://gist.github.com/1f40f47078a451e8b46386bcd6be9a30" target="_blank" rel="noopener">https://gist.github.com/1f40f47078a451e8b46386bcd6be9a30</a><br><img src="https://static.lidong.me/upload/qGQaLnFg_.gif" style="width:300px;"></p><h3 id="顶部选项卡示例-DefaultTabController"><a href="#顶部选项卡示例-DefaultTabController" class="headerlink" title="顶部选项卡示例 DefaultTabController"></a>顶部选项卡示例 DefaultTabController</h3><p><a href="https://gist.github.com/15e13af5af37e26bc632b3197fd3344e" target="_blank" rel="noopener">https://gist.github.com/15e13af5af37e26bc632b3197fd3344e</a><br><img src="https://static.lidong.me/upload/FSOmKyjhW.gif" style="width:300px;"></p><p><a href="https://gist.github.com/b26fe9d6695d9b7c602942e404f9954d" target="_blank" rel="noopener">https://gist.github.com/b26fe9d6695d9b7c602942e404f9954d</a><br><img src="https://static.lidong.me/upload/4fg8EIofH.gif" style="width:300px;"></p><h3 id="Drawer-抽屉示例"><a href="#Drawer-抽屉示例" class="headerlink" title="Drawer 抽屉示例"></a>Drawer 抽屉示例</h3><p><a href="https://gist.github.com/8a8dca80b872cf0424198498bc95cfee" target="_blank" rel="noopener">https://gist.github.com/8a8dca80b872cf0424198498bc95cfee</a><br><img src="https://static.lidong.me/upload/ctlygpGhS.gif" style="width:300px;"></p><h3 id="FloatingActionButton-悬浮按钮"><a href="#FloatingActionButton-悬浮按钮" class="headerlink" title="FloatingActionButton 悬浮按钮"></a>FloatingActionButton 悬浮按钮</h3><p><a href="https://gist.github.com/b13ee4cf290239d3890584bc2357a22a" target="_blank" rel="noopener">https://gist.github.com/b13ee4cf290239d3890584bc2357a22a</a><br><img src="https://static.lidong.me/upload/3PAbt6ZoT.gif" style="width:300px;"></p><h3 id="FlatButton-扁平按钮"><a href="#FlatButton-扁平按钮" class="headerlink" title="FlatButton 扁平按钮"></a>FlatButton 扁平按钮</h3><p>点击时会产生阴影效果<br><a href="https://gist.github.com/6c8ff70f906541191df670f2ed9119a9" target="_blank" rel="noopener">https://gist.github.com/6c8ff70f906541191df670f2ed9119a9</a><br><img src="https://static.lidong.me/upload/xgJ0YADB8.gif" style="width:300px;"></p><h3 id="PopupMenuButton-弹出菜单"><a href="#PopupMenuButton-弹出菜单" class="headerlink" title="PopupMenuButton 弹出菜单"></a>PopupMenuButton 弹出菜单</h3><p><a href="https://gist.github.com/ca11f2e0cf43f9a006ffd57ebce7f2fc" target="_blank" rel="noopener">https://gist.github.com/ca11f2e0cf43f9a006ffd57ebce7f2fc</a><br><img src="https://static.lidong.me/upload/T6V7lvFRO.gif" style="width:300px;"></p><h3 id="SimpleDialog-简单对话框"><a href="#SimpleDialog-简单对话框" class="headerlink" title="SimpleDialog 简单对话框"></a>SimpleDialog 简单对话框</h3><p><a href="https://gist.github.com/5baa7f806a600da7009aabcc7d7a8855" target="_blank" rel="noopener">https://gist.github.com/5baa7f806a600da7009aabcc7d7a8855</a><br><img src="https://static.lidong.me/upload/s5nxifskU.png" style="width:300px;"></p><h3 id="AlertDialog-提示对话框"><a href="#AlertDialog-提示对话框" class="headerlink" title="AlertDialog 提示对话框"></a>AlertDialog 提示对话框</h3><p><a href="https://gist.github.com/76530b0c8bb71a9a4b3f4a237f84a8e4" target="_blank" rel="noopener">https://gist.github.com/76530b0c8bb71a9a4b3f4a237f84a8e4</a><br><img src="https://static.lidong.me/upload/m6xnwAvma.png" style="width:300px;"></p><h3 id="SnackBar-轻量提示组件"><a href="#SnackBar-轻量提示组件" class="headerlink" title="SnackBar 轻量提示组件"></a>SnackBar 轻量提示组件</h3><p><a href="https://gist.github.com/9803b4e354316149f8745a8e8214d76c" target="_blank" rel="noopener">https://gist.github.com/9803b4e354316149f8745a8e8214d76c</a><br><img src="https://static.lidong.me/upload/P45D3X0X6.gif" style="width:300px;"></p><h3 id="TextField-文本输入框组件"><a href="#TextField-文本输入框组件" class="headerlink" title="TextField 文本输入框组件"></a>TextField 文本输入框组件</h3><p><a href="https://gist.github.com/e29a3af3bae773335ed879d839db84e0" target="_blank" rel="noopener">https://gist.github.com/e29a3af3bae773335ed879d839db84e0</a><br><img src="https://static.lidong.me/upload/KPepVoGMx.gif" style="width:300px;"></p><h3 id="Card-组件"><a href="#Card-组件" class="headerlink" title="Card 组件"></a>Card 组件</h3><p><a href="https://gist.github.com/de760626bd9c2c3bbbd4add74082f394" target="_blank" rel="noopener">https://gist.github.com/de760626bd9c2c3bbbd4add74082f394</a><br><img src="https://static.lidong.me/upload/U6_hqaXdp.png" style="width:300px;"></p><h2 id="Cupertino-风格组件"><a href="#Cupertino-风格组件" class="headerlink" title="Cupertino 风格组件"></a>Cupertino 风格组件</h2><h3 id="CupertinoActivityIndicator-加载指示器组件"><a href="#CupertinoActivityIndicator-加载指示器组件" class="headerlink" title="CupertinoActivityIndicator 加载指示器组件"></a>CupertinoActivityIndicator 加载指示器组件</h3><p><a href="https://gist.github.com/b007becdec822bc08efc789a5072a8e6" target="_blank" rel="noopener">https://gist.github.com/b007becdec822bc08efc789a5072a8e6</a><br><img src="https://static.lidong.me/upload/7qSYKeYyC.gif" style="width:300px;"></p><h3 id="CupertinoAlertDialog-组件示例"><a href="#CupertinoAlertDialog-组件示例" class="headerlink" title="CupertinoAlertDialog 组件示例"></a>CupertinoAlertDialog 组件示例</h3><p><a href="https://gist.github.com/1c4213209192ed883ca0689a583c15c8" target="_blank" rel="noopener">https://gist.github.com/1c4213209192ed883ca0689a583c15c8</a><br><img src="https://static.lidong.me/upload/kbWAQEpIG.png" style="width:300px;"></p><h3 id="CupertinoButton-按钮组件"><a href="#CupertinoButton-按钮组件" class="headerlink" title="CupertinoButton 按钮组件"></a>CupertinoButton 按钮组件</h3><p><a href="https://gist.github.com/3c34c6ebc9ad707e42f8c684b871ed71" target="_blank" rel="noopener">https://gist.github.com/3c34c6ebc9ad707e42f8c684b871ed71</a><br><img src="https://static.lidong.me/upload/Ba_yO3r8T.png" style="width:300px;"></p><h3 id="Cuptino-导航组件集"><a href="#Cuptino-导航组件集" class="headerlink" title="Cuptino 导航组件集"></a>Cuptino 导航组件集</h3><p><a href="https://gist.github.com/0d6823ae9841801d0045a8407c03c64c" target="_blank" rel="noopener">https://gist.github.com/0d6823ae9841801d0045a8407c03c64c</a><br><img src="https://static.lidong.me/upload/Th55pwX-M.gif" style="width:300px;"></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="Container-容器布局"><a href="#Container-容器布局" class="headerlink" title="Container 容器布局"></a>Container 容器布局</h3><p><a href="https://gist.github.com/dfe293099ca7e967dc9f6cc7022c4954" target="_blank" rel="noopener">https://gist.github.com/dfe293099ca7e967dc9f6cc7022c4954</a><br><img src="https://static.lidong.me/upload/nhLz4Nu2W.png" style="width:300px;"></p><h3 id="Center-居中布局"><a href="#Center-居中布局" class="headerlink" title="Center 居中布局"></a>Center 居中布局</h3><p><a href="https://gist.github.com/9b10a8153279397ea8a7b5445a9b36b0" target="_blank" rel="noopener">https://gist.github.com/9b10a8153279397ea8a7b5445a9b36b0</a><br><img src="https://static.lidong.me/upload/iXrRCZ6Fd.png" style="width:300px;"></p><h3 id="Padding-填充布局"><a href="#Padding-填充布局" class="headerlink" title="Padding 填充布局"></a>Padding 填充布局</h3><p><a href="https://gist.github.com/ryanlid/0fd152bf916ab79a8eacd35173659001" target="_blank" rel="noopener">https://gist.github.com/ryanlid/0fd152bf916ab79a8eacd35173659001</a><br><img src="https://static.lidong.me/upload/dLYk1CCxe.png" style="width:300px;"></p><h3 id="Align-对齐布局"><a href="#Align-对齐布局" class="headerlink" title="Align 对齐布局"></a>Align 对齐布局</h3><p><a href="https://gist.github.com/41509ee215041f56710472b64fd9f1c4" target="_blank" rel="noopener">https://gist.github.com/41509ee215041f56710472b64fd9f1c4</a><br><img src="https://static.lidong.me/upload/icIKukDVD.png" style="width:300px;"></p><h3 id="Row-水平布局"><a href="#Row-水平布局" class="headerlink" title="Row 水平布局"></a>Row 水平布局</h3><p><a href="https://gist.github.com/7d0b882600aa2e1c7f73028788b468db" target="_blank" rel="noopener">https://gist.github.com/7d0b882600aa2e1c7f73028788b468db</a><br><img src="https://static.lidong.me/upload/Hc-VuWn3b.png" style="width:300px;"></p><h3 id="Column-垂直布局"><a href="#Column-垂直布局" class="headerlink" title="Column 垂直布局"></a>Column 垂直布局</h3><p><a href="https://gist.github.com/4d9e271242ea9ea6e1deed03a2ca28ef" target="_blank" rel="noopener">https://gist.github.com/4d9e271242ea9ea6e1deed03a2ca28ef</a><br><img src="https://static.lidong.me/upload/RcxuRJcm2.png" style="width:300px;"></p><h3 id="Stack-层叠布局"><a href="#Stack-层叠布局" class="headerlink" title="Stack 层叠布局"></a>Stack 层叠布局</h3><p><a href="https://gist.github.com/53f5685bd43dfd64b6aff467c00dc16e" target="_blank" rel="noopener">https://gist.github.com/53f5685bd43dfd64b6aff467c00dc16e</a></p><p><img src="https://static.lidong.me/upload/bNDgfr0k3.png" style="width:300px;"></p><h3 id="Stack-层叠定位布局"><a href="#Stack-层叠定位布局" class="headerlink" title="Stack 层叠定位布局"></a>Stack 层叠定位布局</h3><p><a href="https://gist.github.com/f427875dbf26d47cbf1b2ed2820f5dea" target="_blank" rel="noopener">https://gist.github.com/f427875dbf26d47cbf1b2ed2820f5dea</a></p><p><img src="https://static.lidong.me/upload/mzjS6Wh6U.png" style="width:300px;"></p><h3 id="IndexedStack-布局示例"><a href="#IndexedStack-布局示例" class="headerlink" title="IndexedStack 布局示例"></a>IndexedStack 布局示例</h3><p><a href="https://gist.github.com/c837d3a9011087431451f5007506d629" target="_blank" rel="noopener">https://gist.github.com/c837d3a9011087431451f5007506d629</a><br>index 为1<br><img src="https://static.lidong.me/upload/MH0DqWrSz.png" style="width:300px;"></p><p>index 为0<br><img src="https://static.lidong.me/upload/ISvTDS5Gp.png" style="width:300px;"></p><h3 id="OverflowBox-溢出父容器显示"><a href="#OverflowBox-溢出父容器显示" class="headerlink" title="OverflowBox 溢出父容器显示"></a>OverflowBox 溢出父容器显示</h3><p><a href="https://gist.github.com/1cb8c14a626e9219f107d12cb3725d04" target="_blank" rel="noopener">https://gist.github.com/1cb8c14a626e9219f107d12cb3725d04</a><br><img src="https://static.lidong.me/upload/DbLOj25Ct.png" style="width:300px;"></p><h3 id="SizedBox-设置具体尺寸"><a href="#SizedBox-设置具体尺寸" class="headerlink" title="SizedBox 设置具体尺寸"></a>SizedBox 设置具体尺寸</h3><p><a href="https://gist.github.com/343f3f0e939c8b9b2c9e997c673fffa9" target="_blank" rel="noopener">https://gist.github.com/343f3f0e939c8b9b2c9e997c673fffa9</a><br><img src="https://static.lidong.me/upload/uG2KAUDQe.png" style="width:300px;"></p><h3 id="ConstrainedBox-限定最大最小宽高布局"><a href="#ConstrainedBox-限定最大最小宽高布局" class="headerlink" title="ConstrainedBox 限定最大最小宽高布局"></a>ConstrainedBox 限定最大最小宽高布局</h3><p><a href="https://gist.github.com/7fa7c962b5436d3a8deef3d4075d1473" target="_blank" rel="noopener">https://gist.github.com/7fa7c962b5436d3a8deef3d4075d1473</a><br><img src="https://static.lidong.me/upload/OlPoiOx4A.png" style="width:300px;"></p><h3 id="LimitedBox-限定宽高布局"><a href="#LimitedBox-限定宽高布局" class="headerlink" title="LimitedBox 限定宽高布局"></a>LimitedBox 限定宽高布局</h3><p><a href="https://gist.github.com/2f9dc786e114683872b78d31a14eccf7" target="_blank" rel="noopener">https://gist.github.com/2f9dc786e114683872b78d31a14eccf7</a><br><img src="https://static.lidong.me/upload/p9WwCFLlW.png" style="width:300px;"></p><h3 id="AspectRatio-调整宽高比"><a href="#AspectRatio-调整宽高比" class="headerlink" title="AspectRatio 调整宽高比"></a>AspectRatio 调整宽高比</h3><p><a href="https://gist.github.com/df1df7dc81549a658729536f14861b05" target="_blank" rel="noopener">https://gist.github.com/df1df7dc81549a658729536f14861b05</a><br><img src="https://static.lidong.me/upload/LsbFiaeNL.png" style="width:300px;"></p><h3 id="FractionallySizedBox百分比布局"><a href="#FractionallySizedBox百分比布局" class="headerlink" title="FractionallySizedBox百分比布局"></a>FractionallySizedBox百分比布局</h3><p><a href="https://gist.github.com/98fa1996b8cb95da62a2e9076b02d6ad" target="_blank" rel="noopener">https://gist.github.com/98fa1996b8cb95da62a2e9076b02d6ad</a><br><img src="https://static.lidong.me/upload/iX0NHjnn3.png" style="width:300px;"></p><h3 id="ListView布局"><a href="#ListView布局" class="headerlink" title="ListView布局"></a>ListView布局</h3><p><a href="https://gist.github.com/262af581100a7fe0e8e3956e5d87478f" target="_blank" rel="noopener">https://gist.github.com/262af581100a7fe0e8e3956e5d87478f</a><br><img src="https://static.lidong.me/upload/00IfeO3cx.png" style="width:300px;"></p><p>ListView 实现长文本滚动<br><a href="https://gist.github.com/7efa088e0893fb12ade12aac59bec379" target="_blank" rel="noopener">https://gist.github.com/7efa088e0893fb12ade12aac59bec379</a><br><img src="https://static.lidong.me/upload/GEVxVie5e.png" style="width:300px;"></p><h3 id="GridView-网格布局示例"><a href="#GridView-网格布局示例" class="headerlink" title="GridView 网格布局示例"></a>GridView 网格布局示例</h3><p><a href="https://gist.github.com/d6e9edcee135ad1cffe1df8980a3127f" target="_blank" rel="noopener">https://gist.github.com/d6e9edcee135ad1cffe1df8980a3127f</a><br><img src="https://static.lidong.me/upload/3TAYoba4V.png" style="width:300px;"></p><h3 id="Table-表格布局"><a href="#Table-表格布局" class="headerlink" title="Table 表格布局"></a>Table 表格布局</h3><p><a href="https://gist.github.com/fff09c7e862e4a50574e7fafd0ef8515" target="_blank" rel="noopener">https://gist.github.com/fff09c7e862e4a50574e7fafd0ef8515</a><br><img src="https://static.lidong.me/upload/x5e7JxNib.png" style="width:300px;"></p><h3 id="Transform-矩阵转换"><a href="#Transform-矩阵转换" class="headerlink" title="Transform 矩阵转换"></a>Transform 矩阵转换</h3><p><a href="https://gist.github.com/511f767d40447085b61ff11043b405d1" target="_blank" rel="noopener">https://gist.github.com/511f767d40447085b61ff11043b405d1</a><br><img src="https://static.lidong.me/upload/yhbUBYyat.png" style="width:300px;"></p><h3 id="Baseline-基准线布局"><a href="#Baseline-基准线布局" class="headerlink" title="Baseline 基准线布局"></a>Baseline 基准线布局</h3><p><a href="https://gist.github.com/76b53d6ffd6b1708f81de14c97cd5304" target="_blank" rel="noopener">https://gist.github.com/76b53d6ffd6b1708f81de14c97cd5304</a><br><img src="https://static.lidong.me/upload/sxXZzqUAF.png" style="width:300px;"></p><h3 id="Offstage控制是否显示组件"><a href="#Offstage控制是否显示组件" class="headerlink" title="Offstage控制是否显示组件"></a>Offstage控制是否显示组件</h3><p><a href="https://gist.github.com/793a9815f2d091f0e6299550c8bded00" target="_blank" rel="noopener">https://gist.github.com/793a9815f2d091f0e6299550c8bded00</a><br><img src="https://static.lidong.me/upload/fNS11tkFk.gif" style="width:300px;"></p><h3 id="Wrap按宽高自动换行布局"><a href="#Wrap按宽高自动换行布局" class="headerlink" title="Wrap按宽高自动换行布局"></a>Wrap按宽高自动换行布局</h3><p><a href="https://gist.github.com/0f23160a775cde81adcfd1d24d43577b" target="_blank" rel="noopener">https://gist.github.com/0f23160a775cde81adcfd1d24d43577b</a><br><img src="https://static.lidong.me/upload/MILklzyma.png" style="width:300px;"></p><h2 id="手势"><a href="#手势" class="headerlink" title="手势"></a>手势</h2><h3 id="GestureDetector-按下"><a href="#GestureDetector-按下" class="headerlink" title="GestureDetector 按下"></a>GestureDetector 按下</h3><p><a href="https://gist.github.com/611345f082298c4abd91da9e45a94a82" target="_blank" rel="noopener">https://gist.github.com/611345f082298c4abd91da9e45a94a82</a><br><img src="https://static.lidong.me/upload/qESMfc3fG.gif" style="width:300px;"></p><h3 id="Dismissible-滑动"><a href="#Dismissible-滑动" class="headerlink" title="Dismissible 滑动"></a>Dismissible 滑动</h3><p><a href="https://gist.github.com/6bbe82c7e20f093c651b6b0fc7a1e2f0" target="_blank" rel="noopener">https://gist.github.com/6bbe82c7e20f093c651b6b0fc7a1e2f0</a><br><img src="https://static.lidong.me/upload/MvcOcFpqv.gif" style="width:300px;"></p><h2 id="组件装饰和视觉效果"><a href="#组件装饰和视觉效果" class="headerlink" title="组件装饰和视觉效果"></a>组件装饰和视觉效果</h2><h3 id="Opacity-透明度"><a href="#Opacity-透明度" class="headerlink" title="Opacity 透明度"></a>Opacity 透明度</h3><p><a href="https://gist.github.com/f9b4fb12e9461dd9cb45902108bb8337" target="_blank" rel="noopener">https://gist.github.com/f9b4fb12e9461dd9cb45902108bb8337</a><br><img src="https://static.lidong.me/upload/kwi-FVjDT.png" style="width:300px;"></p><h3 id="DecorateBox-装饰盒子"><a href="#DecorateBox-装饰盒子" class="headerlink" title="DecorateBox 装饰盒子"></a>DecorateBox 装饰盒子</h3><p><a href="https://gist.github.com/556d44a88ab6fd9bc8f4d10d5f8fc5c4" target="_blank" rel="noopener">https://gist.github.com/556d44a88ab6fd9bc8f4d10d5f8fc5c4</a><br><img src="https://static.lidong.me/upload/7dr0dve-X.png" style="width:300px;"></p><p><a href="https://gist.github.com/6cafe86d0d47f7fe4d439cb56b9b7623" target="_blank" rel="noopener">https://gist.github.com/6cafe86d0d47f7fe4d439cb56b9b7623</a><br><img src="https://static.lidong.me/upload/Zz_jTYvhL.png" style="width:300px;"></p><h3 id="LinearGradient线性渐变效果"><a href="#LinearGradient线性渐变效果" class="headerlink" title="LinearGradient线性渐变效果"></a>LinearGradient线性渐变效果</h3><p><a href="https://gist.github.com/e4d66e9ac19a4817358606eb43da6866" target="_blank" rel="noopener">https://gist.github.com/e4d66e9ac19a4817358606eb43da6866</a><br><img src="https://static.lidong.me/upload/Yn4gXuijW.png" style="width:300px;"></p><h3 id="RadialGradient环形渐变效果"><a href="#RadialGradient环形渐变效果" class="headerlink" title="RadialGradient环形渐变效果"></a>RadialGradient环形渐变效果</h3><p><a href="https://gist.github.com/4c0fb7846394cc2191aa61ca917116b2" target="_blank" rel="noopener">https://gist.github.com/4c0fb7846394cc2191aa61ca917116b2</a><br><img src="https://static.lidong.me/upload/hJYCewshP.png" style="width:300px;"></p><h3 id="RotatedBox-旋转盒子"><a href="#RotatedBox-旋转盒子" class="headerlink" title="RotatedBox 旋转盒子"></a>RotatedBox 旋转盒子</h3><p><a href="https://gist.github.com/5ab2152fff6ddbbd61e32420490be4e6" target="_blank" rel="noopener">https://gist.github.com/5ab2152fff6ddbbd61e32420490be4e6</a><br><img src="https://static.lidong.me/upload/QXdkDMt_K.png" style="width:300px;"></p><h3 id="Clip-剪裁盒子"><a href="#Clip-剪裁盒子" class="headerlink" title="Clip 剪裁盒子"></a>Clip 剪裁盒子</h3><h4 id="CliOval圆形剪裁"><a href="#CliOval圆形剪裁" class="headerlink" title="CliOval圆形剪裁"></a>CliOval圆形剪裁</h4><p><a href="https://gist.github.com/5b43f9298940700f7dee643d57d10688" target="_blank" rel="noopener">https://gist.github.com/5b43f9298940700f7dee643d57d10688</a><br><img src="https://static.lidong.me/upload/4JYLCvJqh.png" style="width:300px;"></p><h4 id="ClipRRect圆角矩形裁剪"><a href="#ClipRRect圆角矩形裁剪" class="headerlink" title="ClipRRect圆角矩形裁剪"></a>ClipRRect圆角矩形裁剪</h4><p><a href="https://gist.github.com/707941b06ee5fbdc557da402cd5ff9e5" target="_blank" rel="noopener">https://gist.github.com/707941b06ee5fbdc557da402cd5ff9e5</a></p><p><img src="https://static.lidong.me/upload/j21AcD70G.png" style="width:300px;"></p><h4 id="ClipRect矩形裁剪"><a href="#ClipRect矩形裁剪" class="headerlink" title="ClipRect矩形裁剪"></a>ClipRect矩形裁剪</h4><p><a href="https://gist.github.com/f59267cedbe4b96905d153c79d2409bb" target="_blank" rel="noopener">https://gist.github.com/f59267cedbe4b96905d153c79d2409bb</a><br><img src="https://static.lidong.me/upload/ZvvdtjOLX.png" style="width:300px;"></p><h4 id="ClipPath路径剪裁示例"><a href="#ClipPath路径剪裁示例" class="headerlink" title="ClipPath路径剪裁示例"></a>ClipPath路径剪裁示例</h4><p><a href="https://gist.github.com/3bb17a51bf069aebdf41a678306a8a84" target="_blank" rel="noopener">https://gist.github.com/3bb17a51bf069aebdf41a678306a8a84</a><br><img src="https://static.lidong.me/upload/fhHFf7URT.png" style="width:300px;"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2020/2/3 17:10:41 首次发布</li><li>2020/2/17 10:41:00 添加更多组件示例</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MaterialDesign-风格组件&quot;&gt;&lt;a href=&quot;#MaterialDesign-风格组件&quot; class=&quot;headerlink&quot; title=&quot;MaterialDesign 风格组件&quot;&gt;&lt;/a&gt;MaterialDesign 风格组件&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="flutter" scheme="https://lidong.me/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>每日签到</title>
    <link href="https://lidong.me/qiandao/"/>
    <id>https://lidong.me/qiandao/</id>
    <published>2019-08-27T21:34:42.000Z</published>
    <updated>2019-08-27T21:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便记录每天签到领取积分的小事，避免遗漏，或者重复操作，做了一个小工具</p><a id="more"></a><p>项目地址： <a href="https://qian.lidong.me" target="_blank" rel="noopener">https://qian.lidong.me</a><br>源码地址： <a href="https://github.com/ryanlid/qiandao" target="_blank" rel="noopener">https://github.com/ryanlid/qiandao</a></p><p>扫码试用：<br><img src="https://api.oonnnoo.com/qr/qrcode?text=https%3A%2F%2Fqian.lidong.me"></p><p>功能点：</p><ol><li>收集了一些 常用APP 签到</li><li>通过 URL（URL schemes）唤起 APP</li><li>通过比较当前时间与本地保存的时间戳，判断是否为当天首次开启，判断是否需要更新页面上的签到数据，确保页面数据每天有且只更新一次</li><li>使用 PWA 技术，让网页可以离线使用，可以添加桌面图标</li></ol><p>几点问题：</p><ol><li>因为系统限制在iOS设备中将页面添加到桌面图标后，通过桌面图标无法唤起其他 APP。android设备没有这个问题。</li><li>页面加载后，无法及时获取更新页面，待优化。</li></ol><p>TODO:</p><ol><li>可以根据偏好，选择每日签到的 APP 列表</li><li>优化使用了 PWA 技术的页面更新</li><li>使用 webauth webshare 使用一些有趣的尝试。</li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/8/27 21:34:42 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便记录每天签到领取积分的小事，避免遗漏，或者重复操作，做了一个小工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwa" scheme="https://lidong.me/tags/pwa/"/>
    
      <category term="小作品" scheme="https://lidong.me/tags/%E5%B0%8F%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>PWA 备忘录</title>
    <link href="https://lidong.me/pwa-cheat-sheet/"/>
    <id>https://lidong.me/pwa-cheat-sheet/</id>
    <published>2019-07-23T19:58:21.000Z</published>
    <updated>2019-07-23T19:58:21.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="什么是-PWA"><a href="#什么是-PWA" class="headerlink" title="什么是 PWA"></a>什么是 PWA</h3><h3 id="Wab-App-Manifest"><a href="#Wab-App-Manifest" class="headerlink" title="Wab App Manifest"></a>Wab App Manifest</h3><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/manifast.json&quot;&gt;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"PWA Simple"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"PWASimple"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/index.html"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"#FFE9D2"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"FFE1C4"</span>,</span><br><span class="line">  <span class="attr">"orientation"</span>: <span class="string">"portrait-primary"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/icons/icons-72x72.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"images/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"72x72"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/icons/icons-96x96.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"images/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"96x96"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/icons/icons-128x128.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"images/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"128x128"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"/icons/icons-144x144.png"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"images/png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"144x144"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iOS-支持"><a href="#iOS-支持" class="headerlink" title="iOS 支持"></a>iOS 支持</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iOS support --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/icons/icon-96x96.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar"</span> <span class="attr">content</span>=<span class="string">"#aa7700"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><div id="flowchart-0" class="flow-chart"></div><blockquote><p>当第一次加载页面时，Service Worker 还没有激活，所以不会处理任何请求，只有当它安装和激活后，才能控制在其范围的一切。这意味着，只有刷新页面或导航到另一个页面，Service Worker 内的逻辑才会启动</p></blockquote><h3 id="注册-Service-Worker"><a href="#注册-Service-Worker" class="headerlink" title="注册 Service Worker"></a>注册 Service Worker</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// register the service worker</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"serviceWorker"</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker</span><br><span class="line">    .register(<span class="string">"/sw.js"</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">reg</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"service worker registered"</span>, reg))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"service worker not registered"</span>, err));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-Worker-安装事件"><a href="#Service-Worker-安装事件" class="headerlink" title="Service Worker 安装事件"></a>Service Worker 安装事件</h3><p>在安装过程中预缓存</p><figure class="highlight js"><figcaption><span>sw.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install service worker</span></span><br><span class="line">self.addEventListener(<span class="string">"install"</span>, evt =&gt; &#123;</span><br><span class="line">  evt.waitUntil(</span><br><span class="line">    <span class="comment">// 使用指定的缓存名称打开缓存</span></span><br><span class="line">    caches</span><br><span class="line">      .open(staticCacheName)</span><br><span class="line">      <span class="comment">// 将文件添加到缓存中</span></span><br><span class="line">      .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">        cache.addAll([</span><br><span class="line">          <span class="string">"/"</span>,</span><br><span class="line">          <span class="string">"/index.html"</span>,</span><br><span class="line">          <span class="string">"/about.html"</span>,</span><br><span class="line">          <span class="string">"manifest.json"</span>,</span><br><span class="line">          <span class="string">"/css/style.css"</span></span><br><span class="line">        ]);</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>如果所有的文件都成功缓存，Service Worker 便会安装成功。如果有任何文件下载失败，那么安装过程也会随之失败。</p></blockquote><p>检查传入的请求 URL 是否匹配当前缓存已有内容</p><figure class="highlight js"><figcaption><span>sw.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch event</span></span><br><span class="line">self.addEventListener(<span class="string">"fetch"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    <span class="comment">// 检查传入的请求URL是否匹配当前缓存已有内容</span></span><br><span class="line">    caches.match(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果有 response 并且它不是未定的或空的，就返回</span></span><br><span class="line">      <span class="comment">// 否则如往常一样继续，通过网络获取内容</span></span><br><span class="line">      <span class="keyword">if</span> (response) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>拦截请求并缓存，适用于网页中动态链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheName = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">"fetch"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    <span class="comment">// 检查传入的请求URL是否匹配当前缓存已有内容</span></span><br><span class="line">    caches.match(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果有response并且它不是未定的或空的，就返回缓存内容</span></span><br><span class="line">      <span class="keyword">if</span> (response) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 复制请求，请求是一个流，只能使用一次</span></span><br><span class="line">      <span class="keyword">var</span> requestToCache = event.request.clone();</span><br><span class="line">      <span class="keyword">return</span> fetch(requestToCache).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果请求失败或者服务器响应了错误代码，则立即返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (!response || response.status !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> requestToCache = response.clone();</span><br><span class="line">        caches.open(cacheName).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</span><br><span class="line">          cache.put(requestToCache, requestToCache);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 否则如往常一样继续，通过网络获取内容</span></span><br><span class="line">      <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Service-Worker-更新"><a href="#Service-Worker-更新" class="headerlink" title="Service Worker 更新"></a>Service Worker 更新</h3><p>为了能让 Service Worker 做到实时更新，必须要解决 Service Worker 文件 sw.js HTTP 缓存的问题<br>服务端设置 Cache-Control</p><figure class="highlight nginx"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \/sw\.js$</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-store;</span><br><span class="line">    <span class="attribute">add_header</span> Pragma <span class="literal">no</span>-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/7/23 19:58:21 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/28161855" target="_blank" rel="noopener">如何优雅的为 PWA 注册 Service Worker</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">Service Worker | Google Developers</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle" target="_blank" rel="noopener">Service Worker 生命周期 | Google Developers</a></li><li><a href="https://zhuanlan.zhihu.com/p/51118741" target="_blank" rel="noopener">谨慎处理 Service Worker 的更新</a><br><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">op1=>operation: register the service worker (sw.js)op2=>operation: install event缓存 App Shell 等关键静态资源和 html (保证能缓存的内容能在离线状态跑起来)op3=>operation: service worker becomes activeop4=>operation: active event激活的状态，这里就做一做老的缓存的清理工作op5=>operation: service worker "listens" for eventop1->op2->op3->op4->op5</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;什么是-PWA&quot;&gt;&lt;a href=&quot;#什么是-PWA&quot; class=&quot;headerlink&quot; title=&quot;什么是 PWA&quot;&gt;&lt;/a&gt;什么是 PWA&lt;/h3&gt;&lt;h3 id=&quot;Wab-App-Manifest&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="pwa" scheme="https://lidong.me/tags/pwa/"/>
    
      <category term="progressive web app" scheme="https://lidong.me/tags/progressive-web-app/"/>
    
      <category term="service worker" scheme="https://lidong.me/tags/service-worker/"/>
    
  </entry>
  
  <entry>
    <title>使用 squid 搭建 http 透明代理</title>
    <link href="https://lidong.me/http-proxy/"/>
    <id>https://lidong.me/http-proxy/</id>
    <published>2019-06-18T20:04:37.000Z</published>
    <updated>2019-06-18T20:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 apache2-utils 用于 HTTP 认证文件的生成，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2-utils -y</span><br></pre></td></tr></table></figure><p>安装 Squid，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install squid3 -y</span><br></pre></td></tr></table></figure><p>安装 stunnel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install stunnel4 -y</span><br></pre></td></tr></table></figure><h2 id="配置-Squid"><a href="#配置-Squid" class="headerlink" title="配置 Squid"></a>配置 Squid</h2><p>修改 Squid 默认配置</p><p>配置文件位于 <code>/etc/squid/squid.conf</code></p><h3 id="修改监听地址与端口号"><a href="#修改监听地址与端口号" class="headerlink" title="修改监听地址与端口号"></a>修改监听地址与端口号</h3><p>找到 <code>TAG: http_port</code> 注释，把其下方的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Squid normally listens to port 3128</span><br><span class="line">http_port 3128</span><br></pre></td></tr></table></figure><p>中 http_port 修改为 <code>127.0.0.1:3128</code></p><blockquote><p>使得 Squid 只能被本地（127.0.0.1）访问。此处可以修改为监听其他端口号。</p></blockquote><h3 id="修改访问权限与-HTTP-认证（可选）"><a href="#修改访问权限与-HTTP-认证（可选）" class="headerlink" title="修改访问权限与 HTTP 认证（可选）"></a>修改访问权限与 HTTP 认证（可选）</h3><p>若不需要添加 HTTP 认证，只需将 http_access deny all 修改为 http_access allow all 即可，无需下列的操作。</p><p>使用如下命令生成认证文件，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /etc/squid/squid.passwd &lt;登录用户名&gt;</span><br></pre></td></tr></table></figure><p>找到 <code>TAG: auth_param</code> 注释，在其下方添加，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/squid.passwd</span><br><span class="line">auth_param basic children 5</span><br><span class="line">auth_param basic realm Squid proxy-caching web server</span><br><span class="line">auth_param basic credentialsttl 2 hours</span><br><span class="line">auth_param basic casesensitive off</span><br></pre></td></tr></table></figure><p>找到 <code>TAG: acl</code> ，在其下方添加，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl ncsa_users proxy_auth REQUIRED</span><br></pre></td></tr></table></figure><p>找到 <code>TAG: http_access</code> ，在其下方添加，使得只允许经过认证的用户访问，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_access deny !ncsa_users</span><br><span class="line">http_access allow ncsa_users</span><br></pre></td></tr></table></figure><h3 id="重启-Squid"><a href="#重启-Squid" class="headerlink" title="重启 Squid"></a>重启 Squid</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service squid3 restart</span><br></pre></td></tr></table></figure><h2 id="配置-stunnel"><a href="#配置-stunnel" class="headerlink" title="配置 stunnel"></a>配置 stunnel</h2><p>接下来，我们需要在 Squid 上添加一层加密。</p><h3 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h3><p>生成私钥（ privatekey.pem ）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out privatekey.pem 2048</span><br></pre></td></tr></table></figure><p>生成公钥（ publickey.pem ）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key privatekey.pem -out publickey.pem -days 1095</span><br></pre></td></tr></table></figure><p>（需要注意的是， 命令中中输入 Common Name 需要与服务器的 IP 或者主机名一致）</p><p>合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat privatekey.pem publickey.pem &gt;&gt; /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure><h3 id="修改-stunnel-配置"><a href="#修改-stunnel-配置" class="headerlink" title="修改 stunnel 配置"></a>修改 stunnel 配置</h3><p>新建一个配置文件 /etc/stunnel/stunnel.conf ，输入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client = no</span><br><span class="line">[squid]</span><br><span class="line">accept = 4128</span><br><span class="line">connect = 127.0.0.1:3128</span><br><span class="line">cert = /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure><p>配置中指定了 stunnel 所暴露的 HTTPS 代理端口为 4128，可以修改为其他的值。</p><p>修改 /etc/default/stunnel4 配置文件中 ENABLED 值为 1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENABLED=1</span><br></pre></td></tr></table></figure><p>重启 stunnel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service stunnel4 restart</span><br></pre></td></tr></table></figure><p>至此，服务器端已配置完成了。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/6/18 20:04:37 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/github_38885296/article/details/78588006" target="_blank" rel="noopener">使用 Squid 搭建 HTTPS 代理服务器</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;安装 apache2-utils 用于 HTTP 认证文件的生成，&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="http" scheme="https://lidong.me/tags/http/"/>
    
      <category term="proxy" scheme="https://lidong.me/tags/proxy/"/>
    
      <category term="squid" scheme="https://lidong.me/tags/squid/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 安装使用</title>
    <link href="https://lidong.me/flutter-setup/"/>
    <id>https://lidong.me/flutter-setup/</id>
    <published>2019-05-24T21:16:18.000Z</published>
    <updated>2019-05-24T21:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-上的开发环境搭建"><a href="#Windows-上的开发环境搭建" class="headerlink" title="Windows 上的开发环境搭建"></a>Windows 上的开发环境搭建</h2><h3 id="下载安装-Flutter-安装包"><a href="#下载安装-Flutter-安装包" class="headerlink" title="下载安装 Flutter 安装包"></a>下载安装 Flutter 安装包</h3><ol><li><p>下载 Flutter 安装包</p><p><a href="https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.5.4-hotfix.2-stable.zip" target="_blank" rel="noopener">https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.5.4-hotfix.2-stable.zip</a></p><p>请从官网上获取最新稳定版本下载</p><p><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=windows" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases?tab=windows</a></p></li><li><p>将安装包 zip 解压到你想安装 Flutter SDK 的路径 比如 <code>C:\Flutter\</code></p><blockquote><p>注意，<strong>不要</strong>将 flutter 安装到需要一些高权限的路径，如 <code>C:\Program Files\</code></p></blockquote></li><li><p>在 Flutter 安装目录的 flutter 文件下找到 flutter_console.bat，双击运行并启动 flutter 命令行，接下来，你就可以在 Flutter 命令行运行 <code>flutter</code> 命令了。</p></li><li><p>（可选）配置 Flutter 环境变量</p><p>为了方便在之后项目中，可以打开 cmd 后可使用，可以将在 Flutter 安装目录添加到环境 PATH 中，配置方法如下：<br><img src="https://static.oonnnoo.com/upload/1pjE60Agf.png" alt="flutter-path.png"></p></li><li><p>（可选）配置 pub 镜像源，由于国内网络原因，可以通过环境变量，配置 pub 镜像源，加速 pub package 下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> PUB_HOSTED_URL=pub.flutter-io.cn</span><br><span class="line"><span class="built_in">set</span> FLUTTER_STORAGE_BASE_URL=storage.flutter-io.cn</span><br></pre></td></tr></table></figure></li></ol><h3 id="Android-Studio-的-安装"><a href="#Android-Studio-的-安装" class="headerlink" title="Android Studio 的 安装"></a>Android Studio 的 安装</h3><ol><li><p>下载 Android Studio</p><p>下载地址：<a href="https://developer.android.com/" target="_blank" rel="noopener">https://developer.android.com/</a></p><p>国内下载地址：<a href="https://developer.android.google.cn/studio/#downloads" target="_blank" rel="noopener">https://developer.android.google.cn/studio/#downloads</a></p></li><li><p>安装 Android Studio</p><p>此处有一个比较详细的安装教程。<a href="http://www.cnblogs.com/xiadewang/p/7820377.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiadewang/p/7820377.html</a> （安装过程中，需要配置代理）</p></li><li><p>安装 Flutter 插件</p><p>打开 Android Stuido ，File – Settings – Plugins， 搜索 Flutter ，选择 Flutter 安装。</p></li></ol><h3 id="同意-Android-licenses"><a href="#同意-Android-licenses" class="headerlink" title="同意 Android licenses"></a>同意 Android licenses</h3><p>运行下面命令，同意许可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><h3 id="安装-Android-模拟器-AVD"><a href="#安装-Android-模拟器-AVD" class="headerlink" title="安装 Android 模拟器(AVD)"></a>安装 Android 模拟器(AVD)</h3><ol><li>现在需要一个虚拟机来运行我们的程序，可以点击 Android Studio 中的上方菜单 Tool - AVD Manager 选项。</li><li>点击 Create Virtual Device。</li><li>选择设备型号，如 Nexus 5x。</li><li>选择系统，请选择较新的系统，如 android 8.1(Oreo)</li><li>安装完成，启动模拟器</li></ol><h2 id="MacOS-上的开发环境搭建"><a href="#MacOS-上的开发环境搭建" class="headerlink" title="MacOS 上的开发环境搭建"></a>MacOS 上的开发环境搭建</h2><h3 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h3><p><a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p><p>参考文章： <a href="https://segmentfault.com/a/1190000013317511" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013317511</a></p><h3 id="下载-Flutter-SDK-包"><a href="#下载-Flutter-SDK-包" class="headerlink" title="下载 Flutter SDK 包"></a>下载 Flutter SDK 包</h3><ol><li><p>下载 Flutter 安装包</p><p><a href="https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.5.4-hotfix.2-stable.zip" target="_blank" rel="noopener">https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.5.4-hotfix.2-stable.zip</a></p><blockquote><p>请从官网上获取最新稳定版本下载 <a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases?tab=macos</a></p></blockquote></li></ol><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>压缩包下载好以后，找个位置进行解压。这个位置很重要，因为下面配置环境变量的时候要用到。比如配置到了用户的 home 目录下。比如我的是 <code>/Users/ryan/</code></p><p>打开终端工具，修改 <code>~/.bash_profile</code>，在文件末尾添加下面内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim ~/.bash_profile</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/ryan/flutter/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：这行命令要根据压缩包解压的位置来进行编写。</p></blockquote><p>配置完成后，通过 source 命令重新加载一下 bash 配置文件，使其生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>通过以下命令检测 flutter 环境是否配置成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter --version</span><br></pre></td></tr></table></figure><h3 id="iOS-环境配置"><a href="#iOS-环境配置" class="headerlink" title="iOS 环境配置"></a>iOS 环境配置</h3><ol><li><p>安装一些必须的软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller</span><br><span class="line">brew install ios-deploy</span><br></pre></td></tr></table></figure></li><li><p>安装 cocoapods</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure></li></ol><h2 id="pub-镜像源配置"><a href="#pub-镜像源配置" class="headerlink" title="pub 镜像源配置"></a>pub 镜像源配置</h2><p>修改 <code>~/.bash_profile</code>，在文件末尾添加下面内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim ~/.bash_profile</span></span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>使其生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="Android-Studio-的安装"><a href="#Android-Studio-的安装" class="headerlink" title="Android Studio 的安装"></a>Android Studio 的安装</h3><ol><li><p>下载 Android Studio</p><p>下载地址：<a href="https://developer.android.com/" target="_blank" rel="noopener">https://developer.android.com/</a></p><p>国内下载地址：<a href="https://developer.android.google.cn/studio/#downloads" target="_blank" rel="noopener">https://developer.android.google.cn/studio/#downloads</a></p></li><li><p>安装 Android Studio</p><p>此处有一个比较详细的安装教程。<a href="http://www.cnblogs.com/xiadewang/p/7820377.html（安装过程中，需要配置代理）" target="_blank" rel="noopener">http://www.cnblogs.com/xiadewang/p/7820377.html（安装过程中，需要配置代理）</a></p></li><li><p>安装 Flutter 插件</p><p>打开 Android Stuido 软件，Preferences – Plugins ， 搜索 Flutter ，选择 Flutter 安装。</p></li></ol><h3 id="同意-Android-licenses-1"><a href="#同意-Android-licenses-1" class="headerlink" title="同意 Android licenses"></a>同意 Android licenses</h3><p>运行下面命令，同意许可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><h3 id="安装-Android-模拟器-AVD-1"><a href="#安装-Android-模拟器-AVD-1" class="headerlink" title="安装 Android 模拟器(AVD)"></a>安装 Android 模拟器(AVD)</h3><ol><li>现在需要一个虚拟机来运行我们的程序，可以点击 Android Studio 中的上方菜单 Tool - AVD Manager 选项。</li><li>点击 Create Virtual Device。</li><li>选择设备型号，如 Nexus 5x。</li><li>选择系统，请选择较新的系统，如 android 8.1(Oreo)</li><li>安装完成，启动模拟器</li></ol><h3 id="将项目运行到-Android-设备上"><a href="#将项目运行到-Android-设备上" class="headerlink" title="将项目运行到 Android 设备上"></a>将项目运行到 Android 设备上</h3><p>可以使用真机运行，须要在手机中开启调试模式，或开启 Android 模拟器进行调试</p><ul><li><p>通过终端运行</p><p>在项目目录中</p><ol><li>安装依赖包 <code>flutter packages get</code></li><li>运行命令 <code>flutter run</code></li></ol></li><li><p>通过 Android Studio 中运行</p><ol><li>用 Android Studio 选择项目的根目录，打开项目文件</li><li>点击绿色的 ▶ 图标，快捷键 <code>^R</code></li></ol></li></ul><h3 id="将项目运行到-iOS-设备上（仅限于-MacOS-上进行）"><a href="#将项目运行到-iOS-设备上（仅限于-MacOS-上进行）" class="headerlink" title="将项目运行到 iOS 设备上（仅限于 MacOS 上进行）"></a>将项目运行到 iOS 设备上（仅限于 MacOS 上进行）</h3><p>iOS 调试和 Android，调试不大一样，iOS 在模拟器上调试不需要配置签名，但在真机上调试需要配置签名，配置签名需要登录 Apple id，当然好消息是：不论 Apple id 是否为开发者账号，都可以用于 APP 的开发调试。</p><p>模拟器调试</p><ul><li><p>通过终端运行</p><p>在项目目录中</p><ol><li>安装依赖包 <code>flutter packages get</code></li><li>运行命令 <code>flutter run</code></li></ol></li><li><p>通过 Android Studio 中运行</p><ol><li>用 Android Studio 选择项目的根目录，打开项目文件</li><li>点击绿色的 ▶ 图标，快捷键 <code>^R</code></li></ol></li></ul><p>真机调试</p><ol><li>使用 Xcode 打开项目文件 <code>ios/Runner.xcworkspace</code></li><li>在 General 选项卡配置签名信息，其他地方暂不修改。</li><li>点击左上角的 ▶ 图标在真机上调试了。</li></ol><blockquote><p>也可以通过终端在项目项目目录下运行 <code>flutter run</code> 在真机上进行调试，</p></blockquote><p><img src="https://static.oonnnoo.com/upload/_RwdIDK_3.png" alt="flutter-ios-sign-w.png"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/5/24 21:16:18 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows-上的开发环境搭建&quot;&gt;&lt;a href=&quot;#Windows-上的开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Windows 上的开发环境搭建&quot;&gt;&lt;/a&gt;Windows 上的开发环境搭建&lt;/h2&gt;&lt;h3 id=&quot;下载安装-Flut
      
    
    </summary>
    
    
      <category term="flutter" scheme="https://lidong.me/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Web API 使用</title>
    <link href="https://lidong.me/web-apis/"/>
    <id>https://lidong.me/web-apis/</id>
    <published>2019-05-04T17:29:33.000Z</published>
    <updated>2019-05-04T17:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面可见性-page-visibility"><a href="#页面可见性-page-visibility" class="headerlink" title="页面可见性 (page visibility)"></a>页面可见性 (page visibility)</h2><p><a href="https://lidong.me/sandbox/web-api/networkstatus.html" target="_blank">网络状态检测</a></p><h2 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h2><p><a href="https://lidong.me/sandbox/web-api/pagevisibility.html" target="_blank">示例</a></p><h2 id="震动-vibration"><a href="#震动-vibration" class="headerlink" title="震动 (vibration)"></a>震动 (vibration)</h2><p><a href="https://lidong.me/sandbox/web-api/vibration.html" target="_blank">震动示例</a></p><h2 id="设备方向-device-orientation"><a href="#设备方向-device-orientation" class="headerlink" title="设备方向 (device orientation)"></a>设备方向 (device orientation)</h2><p><a href="https://lidong.me/sandbox/web-api/deviceorientation.html" target="_blank">设备方向示例</a></p><h2 id="剪切板-clipboard"><a href="#剪切板-clipboard" class="headerlink" title="剪切板 (clipboard)"></a>剪切板 (clipboard)</h2><p><a href="https://lidong.me/sandbox/web-api/clipboard.html" target="_blank">剪切板示例</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/5/4 17:29:33 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://youtu.be/EZpdEljk5dY" target="_blank" rel="noopener">Web APIs You [Probably] Didn’t Know Existed</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;页面可见性-page-visibility&quot;&gt;&lt;a href=&quot;#页面可见性-page-visibility&quot; class=&quot;headerlink&quot; title=&quot;页面可见性 (page visibility)&quot;&gt;&lt;/a&gt;页面可见性 (page visibilit
      
    
    </summary>
    
    
      <category term="html5" scheme="https://lidong.me/tags/html5/"/>
    
      <category term="web" scheme="https://lidong.me/tags/web/"/>
    
      <category term="api" scheme="https://lidong.me/tags/api/"/>
    
      <category term="web-api" scheme="https://lidong.me/tags/web-api/"/>
    
  </entry>
  
  <entry>
    <title>跨站资源共享 CORS 跨域配置</title>
    <link href="https://lidong.me/cors/"/>
    <id>https://lidong.me/cors/</id>
    <published>2019-04-20T17:28:43.000Z</published>
    <updated>2019-04-20T17:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。具体参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">MDN 文档</a></p><a id="more"></a><p>下面记录一下如何配置 CORS</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>可以在 <code>http</code> 或 <code>server</code> 或 <code>location</code> 中添加 <code>add_header</code></p><ol><li><p>允许单个域名跨域访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_header    &quot;Access-Control-Allow-Origin&quot; &quot;http://example.com&quot;;</span><br><span class="line">add_header    &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS&quot;;</span><br></pre></td></tr></table></figure></li><li><p>允许多个域名跨域访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($http_origin ~ &quot;^https?://(a.example.com|b.example.com)&quot;) &#123;</span><br><span class="line">   add_header    &quot;Access-Control-Allow-Origin&quot; $http_origin;</span><br><span class="line">   add_header    &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>允许所有域名跨域访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_header    &quot;Access-Control-Allow-Origin&quot; &quot;*&quot;;</span><br><span class="line">add_header    &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS&quot;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>在 <code>server.php</code> 文件头部添加如下代码：</p><ol><li><p>允许单个域名跨域访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin:http://example.com'</span>);</span><br></pre></td></tr></table></figure></li><li><p>允许多个域名跨域访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$origin = <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>])? $_SERVER[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$allow_origin = <span class="keyword">array</span>(</span><br><span class="line">   <span class="string">'http://a.example.com'</span>,</span><br><span class="line">   <span class="string">'https://a.example.com'</span>,</span><br><span class="line">   <span class="string">'http://b.example.com'</span>,</span><br><span class="line">   <span class="string">'https://b.example.com'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($origin, $allow_origin))&#123;</span><br><span class="line">   header(<span class="string">'Access-Control-Allow-Origin:'</span>.$origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>允许所有域名访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/4/20 17:28:43 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header" target="_blank" rel="noopener">Module ngx_http_headers_module</a></li><li><a href="https://www.jianshu.com/p/06007a4213d7" target="_blank" rel="noopener">PHP 通过 Access-Control-Allow-Origin 跨域</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。具体参考 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MDN 文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
      <category term="php" scheme="https://lidong.me/tags/php/"/>
    
      <category term="跨域" scheme="https://lidong.me/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="cors" scheme="https://lidong.me/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 中的文件 API</title>
    <link href="https://lidong.me/web-file-api/"/>
    <id>https://lidong.me/web-file-api/</id>
    <published>2019-04-18T21:08:02.000Z</published>
    <updated>2019-04-18T21:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件-API"><a href="#文件-API" class="headerlink" title="文件 API"></a>文件 API</h2><p>HTML5 提供了关于文件操作的文件 API。</p><ol><li><p>代表原始二进制数据的 Blob 对象</p></li><li><p>存放原始二进制数据的缓存区的 ArrayBuffer 对象，以及可向缓存区写入或从缓存区中读出数据的 ArrayBufferView 对象与 DataView 对象。</p></li></ol><p class="codepen" data-height="400" data-theme-id="0" data-default-tab="js,result" data-user="oonnnoo" data-slug-hash="zXELNW" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="FileList"><br>  <span>See the Pen <a href="https://codepen.io/oonnnoo/pen/zXELNW/" target="_blank" rel="noopener"><br>  FileList</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><h2 id="ArrayBuffer-与-ArrayBufferView-及-DataView"><a href="#ArrayBuffer-与-ArrayBufferView-及-DataView" class="headerlink" title="ArrayBuffer 与 ArrayBufferView 及 DataView"></a>ArrayBuffer 与 ArrayBufferView 及 DataView</h2><p>// TODO</p><h2 id="Blob-对象"><a href="#Blob-对象" class="headerlink" title="Blob 对象"></a>Blob 对象</h2><h3 id="创建-Blob-对象"><a href="#创建-Blob-对象" class="headerlink" title="创建 Blob 对象"></a>创建 Blob 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([blobParts, type]);</span><br></pre></td></tr></table></figure><p>第一个参数值为一个数组，可以存放任意数量的以下类型的对象。</p><ul><li>Array Buffer</li><li>ArrayBufferView</li><li>Blob</li><li>String 对象</li></ul><p>第二个参数表示为数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">"1234"</span> + <span class="string">"5678"</span>]);</span><br><span class="line"><span class="keyword">var</span> blobX = <span class="keyword">new</span> Blob([<span class="string">"1234"</span> + <span class="string">"5678"</span>], &#123; <span class="attr">type</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> blobY = <span class="keyword">new</span> Blob([<span class="string">"1234"</span> + <span class="string">"5678"</span>], &#123; <span class="attr">type</span>: <span class="string">"text/plain;charset=UTF-8"</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> shorts = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(buffer, <span class="number">512</span>, <span class="number">128</span>);</span><br><span class="line"><span class="keyword">var</span> blobA = <span class="keyword">new</span> Blob([blob, shorts]);</span><br><span class="line"><span class="keyword">var</span> bytes = <span class="keyword">new</span> Unit8Array(buffter, shorts.byteOffset + shorts.byteLength);</span><br><span class="line"><span class="keyword">var</span> blobB = <span class="keyword">new</span> Blob([blob, blobA, bytes]);</span><br><span class="line"><span class="keyword">var</span> blobC = <span class="keyword">new</span> Blob([buffer, blob, blobA, bytes]);</span><br></pre></td></tr></table></figure><h3 id="通过-Blob-生成文件下载"><a href="#通过-Blob-生成文件下载" class="headerlink" title="通过 Blob 生成文件下载"></a>通过 Blob 生成文件下载</h3><p>通过浏览器的 URL 对象的 <code>createObjectURL</code> 方法可以根据一个 Blob 对象的二进制数据来创建一个 URL 地址并返回该地址。当用户访问该 URL 地址时可以直接下载原始的二进制数据。</p><p class="codepen" data-height="300" data-theme-id="0" data-default-tab="js,result" data-user="oonnnoo" data-slug-hash="GLOdwE" style="height: 304px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="File-Blob-download"><br>  <span>See the Pen <a href="https://codepen.io/oonnnoo/pen/GLOdwE/" target="_blank" rel="noopener"><br>  File-Blob-download</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><h3 id="Blob-对象的-slice-方法"><a href="#Blob-对象的-slice-方法" class="headerlink" title="Blob 对象的 slice 方法"></a>Blob 对象的 slice 方法</h3><p>用于从 Blob 对象所代表的原始二进制数据中抽离一部分数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newBlob = blob.slice(start, end, contentType);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (file) &#123;</span><br><span class="line">  <span class="comment">// 复制file对象</span></span><br><span class="line">  <span class="keyword">var</span> fileClone = file.slice();</span><br><span class="line">  <span class="comment">// 复制file对象</span></span><br><span class="line">  <span class="keyword">var</span> fileClone2 = file.slice(<span class="number">0</span>, file.size);</span><br><span class="line">  <span class="comment">// 复制file对象的后半部分</span></span><br><span class="line">  <span class="keyword">var</span> fileChunkFromEnd = file.slice(-<span class="built_in">Math</span>.round(file.size / <span class="number">2</span>));</span><br><span class="line">  <span class="comment">// 复制file对象的前半部分</span></span><br><span class="line">  <span class="keyword">var</span> fileChunkFromStart = file.slice(<span class="number">0</span>, <span class="built_in">Math</span>.round(file.size / <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">var</span> fileNoMetadata = file.slice(<span class="number">0</span>, <span class="number">-150</span>, <span class="string">"application/experimental"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileReader-对象"><a href="#FileReader-对象" class="headerlink" title="FileReader 对象"></a>FileReader 对象</h2><p>FileReader 对象主要用于将文件读入内存，并读取文件中的数据</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>onabort 数据读取中断时</li><li>onerror 数据读取错误时</li><li>onloadstart 数据读取开始时</li><li>onprogress 数据读取中</li><li>onload 数据读取成功完成时</li><li>onloadend 数据读取完成时触发，无论成功还是失败</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    result.innerHTML = <span class="string">'&lt;img src="'</span> + <span class="keyword">this</span>.result + <span class="string">'"alt=""/&gt;'</span>;</span><br><span class="line">    alert(<span class="string">"load"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"progress"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.onabort = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"abort"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"error"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.onloadstart = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"loadstart"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"loadend"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间顺序 loadstart progress load loadend</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>readAsText</td><td>以文本的形式读取 Blob 对象（第二个参数可以设置文本的编码方式，默认 UTF-8）</td></tr><tr><td>readAsBinaryString</td><td>以二进制字符串读取 Blob 对象</td></tr><tr><td>readAsDataURL</td><td>以 Data URL 字符串 读取 Blob 对象</td></tr><tr><td>readAsArrayBuffer</td><td>以 ArrayBuffer 读取 Blob 对象</td></tr></tbody></table><p class="codepen" data-height="850" data-theme-id="0" data-default-tab="js,result" data-user="oonnnoo" data-slug-hash="yrKagM" style="height: 370px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="FileReader"><br>  <span>See the Pen <a href="https://codepen.io/oonnnoo/pen/yrKagM/" target="_blank" rel="noopener"><br>  FileReader</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><h3 id="FileReader-readAsArrayBuffer-示例"><a href="#FileReader-readAsArrayBuffer-示例" class="headerlink" title="FileReader readAsArrayBuffer 示例"></a>FileReader readAsArrayBuffer 示例</h3><p>首先将文件中前 4 个字节中的内容复制到一个 Blob 对象中，再将 Blob 对象中的数据读取为一个 ArrayBuffer 对象，然后使用 DataView 读取该 ArrayBuffer 缓存区中位于开头的 32 位整数，最后通过比较整数值来判断文件类型</p><p class="codepen" data-height="750" data-theme-id="0" data-default-tab="js,result" data-user="oonnnoo" data-slug-hash="jRzMRL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="FileReader-readAsArrayBuffer"><br>  <span>See the Pen <a href="https://codepen.io/oonnnoo/pen/jRzMRL/" target="_blank" rel="noopener"><br>  FileReader-readAsArrayBuffer</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/4/18 21:08:02 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件-API&quot;&gt;&lt;a href=&quot;#文件-API&quot; class=&quot;headerlink&quot; title=&quot;文件 API&quot;&gt;&lt;/a&gt;文件 API&lt;/h2&gt;&lt;p&gt;HTML5 提供了关于文件操作的文件 API。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代表原始二进制数据的 Blo
      
    
    </summary>
    
    
      <category term="html5" scheme="https://lidong.me/tags/html5/"/>
    
      <category term="javascript" scheme="https://lidong.me/tags/javascript/"/>
    
      <category term="web" scheme="https://lidong.me/tags/web/"/>
    
      <category term="api" scheme="https://lidong.me/tags/api/"/>
    
      <category term="html" scheme="https://lidong.me/tags/html/"/>
    
      <category term="file" scheme="https://lidong.me/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>我的开发环境</title>
    <link href="https://lidong.me/my-development-environment/"/>
    <id>https://lidong.me/my-development-environment/</id>
    <published>2019-04-10T12:05:34.000Z</published>
    <updated>2019-04-10T12:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的开发环境</p><a id="more"></a><h2 id="必备软件安装"><a href="#必备软件安装" class="headerlink" title="必备软件安装"></a>必备软件安装</h2><ul><li>git</li><li>sourcetree</li><li>chrome</li><li>vscode</li><li>item2</li><li>docker</li><li>postman</li></ul><h2 id="点文件配置"><a href="#点文件配置" class="headerlink" title="点文件配置"></a>点文件配置</h2><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/⁨Windows⁩/System32⁩/drivers⁩/etc⁩/hosts</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/5de803fea79cd6dc123a69189e8f236b.js"></script><h3 id="shell相关"><a href="#shell相关" class="headerlink" title="shell相关"></a>shell相关</h3><h4 id="bash-profile"><a href="#bash-profile" class="headerlink" title="bash_profile"></a>bash_profile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bash_profile</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/f0251b3be95b7d0c51c26d13fc52986b.js"></script><h4 id="zshrc"><a href="#zshrc" class="headerlink" title="zshrc"></a>zshrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.vimrc</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/23e332bf1a707f1987db7737f0e69d69.js"></script><h4 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh_config"></a>ssh_config</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.ssh/config</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/814de0ac719680d248c0ad37a6915c78.js"></script><h3 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h3><h4 id="gitconfig"><a href="#gitconfig" class="headerlink" title="gitconfig"></a>gitconfig</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/ac710f222bb345649edc099a29d1a504.js"></script><h4 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gitignore</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/a60e1724ab6b2eae03be8fffcd52d17b.js"></script><h3 id="Nodejs相关"><a href="#Nodejs相关" class="headerlink" title="Nodejs相关"></a>Nodejs相关</h3><h4 id="npmrc"><a href="#npmrc" class="headerlink" title="npmrc"></a>npmrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.npmrc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.cnpmrc</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/6cb14332a3759e247728b7755b5bea5d.js"></script><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="pip-conf"><a href="#pip-conf" class="headerlink" title="pip.conf"></a>pip.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.pip/pip.conf</span><br></pre></td></tr></table></figure><script src="https://proxy.oonnnoo.com/gist.github.com/ryanlid/8e46e2960f66a45b1e8e856f712c87f4.js"></script><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/4/10 12:05:34 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的开发环境&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssh" scheme="https://lidong.me/tags/ssh/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="git" scheme="https://lidong.me/tags/git/"/>
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="环境" scheme="https://lidong.me/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="bash" scheme="https://lidong.me/tags/bash/"/>
    
      <category term="zsh" scheme="https://lidong.me/tags/zsh/"/>
    
      <category term="vim" scheme="https://lidong.me/tags/vim/"/>
    
      <category term="hosts" scheme="https://lidong.me/tags/hosts/"/>
    
      <category term="python" scheme="https://lidong.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 使用</title>
    <link href="https://lidong.me/webpack-start/"/>
    <id>https://lidong.me/webpack-start/</id>
    <published>2019-03-22T20:15:33.000Z</published>
    <updated>2019-03-22T20:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装-webpack-cli-webpack"><a href="#安装-webpack-cli-webpack" class="headerlink" title="安装 webpack-cli webpack"></a>安装 webpack-cli webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D webpack-cli webpack</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev webpack-cli webpack</span><br></pre></td></tr></table></figure><p>创建 src 目录，并在 src 目录中创建 index.js 文件，在 <code>package.json</code>中编写 script <code>&quot;build&quot;:&quot;webpack&quot;</code> ；此刻运行 <code>npm run build</code> 即可将 src/index.js 编译生成 dist/main.js</p><p>此时的目录结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   └── main.js</span><br><span class="line">├── node-modules</span><br><span class="line">├── package.json</span><br><span class="line">└── src</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure><h2 id="使-javascript-自动插入到-HTML-中"><a href="#使-javascript-自动插入到-HTML-中" class="headerlink" title="使 javascript 自动插入到 HTML 中"></a>使 javascript 自动插入到 HTML 中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D html-webpack-plugin html-loader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev html-webpack-plugin html-loader</span><br></pre></td></tr></table></figure><p>创建 webpack 配置文件 webpack.config.js</p><p>配置 loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">"html-loader"</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      minimize: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> htmlWbpackPlugin(&#123;</span><br><span class="line">  template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">  filename: <span class="string">"./index.html"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这时候，再运行 <code>npm run build</code>，src 中html、js 文件就会被编译转换后保存在 dist 目录中，并且 html 文件中通过 script 引用了 js 文件。</p><p>此时的目录结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── main.js</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── index.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><h2 id="使用-webpack-dev-server"><a href="#使用-webpack-dev-server" class="headerlink" title="使用 webpack-dev-server"></a>使用 webpack-dev-server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D webpack-dev-server</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev webpack-dev-server</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中编写 script <code>&quot;dev&quot;:&quot;webpack-dev-server&quot;</code>；此刻运行 <code>npm run dev</code> 即可启动 webpack-dev-server，热加载运行，修改src目录中文件，即刻在页面中显示出效果。</p><h2 id="编译-javascript"><a href="#编译-javascript" class="headerlink" title="编译 javascript"></a>编译 javascript</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D @babel/core babel-loader @babel/preset-env</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @babel/core babel-loader @babel/preset-env</span><br></pre></td></tr></table></figure><p>在 webpack.config.js 中</p><p>配置 babel-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">"babel-loader"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译-sass"><a href="#编译-sass" class="headerlink" title="编译 sass"></a>编译 sass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D node-sass style-loader css-loader sass-loader mini-css-extract-plugin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev node-sass style-loader css-loader sass-loader mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>在 webpack.config.js 中</p><p>配置 sass、css 相关的 loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">"style-loader"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 配置 loader 是有顺序的，webpack 从后往前读取 loader ，也就是说这里 loader 是，scss 文件，先通过 sass-loader 处理，再通过 css-loader 处理，最后通过 style-loader 处理</p><p>配置 mini-css-extract-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">  filename: <span class="string">"[name].css"</span>,</span><br><span class="line">  chunkFilename: <span class="string">"[id].css"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D file-loader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev file-loader</span><br></pre></td></tr></table></figure><p>配置 file-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(jpg|png|gif|svg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">"file-loader"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目地址：<a href="https://github.com/ryanlid/webpack-start" target="_blank" rel="noopener">https://github.com/ryanlid/webpack-start</a><br>示例：<a href="https://webpack-start.lidong.me" target="_blank" rel="noopener">https://webpack-start.lidong.me</a><br>文档说明：<a href="https://lidong.me/blog/webpack-start">https://lidong.me/blog/webpack-start</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2019/3/22 20:15:33 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;&lt;/a&gt;初始化项目&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://lidong.me/tags/webpack/"/>
    
      <category term="webpack4" scheme="https://lidong.me/tags/webpack4/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose 使用</title>
    <link href="https://lidong.me/docker-compose/"/>
    <id>https://lidong.me/docker-compose/</id>
    <published>2018-12-18T17:28:58.000Z</published>
    <updated>2020-02-20T13:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h2><p>参看<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">官方文档</a></p><p>Linux版安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>验证安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><blockquote><p>docker-compose version 1.25.4, build 8d51620a</p></blockquote><p>修改 <code>docker-compose.yml</code> 文件后，智能更新运行中 docker container（重建受改动部分影响的容器）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>强制重新创建container</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --force-recreate</span><br></pre></td></tr></table></figure><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>Q: <code>sudo: docker-compose：找不到命令</code></p><p>A:</p><p>方案一：切换为root用户后重新执行安装命令</p><p>方案二：可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo `which docker-compose` ...</span><br></pre></td></tr></table></figure><p>替代原来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose ...</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://stackoverflow.com/questions/38775954/sudo-docker-compose-command-not-found" target="_blank" rel="noopener">https://stackoverflow.com/questions/38775954/sudo-docker-compose-command-not-found</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/12/18 17:28:58 首次发布</li><li>2020/2/20 13:00:58 更新 docker-compose 版本</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker-compose安装&quot;&gt;&lt;a href=&quot;#docker-compose安装&quot; class=&quot;headerlink&quot; title=&quot;docker-compose安装&quot;&gt;&lt;/a&gt;docker-compose安装&lt;/h2&gt;&lt;p&gt;参看&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="docker-compose" scheme="https://lidong.me/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>frp配置</title>
    <link href="https://lidong.me/frp/"/>
    <id>https://lidong.me/frp/</id>
    <published>2018-11-18T15:04:33.000Z</published>
    <updated>2018-12-31T19:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为光纤改造，安装上了光纤，没了公网IP，嗯，也没有去找客服要，想着试一下内网穿透。frp这个内网穿透的工具，使用配置起来，还是挺简单的</p><a id="more"></a><p>frp下载地址：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p><h2 id="服务端配置（frps，具有公网IP的设备"><a href="#服务端配置（frps，具有公网IP的设备" class="headerlink" title="服务端配置（frps，具有公网IP的设备)"></a>服务端配置（frps，具有公网IP的设备)</h2><figure class="highlight plain"><figcaption><span>frps.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">subdomain_host = lidong.me</span><br><span class="line">vhost_https_port = 443</span><br></pre></td></tr></table></figure><h2 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure><h2 id="客户端配置（frpc-无公网IP的设备）"><a href="#客户端配置（frpc-无公网IP的设备）" class="headerlink" title="客户端配置（frpc 无公网IP的设备）"></a>客户端配置（frpc 无公网IP的设备）</h2><figure class="highlight plain"><figcaption><span>frpc.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = nas.lidong.me</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[audio]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = audio</span><br><span class="line"></span><br><span class="line">[download]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = download</span><br><span class="line"></span><br><span class="line">[files]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = files</span><br><span class="line"></span><br><span class="line">[mailplus]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = mailplus</span><br><span class="line"></span><br><span class="line">[note]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = note</span><br><span class="line"></span><br><span class="line">[drive]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = drive</span><br><span class="line"></span><br><span class="line">[moments]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = moments</span><br><span class="line"></span><br><span class="line">[video]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = video</span><br></pre></td></tr></table></figure><h2 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/11/18 15:04:33 首次发布</li><li>2018/12/31 19:02:13 增加启动脚本</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为光纤改造，安装上了光纤，没了公网IP，嗯，也没有去找客服要，想着试一下内网穿透。frp这个内网穿透的工具，使用配置起来，还是挺简单的&lt;/p&gt;
    
    </summary>
    
    
      <category term="frp" scheme="https://lidong.me/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://lidong.me/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>通过 Nginx 使用 Google Analytics</title>
    <link href="https://lidong.me/nginx-google-analytics/"/>
    <id>https://lidong.me/nginx-google-analytics/</id>
    <published>2018-10-05T23:53:53.000Z</published>
    <updated>2018-10-05T23:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常是通过引用 analytics.js 来使用 Google Analytics 。 但是这个方案缺点是：客户端安装 Adblock 等扩展，屏蔽了Google Analytics，导致统计信息偏差。</p><p>通过将统计转移到后端发送，则可以避免统计被扩展拦截的可能，同时也提高浏览器访问页面的速度。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">userid on;</span><br><span class="line">userid_name cid;</span><br><span class="line">userid_domain [domain];</span><br><span class="line">userid_path /;</span><br><span class="line">userid_expires max;</span><br><span class="line"></span><br><span class="line">location @tracker &#123;</span><br><span class="line">    resolver 100.100.2.138 8.8.8.8 233.5.5.5 valid=3600s;</span><br><span class="line">    proxy_method GET;</span><br><span class="line">    proxy_pass https://www.google-analytics.com/collect?v=1&amp;tid=[UA-XXXXXXXX-Y]&amp;$uid_set$uid_got&amp;t=pageview&amp;dh=$host&amp;dp=$uri&amp;uip=$remote_addr&amp;dr=$http_referer&amp;z=$msec;</span><br><span class="line">    proxy_set_header User-Agent $http_user_agent;</span><br><span class="line">    proxy_pass_request_headers off;</span><br><span class="line">    proxy_pass_request_body off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">    post_action @tracker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ng­inx 默认自带的 userid 模块可以用于标记各个用户，而 post_ac­tion 配置项可以在 Ng­inx 收到的请求处理完成后向某处发送一个异步的 Get 请求，这个请求会附带原始请求的 ref­erer 与 user-agent</p></blockquote><blockquote><p>userid 模块将会在用户访问时检查 cook­ies 中是否有 cid 项，如果没有 cid 项，则会在返回的 header 中加入 set-cook­ies 头标记这个用户，并将$uid_set 变量设定为 cid=XXXXXX 这一形式，将$uid_got 变量设定为空。如果有 cid 项，则将$uid_got 变量设定为 cid=XXXXXX 这一形式，将$uid_set 变量设定为空。于是在@tracker 部分，上述变量会将$uid_set$uid_got 填充为 cid=XXXXXX。</p></blockquote><p>遵守 DNT (Do Not Track) 的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">    if ($http_dnt != 1) &#123;post_action @tracker;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的配置，查看我的 <a href="https://github.com/ryanlid/nginx-conf/blob/09eca098cfc8116a4d7e8105354480291aab0c35/www.lidong.me.conf" target="_blank" rel="noopener">Github</a></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>和相较于参考文章，我添加 <code>resolver 100.100.2.138 8.8.8.8 233.5.5.5 valid=3600s;</code>  这个是用于dns解析 <code>www.google-analytics.com</code> 的，在调试过程中：如果不添加 <code>resolver</code> ， 在 <code>proxy_pass</code> 填写 ip 测试没有问题，填写域名测试就接收不到数据了。</p><p>更多内容查看参考链接～～</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/10/5 23:53:53 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://darknode.in/network/nginx-google-analytics/" target="_blank" rel="noopener">Ng­inx 内配置 Google An­a­lyt­ics 指南</a></li><li><a href="https://imlonghao.com/36.html" target="_blank" rel="noopener">通过 Nginx 使用 Google Analytics 服务</a></li><li><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide" target="_blank" rel="noopener">使用 Measurement Protocol</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常是通过引用 analytics.js 来使用 Google Analytics 。 但是这个方案缺点是：客户端安装 Adblock 等扩展，屏蔽了Google Analytics，导致统计信息偏差。&lt;/p&gt;
&lt;p&gt;通过将统计转移到后端发送，则可以避免统计被扩展拦截的可能，同时也提高浏览器访问页面的速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
      <category term="google analytics" scheme="https://lidong.me/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>raspberrypi 安装 ffmpeg</title>
    <link href="https://lidong.me/raspberry-pi-ffmpeg/"/>
    <id>https://lidong.me/raspberry-pi-ffmpeg/</id>
    <published>2018-08-19T21:10:11.000Z</published>
    <updated>2018-08-19T21:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装编译x264"><a href="#安装编译x264" class="headerlink" title="安装编译x264"></a>安装编译x264</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> git://git.videolan.org/x264</span><br><span class="line"><span class="comment"># git clone https://gitea.lidong.me/mirrors/x264.git</span></span><br><span class="line"><span class="built_in">cd</span> x264</span><br><span class="line">./configure --host=arm-unknown-linux-gnueabi --<span class="built_in">enable</span>-static --<span class="built_in">disable</span>-opencl</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p><code>make -j4</code> 表示使用4线程编译，raspberry pi 3 为四核 CPU，使用4线程可以加快编译速度</p></blockquote><h2 id="安装-FFMPEG"><a href="#安装-FFMPEG" class="headerlink" title="安装 FFMPEG"></a>安装 FFMPEG</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> git://source.ffmpeg.org/ffmpeg.git</span><br><span class="line"><span class="built_in">cd</span> ffmpeg</span><br><span class="line">./configure --arch=armel --target-os=linux --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-nonfree</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="配置-ldconfig"><a href="#配置-ldconfig" class="headerlink" title="配置 ldconfig"></a>配置 ldconfig</h2><p>完成上述步骤后，直接运行命令 ffmpeg 会报错：<code>ffmpeg: error while loading shared libraries: libx264.so.157: cannot open shared object file: No such file or directory。</code></p><p>找不到对应库，库文件存放在 /usr/local/lib 这个目录，这里将目录添加到配置文件中，命令行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>添加 <code>/usr/local/lib</code>，最终文件内容为：</p><figure class="highlight plain"><figcaption><span>ld.so.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /etc/ld.so.conf.d/*.conf</span><br><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>运行 ldconfig 使配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>这时输入 <code>ffmpeg</code> 命令即可看到类似下面的输出，则表示已经安装成功。</p><p><img src="https://static.lidong.me/upload/images/_Zwvgbb_S.png" alt="raspberrypi-ffmpeg"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/19 21:10:11 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://gist.github.com/dudewheresmycode/154df74824aadef2b8c1b8a6bccb66c7" target="_blank" rel="noopener">install ffmpeg on Raspberry Pi</a></li><li><a href="https://segmentfault.com/a/1190000014681834" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014681834</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装编译x264&quot;&gt;&lt;a href=&quot;#安装编译x264&quot; class=&quot;headerlink&quot; title=&quot;安装编译x264&quot;&gt;&lt;/a&gt;安装编译x264&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://lidong.me/tags/ffmpeg/"/>
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装 Nextcloud ，并挂载阿里云 OSS</title>
    <link href="https://lidong.me/nextcloud/"/>
    <id>https://lidong.me/nextcloud/</id>
    <published>2018-08-06T20:21:27.000Z</published>
    <updated>2018-08-06T20:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，阿里 OSS 最近出了个优惠，1T存储3年99元，看起来蛮便宜的，当然流量费另算，不过同区域的内网流量免费，入网流量免费，灰常适合作备份。哈哈 😄<br>于是弄个nextcloud，倒腾一下~~，顺道记录一下倒腾过程。</p><a id="more"></a><h2 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择"></a>镜像选择</h2><p><img src="https://static.lidong.me/upload/images/SJS6BxLrQ.png" alt="nextcloud-docker-tags.png"></p><p><a href="https://hub.docker.com/_/nextcloud/" target="_blank" rel="noopener">查看链接</a></p><p>官方提供了多种版本的 image ，目前最新稳定版是 <code>13.x.x</code> 我选择的是 <code>nextcloud:stable-apache</code>，这是我的 <code>docker-compose.yml</code>文件</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/datadir:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">     <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">mysql_root_password</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud:stable-apache</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/nextcloud/html:/var/www/html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">website:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">onnno/nginx:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/www:/var/www</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/nginx/conf.d:/usr/local/nginx/conf.d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx:/usr/local/nginx/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/letsencrypt:/etc/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud</span></span><br></pre></td></tr></table></figure><blockquote><p>这里简化过的 <code>docker-compose.yml</code> 。因为MySQL的密码直接写在了 yml 文件中，就不贴完整原文件了，仅供参考，使用时注意替换。</p></blockquote><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>通过你的域名或IP访问你的服务器安装就可以了，操作简单，就不细说了，如有需要，查看我的 <a href="https://github.com/ryanlid/nginx-conf" target="_blank" rel="noopener">Nginx的配置</a> 以及我的 <a href="https://github.com/ryanlid/nginx-conf/blob/master/cloud.lidong.me.conf" target="_blank" rel="noopener"> Nextcloud Nginx的配置</a></p><blockquote><p>注意：安装填写 MySQL 数据地址要填写 <code>mysql</code>, 而不是 <code>localhost</code> 了</p></blockquote><h2 id="OSS-挂载权限"><a href="#OSS-挂载权限" class="headerlink" title="OSS 挂载权限"></a>OSS 挂载权限</h2><p>阿里 OSS 提供一个工具 ossfs ， 可以将 OSS 挂载到本地文件系统上。</p><p>查看<a href="https://help.aliyun.com/document_detail/32196.html" target="_blank" rel="noopener">oss文档</a></p><p>先按照文档安装ossfs，配置 passwd-ossfs ，挂载目录就不能按照文档操作了，因为 NextCloud 有点不一样，“外部存储” 挂载的目录权限必须是 0770 ，用户是 33，（也不知道是为什么是这个鬼，应该 docker 的问题），否则在使用 NextCloud 时无法读取到文件。</p><p>正确的挂载方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my-bucket:oss的bucket名 ouid: 用户id ogid:组id</span></span><br><span class="line">ossfs my-bucket my-mount-point -ourl=my-oss-endpoint -ouid=33 -ogid=0  -oumask=007 -o allow_other</span><br></pre></td></tr></table></figure><p>具体缘由：<a href="https://github.com/aliyun/ossfs/wiki/FAQ#11" target="_blank" rel="noopener">看这里</a> 和 <a href="https://github.com/aliyun/ossfs/issues/5" target="_blank" rel="noopener">看这里</a></p><p>这是我的挂载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ossfs cloud-fs /var/nextcloud/html/cloudossfs -ourl=http://oss-cn-hongkong-internal.aliyuncs.com -ouid=33 -ogid=0  -oumask=007 -o allow_other</span><br></pre></td></tr></table></figure><blockquote><p>注意：因为我在 docker 映射的是 <code>/var/nextcloud/html/</code> 目录， <code>my-mount-point</code> 必须在 <code>/var/nextcloud/html/</code>之下，否则在容器中是读取不到的。</p><p>我这里 my-mount-point 是 <code>/var/nextcloud/html/cloudossfs</code>，在docker容器中对应的则是<code>/var/www/html/cloudossfs</code></p></blockquote><p>这时在 Nextcloud 中启用 External storage support 应用（插件），添加路径就可以通过 OSS 存取数据啦。</p><p><img src="https://static.lidong.me/upload/images/r1TzObIrX.png" alt="External storage"></p><blockquote><p>看不清图片，可以右键图片，选择新标签页打开图片</p></blockquote><p>如果还是不行，尝试进入到容器，将 <code>/var/www/html/cloudossfs</code> 目录的用户属性手动修改为 <code>www-data</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown www-data:root /var/www/html/cloudossfs/</span><br></pre></td></tr></table></figure><p>重新扫描用户文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u www-data php occ files:scan --all</span><br></pre></td></tr></table></figure><p>缘由<a href="https://www.zhihu.com/question/267841887/answer/393946741" target="_blank" rel="noopener">看这里</a></p><p>在容器中不带 <code>sudo</code> 命令，需要安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install sudo</span><br></pre></td></tr></table></figure><blockquote><p>PS： 最初我也是想把 Nextcloud 中的整个目录都映射到 OSS 的中的，即上面的目录 <code>/var/nextcloud/html:/var/www/html</code>，因为权限问题 Nextcloud 一直没有操作成功，而且文件巨多，不算用户上传的数据，就有13000多个， OSS 的一部分费用是按请求计算的，每1万次1分钱。在安装过程中，拷贝了两次，产生了两万多个请求。直接把我 OSS 账号搞欠费了（因为账号本没有余额😆），于是放弃了。</p></blockquote><h2 id="客户端同步设置"><a href="#客户端同步设置" class="headerlink" title="客户端同步设置"></a>客户端同步设置</h2><p>Nextcould是见过为数不多的支持自定义忽略文件、文件夹的云同步软件</p><h3 id="设置忽略文件"><a href="#设置忽略文件" class="headerlink" title="设置忽略文件"></a>设置忽略文件</h3><p>在Windows上，忽略文件的配置文件保存在<code>C:\Program Files (x86)\Nextcloud\sync-exclude.lst</code>中。</p><p>其他操作系统，请自行查找，可以在客户端的设置中查看</p><p>找到文件，在文件末尾，添加 <code>node_modules</code> ，同步的时候就会自动跳过 <code>node_modules</code> 目录了 😆</p><h3 id="设置隐藏文件同步"><a href="#设置隐藏文件同步" class="headerlink" title="设置隐藏文件同步"></a>设置隐藏文件同步</h3><p>Nextcloud 默认是不同步隐藏文件的，即点开头的文件</p><p>文档在这里：<a href="https://docs.nextcloud.com/desktop/2.3/advancedusage.html#configuration-file" target="_blank" rel="noopener">链接</a></p><ul><li><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">HOME/.config/Nextcloud/nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li><li><p>Windows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">APPDATA%\Nextcloud\nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li><li><p>macOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">HOME/Library/Preferences/Nextcloud/nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li></ul><p>将 <code>ignoreHiddenFiles=true</code> 修改为 <code>ignoreHiddenFiles=false</code> 即可</p><blockquote><p>按文档来说是这样，但是修改后重启客户端后，就无法连接服务端了。貌似是 bug 了，额，尴尬。😱</p></blockquote><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><p>通常，在访问 Nextcloud 过程中，程序会自动检查请求是 http 请求还是 https 请求，而动态生成页面中资源的链接，而现在的部署方式，使用nginx代理过请求， 如果是是https访问，程序并不能检测到https请求，所以需要在 Nextcloud 配置文件 <code>/var/nextcloud/html/config/config.php</code> 添加为 <code>&#39;overwriteprotocol&#39; =&gt; &#39;https&#39;</code>来覆盖默认设置。</p></li><li><p>如果要上传大文件，注意在nginx中设置 <code>client_max_body_size</code> ,看我的<a href="https://github.com/ryanlid/nginx-conf/blob/5678e4bab3b7a34ec92043e3a9566fc471d04775/cloud.lidong.me.conf#L14" target="_blank" rel="noopener">示例</a></p></li><li><p>欢迎使用我的阿里云的 <a href="https://promotion.aliyun.com/ntms/act/oss-discount.html?userCode=hk4wst53" target="_blank" rel="noopener">推荐链接</a> ，参团一起购买有优惠，你懂的 ~~~</p></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/6 20:21:27 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://crabdave.iteye.com/blog/2356624" target="_blank" rel="noopener">使用OwnCloud Docker容器+阿里云OSS搭建自己的云盘服务 on Centos 7</a></li><li><a href="https://oing9179.github.io/blog/2017/03/Setup-Nextcloud-using-Docker-and-Nginx/" target="_blank" rel="noopener">用 Docker 和 Nginx 搭建自己的云服务器（Nextcloud）</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，阿里 OSS 最近出了个优惠，1T存储3年99元，看起来蛮便宜的，当然流量费另算，不过同区域的内网流量免费，入网流量免费，灰常适合作备份。哈哈 😄&lt;br&gt;于是弄个nextcloud，倒腾一下~~，顺道记录一下倒腾过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="nextcloud" scheme="https://lidong.me/tags/nextcloud/"/>
    
      <category term="owncloud" scheme="https://lidong.me/tags/owncloud/"/>
    
      <category term="oss" scheme="https://lidong.me/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>使用 ffmpeg 下载加密 ts 视频流</title>
    <link href="https://lidong.me/ffmpeg-download-ts/"/>
    <id>https://lidong.me/ffmpeg-download-ts/</id>
    <published>2018-08-02T22:30:53.000Z</published>
    <updated>2018-08-02T22:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为朋友需要下载某课的付费视频，某课的视频是以ts文件后缀格式的视频流一小段一小段边下边播的，而且使用了加密手段。研究了一下，发现通过 ffmpeg 下载还是挺容易的，直接可以生成一个ts的文件，播放器都播放这个文件也是没有问题的。</p><p>现在记录一下下载方法，不过前提是你有在线观看的权限。否则拿不到视频流地址，何谈下载？</p><a id="more"></a><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>  最好使用 Linux 环境</p><p>  我使用的是 wsl 中 ubuntu (WSL 中的 Ubuntu 16.04.5 LTS)<br>  <img src="https://static.lidong.me/upload/images/HkQVn9xB7.png" alt="lsb_release.png"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>安装ffmpeg，在 ubuntu 系统中，可以直接 <code>apt install</code> 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>下载m3u8</p><p>如果播放的视频是ts形式的视频流，浏览器播放视频之前一定会加载一个.m3u8 文件，可以通过浏览器开发者工具network查看到，下载这个文件</p></li><li><p>下载key文件，替换m3u8中的key文件</p><p>在m3u8 中的密钥通常是这样的：<code>#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://xxx&quot;</code>，这时需要用能够在线观看到这个视频的浏览器会话去访问这个 URI （通过 cookies 验证），并保存到本地，并把 m3u8 也保存到本地，将密钥的 URI 改为下载好的本地路径（一个 m3u8 中可能有多个密钥，需要一一处理）。</p><blockquote><p>如果报错可以将文件保存为以.m3u8后缀的文件</p></blockquote><p>下载视频文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 02.m3u8  -c copy 02.ts  <span class="comment"># ffmpeg -i m3u8路径 -c copy 下载文件保存文件名</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="遇到的问题及参考资料列表"><a href="#遇到的问题及参考资料列表" class="headerlink" title="遇到的问题及参考资料列表"></a>遇到的问题及参考资料列表</h2><ol><li><p><a href="http://www.cuplayer.com/player/PlayerCode/FFmpeg/2017/0419/2873.html" target="_blank" rel="noopener">[ffmpeg]如何使用ffmpeg下载分段并加密的m3u8视频流</a></p></li><li><p><a href="https://blog.csdn.net/dzreal_7/article/details/79277636" target="_blank" rel="noopener">ffmpeg读取加密的m3u8文件时无法访问.key文件</a></p></li><li><p><a href="https://blog.csdn.net/cnhome/article/details/73250495" target="_blank" rel="noopener">ffmpeg分解视频文件并加密</a></p></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/2 22:30:53 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为朋友需要下载某课的付费视频，某课的视频是以ts文件后缀格式的视频流一小段一小段边下边播的，而且使用了加密手段。研究了一下，发现通过 ffmpeg 下载还是挺容易的，直接可以生成一个ts的文件，播放器都播放这个文件也是没有问题的。&lt;/p&gt;
&lt;p&gt;现在记录一下下载方法，不过前提是你有在线观看的权限。否则拿不到视频流地址，何谈下载？&lt;/p&gt;
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://lidong.me/tags/ffmpeg/"/>
    
      <category term="ts视频流" scheme="https://lidong.me/tags/ts%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    
      <category term="视频下载" scheme="https://lidong.me/tags/%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>weex 从入门到放弃</title>
    <link href="https://lidong.me/weex-getting-started-and-giving-up/"/>
    <id>https://lidong.me/weex-getting-started-and-giving-up/</id>
    <published>2018-07-18T13:31:57.000Z</published>
    <updated>2018-07-21T23:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中尝试使用，研究了好几天，感觉框架不成熟，很多功能需要原生支撑，最终决定弃坑，不过还是记录一下。</p><a id="more"></a><h2 id="初始使用"><a href="#初始使用" class="headerlink" title="初始使用"></a>初始使用</h2><p>安装 weex-toolkit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install weex-toolkit -g</span><br></pre></td></tr></table></figure><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex create awesome-app</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd awesome-app</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weex platform add ios</span><br><span class="line">weex platform add android</span><br></pre></td></tr></table></figure><p>在模拟器或真实设备上启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weex run ios</span><br><span class="line">weex run android</span><br><span class="line">weex run web</span><br></pre></td></tr></table></figure><h2 id="一些有用的资料"><a href="#一些有用的资料" class="headerlink" title="一些有用的资料"></a>一些有用的资料</h2><p>weex-ui：阿里飞猪支持的一个UI库</p><p><a href="https://alibaba.github.io/weex-ui/#/" target="_blank" rel="noopener">https://alibaba.github.io/weex-ui/#/</a></p><p>natjs: 提供一些常用原生功能</p><p><a href="http://natjs.com/#/zh-cn/" target="_blank" rel="noopener">http://natjs.com/#/zh-cn/</a></p><p>weex 插件市场: 可以找到一些插件</p><p><a href="https://market.dotwe.org/ext/list.htm" target="_blank" rel="noopener">https://market.dotwe.org/ext/list.htm</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/7/18 13:31:57 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中尝试使用，研究了好几天，感觉框架不成熟，很多功能需要原生支撑，最终决定弃坑，不过还是记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="weex" scheme="https://lidong.me/tags/weex/"/>
    
      <category term="vuejs" scheme="https://lidong.me/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>使用 travis-ci 自动化部署 hexo</title>
    <link href="https://lidong.me/hexo-travis-ci/"/>
    <id>https://lidong.me/hexo-travis-ci/</id>
    <published>2018-07-16T22:18:39.000Z</published>
    <updated>2018-07-16T22:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前有使用 hexo 记录 blog ，但不能在线修改，每次写完都要本地构建、提交、上传，操作繁琐， 遂弃之，今天重新尝试使用 hexo ，不过这次配置好了 CI，简化日常操作，现在记录一下操作步骤。</p><a id="more"></a><h2 id="配置-Acess-Token"><a href="#配置-Acess-Token" class="headerlink" title="配置 Acess Token"></a>配置 Acess Token</h2><p>我使用的是<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a>, 免费版只能用于开源项目，所以不能使用ssh-key来认证的（常规方法，貌似通过奇技淫巧也是可以，没具体操作），所以只能使用 Personal Access Token。</p><p>管理自己 Personal Access Token 的地方在 Settings 中，链接地址：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> ,在最小权限原则下，可以授予 <code>public_repo</code> 权限即可。</p><p><img src="https://static.lidong.me/upload/images/HJXs1HqQm.png" alt="Personal-Access-Token-Permissions"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>将 access token 添加到 Travis CI环境变量中，添加之后，就可以在配置文件中使用 <code>$环境变量</code> 指代 access token，从而不用把重要的密钥提交到代码中</p><p><img src="https://static.lidong.me/upload/images/rJRxrLcXQ.png" alt="travis-ci-setting"></p><h2 id="编写travis-yaml"><a href="#编写travis-yaml" class="headerlink" title="编写travis.yaml"></a>编写travis.yaml</h2><blockquote><p>代码放在Gist上，如无法查看，请自行想办法 😜</p></blockquote><p>Travis CI 将安装配置文件设置执行</p><script src="//gist.github.com/cb1e1aca4f2914b2f550599dc09510d9.js"></script><p>在部署完后添加将代码提交到gh-pages分支</p><script src="//gist.github.com/2a5c496e38491ab90fae86ad1fc0a5aa.js"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>目前通过 travis-ci 自动部署到了 GitHub Pages 上 , <a href="https://ryanlid.github.io/blog/" target="_blank" rel="noopener">https://ryanlid.github.io/blog/</a> ，但主站还是部署在我的云主机上，将代码同步到我云主机上这一步还是通过手动操作，后期将准备通过 webhook，触发自动部署</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/7/16 22:18:39 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="hlttps://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 博客 - Blessing Studio</a></li><li><a href="https://www.jianshu.com/p/5e74046e7a0f" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo</a></li><li><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前有使用 hexo 记录 blog ，但不能在线修改，每次写完都要本地构建、提交、上传，操作繁琐， 遂弃之，今天重新尝试使用 hexo ，不过这次配置好了 CI，简化日常操作，现在记录一下操作步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ci" scheme="https://lidong.me/tags/ci/"/>
    
      <category term="hexo" scheme="https://lidong.me/tags/hexo/"/>
    
      <category term="travis-ci" scheme="https://lidong.me/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6 学习</title>
    <link href="https://lidong.me/es6-learning/"/>
    <id>https://lidong.me/es6-learning/</id>
    <published>2018-06-18T20:00:27.000Z</published>
    <updated>2018-06-18T20:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>又学习了一下 JavaScript 的 ES6 的语法，记录一下～</p><a id="more"></a><p><a href="https://static.lidong.me/upload/images/407Uqvai1.jpg" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/407Uqvai1.jpg" alt="ECMAScript 6"></a></p><h2 id="使用-let-声明变量"><a href="#使用-let-声明变量" class="headerlink" title="使用 let 声明变量"></a>使用 <code>let</code> 声明变量</h2><p>let 声明的变量尽在代码块内有效。(ES6 中新增的块级作用域)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Let/index.js</span></span><br><span class="line"><span class="keyword">var</span> ourFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'this is in the outer scope'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">'this is a new value'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a new value</span></span><br><span class="line"><span class="comment">// this is in the outer scope</span></span><br></pre></td></tr></table></figure><p>在 ES5 中只有全局作用域和函数作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Let/es5.js</span></span><br><span class="line"><span class="keyword">var</span> ourFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">'this is in the outer scope'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'this is a new value'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a new value</span></span><br><span class="line"><span class="comment">// this is a new value</span></span><br></pre></td></tr></table></figure><h2 id="数组展开运算符-Spread-Operator"><a href="#数组展开运算符-Spread-Operator" class="headerlink" title="数组展开运算符 (Spread Operator)"></a>数组展开运算符 (Spread Operator)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpreadOperator/index.js</span></span><br><span class="line"><span class="keyword">var</span> awesomerBands = [<span class="string">'Bayside'</span>, <span class="string">'Semses Fail'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bands = [<span class="string">'silverstein'</span>, <span class="string">'three days grace'</span>, ...awesomerBands];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bands)</span><br><span class="line"><span class="comment">// ["silverstein", "three days grace", "Bayside", "Semses Fail"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bandsFunction = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &amp;amp;lt; args.length; x++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args[x]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bandsFunction(...awesomerBands)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sB</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">y</span></span><br><span class="line"><span class="comment">s</span></span><br><span class="line"><span class="comment">i</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(rest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">[ 3, 4, 5, 6, 7, 8 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> awesomerBands = [<span class="string">'Bayside'</span>,<span class="string">'Semses Fail'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bands = [<span class="string">'silverstein'</span>,<span class="string">'three days grace'</span>, awesomerBands];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bands)</span><br><span class="line"><span class="comment">// [ "silverstein", "three days grace", [ "Bayside", "Semses Fail" ] ]</span></span><br></pre></td></tr></table></figure><h2 id="对象快速创建-Shorthand"><a href="#对象快速创建-Shorthand" class="headerlink" title="对象快速创建 (Shorthand)"></a>对象快速创建 (Shorthand)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> genre = <span class="string">'Rock'</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Bayside'</span>;</span><br><span class="line"><span class="keyword">var</span> origin = <span class="string">'Queens, New York'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> band = &#123; name, genre, origin &#125;</span><br><span class="line"><span class="built_in">console</span>.log(band);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; name: "Bayside", genre: "Rock", origin: "Queens, New York" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrowFunctions/index.js</span></span><br><span class="line"><span class="keyword">var</span> oldway = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oldway(); <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrowFunction = a =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrowFunction() <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrowFunction2 = (arg1, arg2) =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg1, arg2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrowFunction2(<span class="string">"this is arg1"</span>, <span class="string">"this is arg2"</span>) <span class="comment">// this is arg1 this is arg2</span></span><br></pre></td></tr></table></figure><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>使用 <code>` `</code> 作为标记，变量通过 <code>`${ }`</code> 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplateLiterals/index.js</span></span><br><span class="line"><span class="keyword">var</span> longString1 = <span class="string">`</span></span><br><span class="line"><span class="string">this is long string</span></span><br><span class="line"><span class="string">this is more long string</span></span><br><span class="line"><span class="string">test testing</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> band = <span class="string">'bayside'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longString2 = <span class="string">`</span></span><br><span class="line"><span class="string">this is long string</span></span><br><span class="line"><span class="string">this is more long string</span></span><br><span class="line"><span class="string">Band Name = <span class="subst">$&#123;band&#125;</span></span></span><br><span class="line"><span class="string">test testing</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longStringFunction = (bandname, aroundSince) =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;bandname&#125;</span> is a rock band that has been around</span></span><br><span class="line"><span class="string">  since <span class="subst">$&#123;aroundSince + <span class="number">5</span>&#125;</span> years`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longString1)</span><br><span class="line"><span class="comment">// this is long string</span></span><br><span class="line"><span class="comment">// this is more long string</span></span><br><span class="line"><span class="comment">// test testing</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longString2)</span><br><span class="line"><span class="comment">// this is long string</span></span><br><span class="line"><span class="comment">// this is more long string</span></span><br><span class="line"><span class="comment">// Band Name = bayside</span></span><br><span class="line"><span class="comment">// test testing</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longStringFunction(band, <span class="number">10</span>))</span><br><span class="line"><span class="comment">//   bayside is a rock band that has been around</span></span><br><span class="line"><span class="comment">//   since 15 years</span></span><br></pre></td></tr></table></figure><h2 id="类-class-的使用"><a href="#类-class-的使用" class="headerlink" title="类 (class) 的使用"></a>类 (class) 的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  printName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name= "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  printOrigin() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"origin = "</span> + <span class="keyword">this</span>.origin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bayside = <span class="keyword">new</span> Band(<span class="string">'bayside'</span>, <span class="string">'Queens,New York'</span>);</span><br><span class="line"></span><br><span class="line">bayside.printName();     <span class="comment">// name= bayside</span></span><br><span class="line">bayside.printOrigin();   <span class="comment">// origin = Queens,New York</span></span><br></pre></td></tr></table></figure><h2 id="class-继承和-super-使用"><a href="#class-继承和-super-使用" class="headerlink" title="class 继承和 super 使用"></a>class 继承和 super 使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  printName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name= "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  printOrigin() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"origin = "</span> + <span class="keyword">this</span>.origin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">Band</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin,genre)&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.genre = genre</span><br><span class="line">  &#125;</span><br><span class="line">  printGenre()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.genre)</span><br><span class="line">  &#125;</span><br><span class="line">  printName()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is an override"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bayside = <span class="keyword">new</span> Member(<span class="string">'bayside'</span>, <span class="string">'Queens,New York'</span>,<span class="string">"alternative"</span>);</span><br><span class="line"></span><br><span class="line">bayside.printName();     <span class="comment">// this is an override</span></span><br><span class="line">bayside.printOrigin();   <span class="comment">// origin = Queens,New York</span></span><br><span class="line">bayside.printGenre();   <span class="comment">// alternative</span></span><br></pre></td></tr></table></figure><h2 id="函数默认参数-default-arguments"><a href="#函数默认参数-default-arguments" class="headerlink" title="函数默认参数 default arguments"></a>函数默认参数 default arguments</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultArguments/index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="for-8230-of-8230-循环"><a href="#for-8230-of-8230-循环" class="headerlink" title="for&#8230;of&#8230; 循环"></a>for&#8230;of&#8230; 循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ForOf-loops/index.js</span></span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &amp;amp;lt; myArray.length; x++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[x])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i  <span class="keyword">of</span> myArray)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p>通过 <code>import ... from ...</code></p><p>使用 <code>default</code> 导出的引入的时候需要可以直接使用，没有使用 <code>default</code> 导出，导出相当于是一个对象，需要使用 <code>{}</code> 来引入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is first,default'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this is second,not default"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/index.js</span></span><br><span class="line"><span class="keyword">import</span>  first  <span class="keyword">from</span> <span class="string">"./test"</span></span><br><span class="line"><span class="keyword">import</span>  &#123;second&#125;  <span class="keyword">from</span> <span class="string">"./test"</span></span><br><span class="line"></span><br><span class="line">first(); <span class="comment">// this is first,default</span></span><br><span class="line">second(); <span class="comment">// "this is second,not default"</span></span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/6/18 20:00:27 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又学习了一下 JavaScript 的 ES6 的语法，记录一下～&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ecmascript 6" scheme="https://lidong.me/tags/ecmascript-6/"/>
    
      <category term="es6" scheme="https://lidong.me/tags/es6/"/>
    
      <category term="javascript" scheme="https://lidong.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 中的 Linux(wsl) 使用</title>
    <link href="https://lidong.me/win10-wsl/"/>
    <id>https://lidong.me/win10-wsl/</id>
    <published>2018-06-13T09:01:39.000Z</published>
    <updated>2018-06-13T09:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://static.lidong.me/upload/images/keqvjWA_P.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/keqvjWA_P.png" alt="store"></a></p><p>wsl开启相关内容参考 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">巨硬的文档</a></p><p>这里记录一下我在 wsl 中的使用情况</p><a id="more"></a><h2 id="node-nvm-安装"><a href="#node-nvm-安装" class="headerlink" title="node(nvm) 安装"></a>node(nvm) 安装</h2><blockquote><p>注意：安装完 nvm 需要重启终端，wsl 中就直接重新进入 Linux 终端，才能使用 nvm 安装 Nodejs</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 nvm</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line"></span><br><span class="line"># 安装最新长期支持版本 Nodejs</span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"># 安装最新稳定版本版本 Nodejs</span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/6/13 9:01:39 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://static.lidong.me/upload/images/keqvjWA_P.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://static.lidong.me/upload/images/keqvjWA_P.png&quot; alt=&quot;store&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wsl开启相关内容参考 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/install-win10&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;巨硬的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里记录一下我在 wsl 中的使用情况&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows" scheme="https://lidong.me/tags/windows/"/>
    
      <category term="wsl" scheme="https://lidong.me/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>cordova 开发环境搭建</title>
    <link href="https://lidong.me/cordova-setup/"/>
    <id>https://lidong.me/cordova-setup/</id>
    <published>2018-05-14T22:12:43.000Z</published>
    <updated>2018-05-14T22:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司的一个项目是使用 cordova 框架做的，现在在自己电脑重新搭建一下开发环境，整理一下文档备忘。</p><a id="more"></a><h2 id="Java-环境搭建"><a href="#Java-环境搭建" class="headerlink" title="Java 环境搭建"></a>Java 环境搭建</h2><h3 id="下载-Java"><a href="#下载-Java" class="headerlink" title="下载 Java"></a>下载 Java</h3><blockquote><p>需要下载 JavaSE 8 貌似最新的 JavaSE10 ，cordova还不支持<br>Java SE 8 下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>Java SE 8 目前最新版本 jdk1.8.0_171</p></blockquote><details><br><summary>新版安装不需要手动配置环境变量，点击查看环境变量配置</summary><br>javaSE 安装程序会自动添加环境变量 Path 中添加一条<br><img src="https://static.oonnnoo.com/upload/images/rJk6kyuCM.png" alt="Java SE8配置安装环境变量"><br></details><h2 id="Nodejs-安装"><a href="#Nodejs-安装" class="headerlink" title="Nodejs 安装"></a>Nodejs 安装</h2><p>前端必备，略。</p><p>Windows 平台建议通过 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 安装，也可参考<a href="https://lidong.me/wordpress/2018/nvm-windows/">nvm-windows 使用</a> ；</p><p>macOS 平台和 Linux 平台建议通过 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 安装。</p><h2 id="安装-cordova"><a href="#安装-cordova" class="headerlink" title="安装 cordova"></a>安装 cordova</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><h2 id="创建-cordova-应用"><a href="#创建-cordova-应用" class="headerlink" title="创建 cordova 应用"></a>创建 cordova 应用</h2><h3 id="创建-app"><a href="#创建-app" class="headerlink" title="创建 app"></a>创建 app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create hello com.example.first firstApp</span><br></pre></td></tr></table></figure><blockquote><p><code>cordova create</code> 是创建项目的命令，紧接着hello为目录，com.example.first为命名空间，firstApp为app名称</p></blockquote><h3 id="添加平台"><a href="#添加平台" class="headerlink" title="添加平台"></a>添加平台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hello</span><br><span class="line">cordova platform add android</span><br></pre></td></tr></table></figure><h3 id="编译-app"><a href="#编译-app" class="headerlink" title="编译 app"></a>编译 app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><details><br><summary>上述命令的集合</summary><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cordova create hello com.example.first firstApp</span><br><span class="line">cd hello</span><br><span class="line">cordova platform add android</span><br><span class="line">cordova build android</span><br></pre></td></tr></table></figure><br><br></details><h3 id="运行-app"><a href="#运行-app" class="headerlink" title="运行 app"></a>运行 app</h3><p>模拟器运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova emulate android</span><br></pre></td></tr></table></figure><p>浏览器运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova serve android</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 即可<br>真机上运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova run android</span><br></pre></td></tr></table></figure><h3 id="更多-cordova-命令"><a href="#更多-cordova-命令" class="headerlink" title="更多 cordova 命令"></a>更多 cordova 命令</h3><p>创建应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create first com.example.first firstApp</span><br></pre></td></tr></table></figure><p>添加平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cordova platform add android</span><br><span class="line">cordova platform add ios</span><br><span class="line">cordova platform add windows</span><br><span class="line">cordova platform add osx</span><br></pre></td></tr></table></figure><p>查看平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms ls</span><br></pre></td></tr></table></figure><p>删除平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova platform remove android</span><br><span class="line">cordova platform rm android</span><br></pre></td></tr></table></figure><p>打包app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>预编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova prepare android</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova compile android</span><br></pre></td></tr></table></figure><p>运行app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cordova emulate android</span><br><span class="line">cordova serve android</span><br><span class="line">cordova run android</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/u011175079/article/details/72841065" target="_blank" rel="noopener">移动开发cordova环境搭建</a></li><li><a href="https://segmentfault.com/a/1190000004868680" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004868680</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的一个项目是使用 cordova 框架做的，现在在自己电脑重新搭建一下开发环境，整理一下文档备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="app" scheme="https://lidong.me/tags/app/"/>
    
      <category term="cordova" scheme="https://lidong.me/tags/cordova/"/>
    
      <category term="ios" scheme="https://lidong.me/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 在右键添加快捷方式</title>
    <link href="https://lidong.me/vscode-shortcut-to-right-key/"/>
    <id>https://lidong.me/vscode-shortcut-to-right-key/</id>
    <published>2018-05-13T22:48:40.000Z</published>
    <updated>2018-05-13T22:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安装 VSCode 的时候勾选添加到PATH，是可以在右键自动添加快捷方式的，不过某些请情况，可能没有快捷方式，需要手动添加。当然以下方式可以适用于把其他软件添加到右键快捷方式的。</p><a id="more"></a><h2 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h2><ol><li><p>Win+R 打开运行，输入 regedit ，打开注册表，找到HKEY_CLASSES_ROOT&#42;\shell分支，如果没有shell分支，则在*下点击右键，选择“新建－项”，建立shell分支。</p><p></p></li><li><p>在shell下新建“VisualCode”项，在右侧窗口的“默认”键值栏内输入<code>Open w&amp;amp;ith Code</code>，这是单击鼠标右键时VisualCode启动程序的显示值。项的名称和键值可以任意，以含义明确为好。其中键值将显示在右键菜单中。</p></li><li><p>在“VisualCode”下再新建Command项，在右侧窗口的“默认”键值栏内输入记事本程序所在的路径，我的是：<code>&quot;C:\Program Files\Microsoft VS Code\code.exe&quot; &quot;%1&quot;</code>。其中的%1表示要打开的文件参数。也就是Visual Code启动程序，找不到的话就在开始里面查找Visual Studio Code，再右键打开文件位置</p></li><li><p>关闭注册表，即可生效。</p></li></ol><h2 id="文件夹打开"><a href="#文件夹打开" class="headerlink" title="文件夹打开"></a>文件夹打开</h2><blockquote><p>以上方法可以在选中文件时右键在菜单栏中显示：&#8221;open with visual code&#8221;，但当右键文件夹时仍然不能显示此选项，所以还要进行下面的操作：</p></blockquote><p>打开注册表，找到HKEY_CLASSES_ROOT\Directory\shell，按照上面2、3的方法添加即可。</p><h2 id="添加Icon"><a href="#添加Icon" class="headerlink" title="添加Icon"></a>添加Icon</h2><p>在原有的项上新建可扩充字符串值，命名为Icon，像一个键值对那样把D:\Program Files (x86)\Microsoft VS Code\code.exe放进去就可以了。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/5/13 22:48:40 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.jianshu.com/p/b49002fa10a7" target="_blank" rel="noopener">https://www.jianshu.com/p/b49002fa10a7</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安装 VSCode 的时候勾选添加到PATH，是可以在右键自动添加快捷方式的，不过某些请情况，可能没有快捷方式，需要手动添加。当然以下方式可以适用于把其他软件添加到右键快捷方式的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编辑器" scheme="https://lidong.me/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="vscode" scheme="https://lidong.me/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>nvm-windows 使用</title>
    <link href="https://lidong.me/nvm-windows/"/>
    <id>https://lidong.me/nvm-windows/</id>
    <published>2018-05-11T22:03:35.000Z</published>
    <updated>2018-05-11T22:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便的安装不同版本的 Nodejs，在 Linux或macOS上可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> ，在 Windows 上则可以使用 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a></p><a id="more"></a><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><p>安装：直接下一步，下一步。就可以了~</p><h2 id="查看nvm的版本，验证安装是否成功"><a href="#查看nvm的版本，验证安装是否成功" class="headerlink" title="查看nvm的版本，验证安装是否成功"></a>查看nvm的版本，验证安装是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version  // 1.1.6</span><br></pre></td></tr></table></figure><h2 id="设置-nodejs、npm-下载镜像"><a href="#设置-nodejs、npm-下载镜像" class="headerlink" title="设置 nodejs、npm 下载镜像"></a>设置 nodejs、npm 下载镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><blockquote><p>8.11.1 为文章完成时的最新的长期支持版，请根据实际情况安装最新版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 8.11.1</span><br></pre></td></tr></table></figure><h2 id="启用-nodejs"><a href="#启用-nodejs" class="headerlink" title="启用 nodejs"></a>启用 nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm use 8.11.1</span><br></pre></td></tr></table></figure><details><br><summary>上述全部内容的集合</summary><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class="line">npm install 8.11.1</span><br><span class="line">npm use 8.11.1</span><br></pre></td></tr></table></figure><br><br></details><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/5/11 22:03:35 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便的安装不同版本的 Nodejs，在 Linux或macOS上可以使用 &lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm&lt;/a&gt; ，在 Windows 上则可以使用 &lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm-windows&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="windows" scheme="https://lidong.me/tags/windows/"/>
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>树莓派 Raspberry Pi 安装 plex</title>
    <link href="https://lidong.me/raspberrypi-plex/"/>
    <id>https://lidong.me/raspberrypi-plex/</id>
    <published>2018-04-08T18:22:01.000Z</published>
    <updated>2018-04-08T18:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Plex是一款功能强大的流媒体播放器</p><a id="more"></a><p><a href="https://static.lidong.me/upload/images/UqMscMvsN.jpg" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/UqMscMvsN.jpg" alt="bitcoin"></a></p><h2 id="1-添加软件源"><a href="#1-添加软件源" class="headerlink" title="1.添加软件源"></a>1.添加软件源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo &quot;deb https://dev2day.de/pms/ jessie main&quot; | sudo tee /etc/apt/sources.list.d/pms.list</span><br></pre></td></tr></table></figure><h2 id="2-为软件源添加GPG密钥"><a href="#2-为软件源添加GPG密钥" class="headerlink" title="2.为软件源添加GPG密钥"></a>2.为软件源添加GPG密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev2day.de/pms/dev2day-pms.gpg.key</span><br><span class="line">sudo apt-key add dev2day-pms.gpg.key</span><br></pre></td></tr></table></figure><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install plexmediaserver-installer</span><br></pre></td></tr></table></figure><h2 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/plexmediaserver.prev</span><br></pre></td></tr></table></figure><p>将里面的的</p><blockquote><p>PLEX_MEDIA_SERVER_USER=plex</p></blockquote><p>修改为</p><blockquote><p>PLEX_MEDIA_SERVER_USER=pi</p></blockquote><h2 id="5-重启PLEX服务"><a href="#5-重启PLEX服务" class="headerlink" title="5.重启PLEX服务"></a>5.重启PLEX服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart plexmediaserver</span><br><span class="line">sudo systemctl status plexmediaserver</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 18:22:01 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Plex是一款功能强大的流媒体播放器&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="plex" scheme="https://lidong.me/tags/plex/"/>
    
  </entry>
  
  <entry>
    <title>使用 vcgencmd 指令查看 Raspberry Pi 的 CPU 运行速度、温度信息</title>
    <link href="https://lidong.me/raspberrypi-vcgencmd-clock-temperature/"/>
    <id>https://lidong.me/raspberrypi-vcgencmd-clock-temperature/</id>
    <published>2018-04-08T18:02:26.000Z</published>
    <updated>2018-04-08T18:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Raspberry Pi 中我们可以利用 vcgencmd 指令来查看各种硬件信息和状态，以下是常用的指令示例。</p><a id="more"></a><h2 id="时钟频率（clock-frequency）"><a href="#时钟频率（clock-frequency）" class="headerlink" title="时钟频率（clock frequency）"></a>时钟频率（clock frequency）</h2><p>如果要查询硬件目前的时钟频率，可以使用 measure_clock 参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_clock &lt;clock&gt;</span><br></pre></td></tr></table></figure></p><p>其中的 <code>&lt;clock&gt;</code> 是指定要查询的硬件，可用的选项有 arm、 core、 h264、 isp、 v3d、 uart、pwm、 emmc、 pixel、 vec、 hdmi、 dpi。</p><p>如果要查询 CPU 的时钟频率（也就是速度），可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_clock arm</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>frequency(45)=700000000</p></blockquote><p>如果想查询所有的硬件时钟频率，可以使用简单的 shell 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \</span><br><span class="line">  echo -e &quot;$src:\t$(vcgencmd measure_clock $src)&quot; ; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>arm: frequency(45)=700000000</p><p>core: frequency(1)=250000000</p><p>h264: frequency(28)=250000000</p><p>isp: frequency(42)=250000000</p><p>v3d: frequency(43)=250000000</p><p>uart: frequency(22)=3000000</p><p>pwm: frequency(25)=0</p><p>emmc: frequency(47)=250000000</p><p>pixel: frequency(29)=108000000</p><p>vec: frequency(10)=0</p><p>hdmi: frequency(9)=163682000</p><p>dpi: frequency(4)=0</p></blockquote><h2 id="电压（voltage）"><a href="#电压（voltage）" class="headerlink" title="电压（voltage）"></a>电压（voltage）</h2><p>如果要查询硬件目前的工作电压，可以使用 measure_volts 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_volts &lt;id&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>&lt;id&gt;</code> 是指定要查询的硬件，可用的选项有 core、 sdram_c、 sdram_i、 sdram_p。如果没有指定 <code>&lt;id&gt;</code>，则预设为 core：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_volts</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>volt=1.2000V</p></blockquote><p>查询所有工作电压的 shell 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for id in core sdram_c sdram_i sdram_p ; do \</span><br><span class="line">  echo -e &quot;$id:\t$(vcgencmd measure_volts $id)&quot; ; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>core: volt=1.200V</p><p>sdram_c: volt=1.200V</p><p>sdram_i: volt=1.200V</p><p>sdram_p: volt=1.225V</p></blockquote><h2 id="温度（temperature）"><a href="#温度（temperature）" class="headerlink" title="温度（temperature）"></a>温度（temperature）</h2><p>如果要查询目前的温度，可以使用 measure_temp 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_temp</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>temp=43.3’C</p></blockquote><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 18:02:26 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>节选翻译自： <a href="https://blog.gtwang.org/iot/raspberry-pi-vcgencmd-hardware-information/" target="_blank" rel="noopener">使用 vcgencmd 指令查看 Raspberry Pi 的 CPU 溫度、運行速度與電壓等資訊</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Raspberry Pi 中我们可以利用 vcgencmd 指令来查看各种硬件信息和状态，以下是常用的指令示例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上安装DLNA实现流媒体服务器</title>
    <link href="https://lidong.me/raspberrypi-dlna/"/>
    <id>https://lidong.me/raspberrypi-dlna/</id>
    <published>2018-04-08T17:29:46.000Z</published>
    <updated>2018-04-08T17:29:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。嗯，通过它可以实现流媒体服务器～</p><a id="more"></a><h2 id="1-安装-minidlna"><a href="#1-安装-minidlna" class="headerlink" title="1.安装 minidlna"></a>1.安装 minidlna</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install minidlna</span><br></pre></td></tr></table></figure><h2 id="2-设置配置文件"><a href="#2-设置配置文件" class="headerlink" title="2.设置配置文件"></a>2.设置配置文件</h2><p>修改 <code>/etc/minidlna.conf</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">media_dir=A,/data/DLNA/Music    #A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件</span><br><span class="line">media_dir=P,/data/DLNA/Music</span><br><span class="line">media_dir=V,/data/DLNA/Video</span><br><span class="line">db_dir=/data/DLNA/db            #配置minidlna的数库数据的存放目录</span><br><span class="line">log_dir=/data/DLNA/log          #配置日志目录</span><br></pre></td></tr></table></figure><h2 id="3-后续操作"><a href="#3-后续操作" class="headerlink" title="3.后续操作"></a>3.后续操作</h2><p>建立文件夹</p><p>在 <code>/data</code> 文件夹下，建立以上文件夹，并设置好权限为 read and write。</p><p>重启 minidlna</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/minidlna restart</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/minidlna status</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 17:29:46 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。嗯，通过它可以实现流媒体服务器～&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="dlna" scheme="https://lidong.me/tags/dlna/"/>
    
  </entry>
  
  <entry>
    <title>l2tp VPN 搭建</title>
    <link href="https://lidong.me/l2tp-vpn-setup/"/>
    <id>https://lidong.me/l2tp-vpn-setup/</id>
    <published>2018-04-06T12:43:04.000Z</published>
    <updated>2018-04-06T12:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为在路由器上需要用到，这里记录一下VPN安装方式。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</span><br><span class="line">chmod +x l2tp.sh</span><br><span class="line">./l2tp.sh</span><br></pre></td></tr></table></figure><blockquote><p>一些可能用到的操作</p><p>l2tp -a (Add a user)</p><p>l2tp -d (Delete a user)</p><p>l2tp -l (List all users)</p><p>l2tp -m (Modify a user password)</p><p>more <a href="https://teddysun.com/448.html" target="_blank" rel="noopener">https://teddysun.com/448.html</a></p></blockquote><p>更多详情查看。原作者的 <a href="https://github.com/teddysun/across/" target="_blank" rel="noopener">GitHub</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/6 12:43:04 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为在路由器上需要用到，这里记录一下VPN安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="l2tp" scheme="https://lidong.me/tags/l2tp/"/>
    
      <category term="vpn" scheme="https://lidong.me/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>二维码生成服务</title>
    <link href="https://lidong.me/qrcode-generate-service/"/>
    <id>https://lidong.me/qrcode-generate-service/</id>
    <published>2018-03-22T21:50:23.000Z</published>
    <updated>2018-03-22T21:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>现成二维码生成器有很多，但是我还是自己弄了一个哈～</p><a id="more"></a><p>项目地址: <a href="https://api.oonnnoo.com/qr/" target="_blank" rel="noopener">https://api.oonnnoo.com/qr/</a></p><p>源码地址: <a href="https://github.com/oonnnoo/qrcode" target="_blank" rel="noopener">https://github.com/oonnnoo/qrcode</a></p><p><a href="https://api.oonnnoo.com/qr/qrcode" target="_blank" rel="noopener"><img src="https://api.oonnnoo.com/qr/qrcode" alt="二维码生成服务"></a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/3/22 21:50:23 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现成二维码生成器有很多，但是我还是自己弄了一个哈～&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="小作品" scheme="https://lidong.me/tags/%E5%B0%8F%E4%BD%9C%E5%93%81/"/>
    
      <category term="qrcode" scheme="https://lidong.me/tags/qrcode/"/>
    
  </entry>
  
  <entry>
    <title>在 android 手机上共享代理 HTTP Proxy</title>
    <link href="https://lidong.me/android-share-http-proxy/"/>
    <id>https://lidong.me/android-share-http-proxy/</id>
    <published>2018-03-12T16:34:42.000Z</published>
    <updated>2018-03-12T16:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是自己搭建shadowsocks，访问外网，前不久都被block了，在手机上有很多免费的软件可用，于是想着通过手机共享上网。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>连接WIFI的安卓手机</li><li>Termux APP（其他类似终端APP应该也可以）</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>安装 NodeJS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure><p>安装proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g proxy</span><br></pre></td></tr></table></figure><p>开启proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy -p 8080</span><br></pre></td></tr></table></figure><blockquote><p>-p 指定端口号</p></blockquote><p>将 termux 切换到后台，然后该干嘛，干嘛去~~~</p><p>这时候，就可以在其他设备，将 HTTP Proxy 访问外网了，如电脑，连接到手机 ip:8080</p><blockquote><p>手机ip地址可以在手机中，通过 <code>系统设置</code> -&gt; <code>关于手机</code> -&gt; <code>状态</code> 查看，或者登录路由器查看。</p></blockquote><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/3/12 16:34:42 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都是自己搭建shadowsocks，访问外网，前不久都被block了，在手机上有很多免费的软件可用，于是想着通过手机共享上网。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="http" scheme="https://lidong.me/tags/http/"/>
    
      <category term="proxy" scheme="https://lidong.me/tags/proxy/"/>
    
      <category term="termux" scheme="https://lidong.me/tags/termux/"/>
    
      <category term="代理" scheme="https://lidong.me/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>docker 中 mysql 数据库导出导入</title>
    <link href="https://lidong.me/docker-mysql-export-import/"/>
    <id>https://lidong.me/docker-mysql-export-import/</id>
    <published>2018-02-07T21:24:55.000Z</published>
    <updated>2018-02-07T21:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为做 wordpress 的数据库备份，通过 docker 使用了 mysql 导入导出，记录一下与 mysql 导入导出的操作。</p><a id="more"></a><h2 id="1-导出"><a href="#1-导出" class="headerlink" title="1. 导出"></a>1. 导出</h2><h3 id="导出所有数据库"><a href="#导出所有数据库" class="headerlink" title="导出所有数据库"></a>导出所有数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> &#123;cxontainerID&#125; sh -c \</span></span><br><span class="line">  'exec mysqldump --all-databases -uroot -p "$MYSQL_ROOT_PASSWORD"' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /some/path/on/your/host/all-databases.sql</span></span><br></pre></td></tr></table></figure><h3 id="导出指定数据库"><a href="#导出指定数据库" class="headerlink" title="导出指定数据库"></a>导出指定数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> &#123;containerID or name&#125; sh -c \</span></span><br><span class="line">  'exec mysqldump --databases wordpress -uroot -p "$MYSQL_ROOT_PASSWORD"' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /some/path/on/your/host/wordpress.sql</span></span><br></pre></td></tr></table></figure><p>如导出指定容器ID为9244及指定数据库名 wordpress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> 9244 sh -c \</span></span><br><span class="line">  'exec mysqldump --databases wordpress -uroot -pmy-secret-pw' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /var/backup/wordpress.sql</span></span><br></pre></td></tr></table></figure><h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2. 导入"></a>2. 导入</h2><h3 id="首先要创建一个container"><a href="#首先要创建一个container" class="headerlink" title="首先要创建一个container"></a>首先要创建一个container</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run --name some-mysql -v /var/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</span></span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -i some-mysql mysql -uroot -pmy-secret-pw &amp;lt; /var/backup/wordpress.sql</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it some-mysql /bin/bash mysql -uroot -pmy-secret-pw</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> wordpress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>检查一下数据表。</p><p><a href="https://static.lidong.me/upload/images/Sk8gBSdUf.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/Sk8gBSdUf.png" alt></a></p><!-- <a href=""><img class="alignnone size-medium" src="https://static.lidong.me/upload/images/Sk8gBSdUf.png" /></a> --><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://jeeinn.com/2016/08/128/" target="_blank" rel="noopener">关于导入导出docker中的mysql数据库</a></li><li><a href="https://hub.docker.com/r/_/mysql/" target="_blank" rel="noopener">library/mysql - Docker Hub </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为做 wordpress 的数据库备份，通过 docker 使用了 mysql 导入导出，记录一下与 mysql 导入导出的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://lidong.me/tags/mysql/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>通过 formdata 上传文件</title>
    <link href="https://lidong.me/formdata-upload/"/>
    <id>https://lidong.me/formdata-upload/</id>
    <published>2018-01-28T00:00:18.000Z</published>
    <updated>2018-01-28T00:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常表单上传是通过form提交上传的文件的话，对form设置 <code>enctype:&#39;multipart/form-data&#39;</code> ，将文件和其他字段一起提交就好了，但是这只能导致页面刷新，嗯，这是老的做法。</p><a id="more"></a><p>现在可以使用new FormData</p><p class="codepen" data-height="500" data-theme-id="0" data-slug-hash="goVrJK" data-default-tab="js,result" data-user="oonnnoo" data-embed-version="2" data-pen-title="通过 formData 上传">See the Pen <a href="https://codepen.io/oonnnoo/pen/goVrJK/" target="_blank" rel="noopener">通过 formData 上传</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/28 0:00:18 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常表单上传是通过form提交上传的文件的话，对form设置 &lt;code&gt;enctype:&amp;#39;multipart/form-data&amp;#39;&lt;/code&gt; ，将文件和其他字段一起提交就好了，但是这只能导致页面刷新，嗯，这是老的做法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="codepen" scheme="https://lidong.me/tags/codepen/"/>
    
      <category term="web" scheme="https://lidong.me/tags/web/"/>
    
      <category term="formdata" scheme="https://lidong.me/tags/formdata/"/>
    
  </entry>
  
  <entry>
    <title>通过shell监控网页 无法访问就自动重启Docker</title>
    <link href="https://lidong.me/shell-monitor-web-restart-docker/"/>
    <id>https://lidong.me/shell-monitor-web-restart-docker/</id>
    <published>2018-01-25T21:32:41.000Z</published>
    <updated>2018-01-25T21:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，不知道是 MySQL Container 的问题，还是迁移到阿里云，阿里主机的问题，抑或网络爬虫，抓取频繁，挂掉了？反正隔个两天，CPU占用100%，MySQL Container运行出错，导致我的 Wordpress 无法访问。我了个擦。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>自身水平不行，排查不出问题，就来个简单粗暴的，直接自动重启docker。于是学着做了一个监控脚本，隔一段时间请求一次页面，访问不了就自动重启 Docker。仅仅重启一个 Container貌似也是不行的。不过现在这样粗暴的方式会导致所有的 Container 都会重启一次 。😂</p><p>因为我在启动 Container 时设置了 <code>restart：always</code>，所以重启 Docker 之后，Container 就会自动启动，就不用自己写脚本去控制了。</p><p>脚本大致流程是：每隔10分钟运行一次，访问网站，如果发现返回状态码不是200，直接重启docker，并记录监控日志、出错日志。哈哈，参考别人的。</p><div class="gist-oembed" data-gist="a4aa182bfff3abf2df7cfc5cc07db289.json"></div><p><a href="https://gist.github.com/a4aa182bfff3abf2df7cfc5cc07db289" target="_blank" rel="noopener">查看Gist</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/25 21:32:41 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1.<a href="https://www.cnblogs.com/ddxueyu/p/6209932.html" target="_blank" rel="noopener">linux上监控tomcat down掉后自动重启tomcat</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，不知道是 MySQL Container 的问题，还是迁移到阿里云，阿里主机的问题，抑或网络爬虫，抓取频繁，挂掉了？反正隔个两天，CPU占用100%，MySQL Container运行出错，导致我的 Wordpress 无法访问。我了个擦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="shell" scheme="https://lidong.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>安装 dropbox 同步备份主机数据</title>
    <link href="https://lidong.me/dropbox-linux-command-sync/"/>
    <id>https://lidong.me/dropbox-linux-command-sync/</id>
    <published>2018-01-22T02:45:39.000Z</published>
    <updated>2018-01-22T02:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前就是用dropbox同步备份了，没有记录。现在迁移主机，都不知道怎么操作了，重新整理记录一下。😓</p><a id="more"></a><p>操作很简单，Dropbox提供了文档和相关工具，这里记录一下，操作过程，中间一部分内容来自dropbox文档。</p><pre>环境：1.centos 7.02.阿里云香港（如果是土啬内主机，那就别用 Dropbox 了，瞎折腾）</pre><blockquote><p>如果之前没有注册过Dropbox，欢迎使用我的推荐码注册，使用后，我俩各多得500MB空间  <a href="https://db.tt/Mcf2xYeC" target="_blank" rel="noopener">https://db.tt/Mcf2xYeC</a></p></blockquote><h2 id="通过命令行安装-Dropbox"><a href="#通过命令行安装-Dropbox" class="headerlink" title="通过命令行安装 Dropbox"></a>通过命令行安装 Dropbox</h2><p>32-bit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86&quot; | tar xzf -</span><br></pre></td></tr></table></figure><p>64-bit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -</span><br></pre></td></tr></table></figure><p>接着，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure><p>首次在服务器上运行 Dropbox，系统会生成一个授权链接，浏览器打开链接登录账号，就可以将服务器中Dropbox与账号关联了。操作完成后，程序会在主目录中创建 Dropbox 文件夹。</p><p>下载这个 <a href="https://www.dropbox.com/download?dl=packages/dropbox.py" target="_blank" rel="noopener">Python 脚本</a>，可以通过命令行控制 Dropbox。</p><h2 id="准备同步"><a href="#准备同步" class="headerlink" title="准备同步"></a>准备同步</h2><h3 id="添加软链接"><a href="#添加软链接" class="headerlink" title="添加软链接"></a>添加软链接</h3><p>如果文件夹是已经同步过，务必在同步开始前创建文件夹软连接，以减少不必要的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 想要同步文件夹路径 dropbox同步盘的路径</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/www ~/Dropbox/www</span><br></pre></td></tr></table></figure><h3 id="添加shell别名"><a href="#添加shell别名" class="headerlink" title="添加shell别名"></a>添加shell别名</h3><p>可以设置成任意你喜欢的别名，我设置成 <code>drp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias drp=&apos;python ~/dropbox.py&apos;</span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp start</span><br></pre></td></tr></table></figure><h3 id="查看同步状态"><a href="#查看同步状态" class="headerlink" title="查看同步状态"></a>查看同步状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp status</span><br></pre></td></tr></table></figure><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp autostart</span><br></pre></td></tr></table></figure><h3 id="排除目录"><a href="#排除目录" class="headerlink" title="排除目录"></a>排除目录</h3><p>在开始开启同步后，可以尽快添加排除目录，毕竟不是所有文件都要同步到主机上。就不浪费空间和流量了。Dropbox不能在没有开始同步提前设置排除目录，这个不是太好，或许是python脚本的问题，没细看 🙂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp exclude add Apps</span><br></pre></td></tr></table></figure><blockquote><p>我的完整排除目录查看 <a href="https://gist.github.com/ryanlid/secret" target="_blank" rel="noopener">secret gist</a>, 不公开的哈 🙂</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1.<a href="https://www.dropbox.com/zh_CN/install-linux" target="_blank" rel="noopener">linux 安装 Dropbox</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/22 2:45:39 首次发布</li></ol><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前就是用dropbox同步备份了，没有记录。现在迁移主机，都不知道怎么操作了，重新整理记录一下。😓&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://lidong.me/tags/linux/"/>
    
      <category term="dropbox" scheme="https://lidong.me/tags/dropbox/"/>
    
      <category term="备份" scheme="https://lidong.me/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Docker CE 安装</title>
    <link href="https://lidong.me/docker-ce-install/"/>
    <id>https://lidong.me/docker-ce-install/</id>
    <published>2018-01-20T12:53:10.000Z</published>
    <updated>2018-11-18T15:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为更换主机，重新部署环境，顺便整理一下文档。<br><a id="more"></a></p><p>（每次文档的整理都是因为有新的安装部署😄）</p><blockquote><p>本文内容仅适用于 Centos7.X ，Ubuntu 安装 Docker CE，如果是其他操作系统，安装其他其他版本，请自行查看 Docker 公司提供的文档。</p></blockquote><h2 id="CentOS-7-X"><a href="#CentOS-7-X" class="headerlink" title="CentOS 7.X"></a>CentOS 7.X</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 安装需要必要的依赖包</span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 添加docker repository</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 安装 docker-ce</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 启动</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.设置开机启动</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 通过运行hello-world镜像，验证docker安装启动是否成功</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>使用国内镜像源安装<br>因为需要替换文件中 URL 地址，这里使用了自用托管配置的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 安装需要必要的依赖包</span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 添加docker repository</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.lidong.me/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 安装 docker-ce</span></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 启动</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.设置开机启动</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. 通过运行hello-world镜像，验证docker安装启动是否成功</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除docker安装包</span></span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除docker相关文件，这些文件在删除docker软件包的时候不会自动删除，包括 Images,containers,volumes 和 自定义配置的文件</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><blockquote><p>使用国内镜像源安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h3 id="卸载-1"><a href="#卸载-1" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除docker安装包</span></span><br><span class="line">sudo apt-get purge docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除docker相关文件，这些文件在删除docker软件包的时候不会自动删除，包括 Images, containers, volumes 和 自定义配置的文件</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018-01-20 首次发布</li><li>2018-12-18 简化文章内容，增加ubuntu系统安装帮助</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">Get Docker CE for CentOS</a></li><li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker CE for Ubuntu</a></li><li><a href="https://yq.aliyun.com/articles/110806" target="_blank" rel="noopener">Docker CE 镜像源站</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为更换主机，重新部署环境，顺便整理一下文档。&lt;br&gt;
    
    </summary>
    
    
      <category term="centos" scheme="https://lidong.me/tags/centos/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://lidong.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>图床搭建</title>
    <link href="https://lidong.me/upload-host/"/>
    <id>https://lidong.me/upload-host/</id>
    <published>2018-01-11T01:40:22.000Z</published>
    <updated>2018-01-11T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在需要贴图的时，上传图片都是用ftp上传，或者通过 Dropshare 这个好用的工具，但是局限性比较大。一直想搭建一个图片上传的工具，无奈拖延症晚期，一直没有弄，不过现在，终于弄了一个，现在功能超级简单，就是上传图片。</p><a id="more"></a><p><a href="https://github.com/oonnnoo/upload" target="_blank" rel="noopener">Github地址</a>, <a href="https://upload.oonnnoo.com/" target="_blank" rel="noopener">项目地址</a></p><p>预览：</p><iframe src="https://upload.lidong.me/" width="100%" height="300px"></iframe><p>UPDATE：</p><p>做完才两天，emmm. 被人上传了一张小黄图。于是就在页面底部加上一段声明，也是算是装13了 😄</p><p><img src="https://static.oonnnoo.com/upload/images/BJTYkvwrM.png" alt="upload 声明"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/11 1:40:22 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在需要贴图的时，上传图片都是用ftp上传，或者通过 Dropshare 这个好用的工具，但是局限性比较大。一直想搭建一个图片上传的工具，无奈拖延症晚期，一直没有弄，不过现在，终于弄了一个，现在功能超级简单，就是上传图片。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="小作品" scheme="https://lidong.me/tags/%E5%B0%8F%E4%BD%9C%E5%93%81/"/>
    
      <category term="图片上传" scheme="https://lidong.me/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>重新配置WordPress</title>
    <link href="https://lidong.me/second-set-wordpress/"/>
    <id>https://lidong.me/second-set-wordpress/</id>
    <published>2018-01-10T01:25:24.000Z</published>
    <updated>2018-01-10T01:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看上一篇内容：<a href="https://lidong.me/blog/install-wordpress-with-docker/">使用Docker安装WordPress</a></p><p>不到黄河不死心，早先就想把Wordpress部署在子目录，前几天把捣鼓了差不多一天都没弄好，今天有捣鼓了大约三四个小时，如您所见，终于弄成现在这个样子了。</p><p><span id="more-143"></span></p><p>这次主要做了：</p><ul><li>将Wordpress部署在了子目录。</li><li>还是用回原来的域名，<a href="https://lidong.me">https://lidong.me</a> 这个域名就专门用来写点文章，整理资料，用别的域名捣鼓其他东西吧。</li></ul><h2 id="重点配置："><a href="#重点配置：" class="headerlink" title="重点配置："></a>重点配置：</h2><h3 id="1-修改nginx-conf"><a href="#1-修改nginx-conf" class="headerlink" title="1.修改nginx.conf"></a>1.修改nginx.conf</h3><p>在 <code>nginx.conf</code>中添加下面这段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /wordpress/ &#123;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_pass http://wordpress:80/; # &amp;lt;-- mind the trailing slash!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整配置查看<a href="https://github.com/ryanlid/nginx-conf/blob/b6d3ecff36727930978676dbd9ed93e6d9c31f08/www.lidong.me.conf#L24-L30" target="_blank" rel="noopener">Github</a></p><h3 id="2-修改-wp-config-php"><a href="#2-修改-wp-config-php" class="headerlink" title="2.修改 wp-config.php"></a>2.修改 wp-config.php</h3><p>在 <code>wp-config.php</code> 中添加下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 写上篇文章就加上了，为了HTTPS访问</span><br><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br><span class="line"></span><br><span class="line">// 定义网站域名，在Wordpress后台修改或数据库修改也可以</span><br><span class="line">define(&apos;WP_HOME&apos;, &apos;https://lidong.me/wordpress&apos;);</span><br><span class="line">define(&apos;WP_SITEURL&apos;, &apos;https://lidong.me/wordpress&apos;);</span><br><span class="line"></span><br><span class="line">// 修复后台链接错误</span><br><span class="line">$_SERVER[&apos;REQUEST_URI&apos;] = str_replace(&quot;/wp-admin/&quot;, &quot;/wordpress/wp-admin/&quot;, $_SERVER[&apos;REQUEST_URI&apos;]);</span><br></pre></td></tr></table></figure><h3 id="3-修改-htaccess"><a href="#3-修改-htaccess" class="headerlink" title="3.修改 .htaccess"></a>3.修改 .htaccess</h3><p>完成上面的配置，如果使用固定链接，文章详情可能无法访问，出现 internal server error 的500错误，查看日志提示 <code>Request exceeded the limit of 10 internal redirects due to probable configuration error. Use &#39;LimitInternalRecursion&#39; to increase the limit if necessary.</code> 大概意思是重定向次数太多。修改 <code>.htaccess</code> ，找到一个解决办法，内容在gist上，用作者提供的new <code>.htaccess</code> 替换原来就可以。</p><div class="gist-oembed" data-gist="effa1ee0f20ab9b8886a209c95b719c0.json"></div><p>⚠️ 注意：每次在Wordpress的设置&#8211;常规选项等页面，修改保存操作，Wordpress都会自动修改 <code>.htaccess</code> 的文件，还原我们设置，导致页面访问出错。所以修改了设置后，要注意检查页面是否访问正常～～</p><p><small>别问为什么，我也不知道为什么[摊手]</small>，查看原来作者的 <a href="https://gist.github.com/JustThomas/141ebe0764d43188d4f2" target="_blank" rel="noopener">Gist</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/10 1:25:24 首次发布</li></ol><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol><li><a href="https://wordpress.stackexchange.com/questions/191747/how-can-i-have-nginx-serve-wordpress-at-blog" target="_blank" rel="noopener">https://wordpress.stackexchange.com/questions/191747/how-can-i-have-nginx-serve-wordpress-at-blog</a></li><li><a href="https://yuji.wordpress.com/2010/03/08/nginx-wordpress-proxy-subdirectory-to-wordpress-subdomain/" target="_blank" rel="noopener">https://yuji.wordpress.com/2010/03/08/nginx-wordpress-proxy-subdirectory-to-wordpress-subdomain/</a></li><li><a href="https://docs.j7k6.org/wordpress-nginx-proxy-subdirectory/" target="_blank" rel="noopener">https://docs.j7k6.org/wordpress-nginx-proxy-subdirectory/</a></li><li><a href="http://www.ur-ban.com/2015/07/27/nginx-proxy_pass-wordpress-in-a-sub-directory/" target="_blank" rel="noopener">http://www.ur-ban.com/2015/07/27/nginx-proxy_pass-wordpress-in-a-sub-directory/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看上一篇内容：&lt;a href=&quot;https://lidong.me/blog/install-wordpress-with-docker/&quot;&gt;使用Docker安装WordPress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不到黄河不死心，早先就想把Wordpress部署在子目录，前几天把捣
      
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="wordpress" scheme="https://lidong.me/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>关于比特币</title>
    <link href="https://lidong.me/bitcoin/"/>
    <id>https://lidong.me/bitcoin/</id>
    <published>2018-01-02T22:49:05.000Z</published>
    <updated>2018-01-02T22:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉比特币现在很火（嗯，好像已经火过了～），作为一个自认为有点极客的人，却一直没有参与到这项极客活动中来，现在上车了。</p><a id="more"></a><p>早先通过一个APP，看一个广告500聪，得到了35000聪，记得当时也是一个比特币上涨的日子，当时APP中还有5000聪没有支付，老板跑路了。35000聪兑换成人民币大约2元（1比特币大约5K多RMB），一直也没有管它的，现在算了一下兑换可以兑换35元(5.7美元)，增值十多倍了。</p><p><a href="https://static.lidong.me/upload/images/d5ERqGLRm.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/d5ERqGLRm.png" alt="bitcoin"></a></p><p>刚刚过去的半年，比特币那叫一个疯狂，虽然没有特别关注，但是一些资讯网站隔几天就发文比特币6000刀，8000刀，10000刀。。。然鹅没有钱，就没关注所谓的行情。这两天休息没事，不小心就被感化了，关注 and 上车了，想想“所谓的经济啊、金融啊不就是把钱换来换去的，换的多就变成了很有钱的样子”。自己不把钱拿去换来换去怎么能像有钱人?。</p><p>昨天注册账号，今天开始买币，本来想着只买500元玩玩，一不小心就投了3500元，交易6笔已经变现300元。之前没参与过交易所的交易，不知道交易所怎么搞的，我注册的这个平台是场外交易（宣传这么说的），具体操作是平台上交易比特币，然后支付宝或微信等方式付款，嗯，就像淘宝购物，只不过是在网上买钱。买钱！。。貌似整个中国区都禁止比特币人民币交易，但是机智的人民推出场外交易的平台：线上购买，然后支付宝或微信转账。然后进行着事实上的人民币与比特币的交易。不过价格比交易所的价格高一些，高百分之十几。</p><h2 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h2><p>经过几笔交易觉得，真是城会玩系列，总结一下完全是一场心理游戏，赚钱就是：低买高卖，投机倒把，买了卖，卖了买，想赚钱，找准时间上车，也找准时间下车，并没看到实际价值。我没买过股票什么的，不知道股票交易是不是也是这样的。</p><p>不过个人还是看好区块链这个技术，比特币是区块链的代表，要买就买比特币，其他的就算了，纯粹是无中生有，哪有每个人都发行一种自己的货币的说法。虽然现在比特币的价格相比最高点的跌去一半了，但相比去年的价格现在挺高的，不知道什么时候还会跌下去了，但愿自己不当接盘侠。</p><p>2018.01.04 Update:</p><p>每次交易都要支付手续费，要在搜索区域显示，需要缴纳广告费，余额不足的不显示，额真是万恶的资本主义！（一开始我以为只要支付手续费，公告中称最近一个月免广告费，我以为现阶段什么都不要呢，买家的钱全部到卖家手里，嗯看来还是 too young ?）</p><p>不过邀请好友是有奖励。如果你想参与到比特币交易中，欢迎使用我的邀请链接，<a href="https://www.oonnnoo.com/static/ref.html#OTCBTC" target="_blank" rel="noopener">查看我的邀请链接</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/2 22:49:05 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉比特币现在很火（嗯，好像已经火过了～），作为一个自认为有点极客的人，却一直没有参与到这项极客活动中来，现在上车了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="比特币" scheme="https://lidong.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="bitcoin" scheme="https://lidong.me/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 安装 WordPress</title>
    <link href="https://lidong.me/install-wordpress-with-docker/"/>
    <id>https://lidong.me/install-wordpress-with-docker/</id>
    <published>2018-01-01T12:48:54.000Z</published>
    <updated>2018-01-01T12:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.lidong.me/upload/images/zgVFGyB2j.png" alt="docker-wordpress.png"></p><p>今天是元旦，首先要祝自己、祝大家元旦快乐?。</p><p>好久没有写东西了，新年新开始，从今天开始写点东西吧。</p><p>昨天刚把Wordpress装上了，记录一些安装过程。毕竟不是像原来那样常规的安装方式。</p><a id="more"></a><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>通过docker安装，docker-compose 放在gist上，其中包含一些其他 services，请自行忽略</p><script src="https://gist.github.com/1209a07f07b718854e5c9e7bc2589ecb.js"></script><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1.通过 nginx 转发 wordpress</p><p>因为做了多个services，所以不能直接将宿主机的80端口或443端给wordpress，一开始我不知道怎么弄，后来发现可以直接转到通过反向代理转到<code>http://wordpress:80</code></p><p>参考<a href="https://github.com/oonnnoo/nginx-conf/blob/63e574ce73c7adcf11c26e0a746feb6452f2eefb/worpdress.oonnnoo.com.conf#L10" target="_blank" rel="noopener">GitHub链接</a></p><p>2.SSL证书错误</p><p>因为1中使用http，80端口访问的，也就是从nginx container到wordpress container中访问是通过HTTP访问的，由于wordpress container中没有配置SSL证书，目前也只能这样了。正因为这样，wordpress中检测不到https访问，所以资源链接一律返回HTTP，到浏览器一片红。</p><p>找到一个解决办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($_SERVER[&apos;HTTP_X_FORWARDED_PROTO&apos;] === &apos;https&apos;)</span><br><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line"></span><br><span class="line">if (isset($_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;])) &#123;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的配置，简单粗暴，不带判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://github.com/docker-library/wordpress/issues/251#issuecomment-345687824" target="_blank" rel="noopener">https://github.com/docker-library/wordpress/issues/251#issuecomment-345687824</a></p><p>3.数据库保存</p><p>目前将数据保存在mysql container中，对mysql image还没有深入研究，毕竟经常会 <code>docker-compose up -d --force-recreate</code> ，数据保存在container，多危险。这是一个 <code>//TODO</code> 的事情。</p><p>2018.01.10 update:</p><p><a href="https://lidong.me/wordpress/2018/second-set-wordpress/">重新配置WordPress</a></p><p>2018.03.24 update:</p><p>4.客户端IP获取错误</p><p>由于请求是通过nginx转发了一次，Wordpress获取到的客户端IP是docker传过去的形似 <code>172.18.0.x</code> 的IP地址，在评论中显示作者IP那就是 <code>172.18.0.x</code>了，要想拿到真实的客户端IP，可以这样做：</p><p>在nginx配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header  X-Real-IP          $remote_addr;</span><br></pre></td></tr></table></figure><p>在Wordpress中 <code>wp-config.php</code> 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (isset($_SERVER[&apos;HTTP_X_REAL_IP&apos;])) &#123;</span><br><span class="line">    $_SERVER[&apos;REMOTE_ADDR&apos;] = $_SERVER[&apos;HTTP_X_REAL_IP&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/1 12:48:54 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://static.lidong.me/upload/images/zgVFGyB2j.png&quot; alt=&quot;docker-wordpress.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天是元旦，首先要祝自己、祝大家元旦快乐?。&lt;/p&gt;
&lt;p&gt;好久没有写东西了，新年新开始，从今天开始写点东西吧。&lt;/p&gt;
&lt;p&gt;昨天刚把Wordpress装上了，记录一些安装过程。毕竟不是像原来那样常规的安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="wordpress" scheme="https://lidong.me/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>使用 VNC</title>
    <link href="https://lidong.me/use-vnc/"/>
    <id>https://lidong.me/use-vnc/</id>
    <published>2017-08-06T00:14:19.000Z</published>
    <updated>2017-08-06T00:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-VNC-服务端"><a href="#安装-VNC-服务端" class="headerlink" title="安装 VNC 服务端"></a>安装 VNC 服务端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><p>启动 VNC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure></p><h3 id="设置-VNC-服务端"><a href="#设置-VNC-服务端" class="headerlink" title="设置 VNC 服务端"></a>设置 VNC 服务端</h3><p>第一次启动 VNC，需要设置VNC的密码，可选设置一个可供其他人浏览只读(read-only)密码，登入的密码会加密后保存在 <code>~/.vnc/passwd</code> 文件中。</p><h2 id="安装-VNC-客户端"><a href="#安装-VNC-客户端" class="headerlink" title="安装 VNC 客户端"></a>安装 VNC 客户端</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>可以使用自带客户端（屏幕共享）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/CoreServices/Applications/Screen Sharing.app</span><br></pre></td></tr></table></figure><p>可以通过spotlight 或 alfred 的搜索 Screen Sharing (屏幕共享)打开，使用时，输入 <code>ip:port</code> 进行连接</p><p><img src="https://static.lidong.me/img/blog/t9IaxaqawMpf.png" alt="MacOS屏幕共享"></p><h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>可以使用 VNC Viewer（Chrome App）<br><a href="https://chrome.google.com/webstore/detail/iabmpiboiopbgfabjmgeedhcmjenhbla" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/iabmpiboiopbgfabjmgeedhcmjenhbla</a></p><p>在服务端启动时候，默认创建的用户为1，开放的端口为5901</p><p>客户端中，输入 <code>ip:1</code> 或 <code>ip:5901</code> 或 <code>ip::5901</code>连接 VNC，输入密码确认连接。</p><p>VNC Viewer 登录页<br><img src="https://static.lidong.me/img/blog/5WEtijRrqiUw.png" alt="VNC Viewer 截屏"></p><p>使用VNC登录 raspberry Pi<br><img src="https://static.lidong.me/img/blog/7yO0KhNoyl6U.png" alt="使用vnc登录 raspberry Pi"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>1.2017-08-06 首次发布</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-VNC-服务端&quot;&gt;&lt;a href=&quot;#安装-VNC-服务端&quot; class=&quot;headerlink&quot; title=&quot;安装 VNC 服务端&quot;&gt;&lt;/a&gt;安装 VNC 服务端&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="linux" scheme="https://lidong.me/tags/linux/"/>
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="vnc" scheme="https://lidong.me/tags/vnc/"/>
    
  </entry>
  
  <entry>
    <title>通过adb命令操作android设备</title>
    <link href="https://lidong.me/use-adb-command/"/>
    <id>https://lidong.me/use-adb-command/</id>
    <published>2017-08-05T21:59:44.000Z</published>
    <updated>2017-08-05T21:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为前些天，手机掉地上，摔碎了屏幕，现在手机是半身不遂(下半屏触摸失效)😢</p><p>搜索一下，发现可以通过android的调试工具来触发点击事件的，而且不仅仅是触发点击事件功能。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载-platform-tools"><a href="#下载-platform-tools" class="headerlink" title="下载 platform tools"></a>下载 platform tools</h3><p>要通过电脑来操作android终端，首先需要下载adb工具</p><p>下载页面：</p><p><a href="https://developer.android.com/studio/releases/platform-tools.html" target="_blank" rel="noopener">https://developer.android.com/studio/releases/platform-tools.html</a></p><p>下载链接：</p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-darwin.zip</a></p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-linux.zip</a></p><p>MacOS可以通过brew来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><h3 id="下载安装手机驱动"><a href="#下载安装手机驱动" class="headerlink" title="下载安装手机驱动"></a>下载安装手机驱动</h3><p>这个不同手机驱动不同，要到各自手机厂商去下载，或者要简单一些，各种手机助手随便下载一个，会自动帮你把需要安装的手机驱动安装完成。</p><h3 id="开启手机调试"><a href="#开启手机调试" class="headerlink" title="开启手机调试"></a>开启手机调试</h3><p>用过手机助手都懂，不解释</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>查看设备连接情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>进入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>点击坐标（500，1600）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell tap 500，1600</span><br></pre></td></tr></table></figure><p>输入字符abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>屏幕截图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap /sdcard/screen.png</span><br></pre></td></tr></table></figure><p>录制视频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure><p>安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install path_to_apk</span><br></pre></td></tr></table></figure><p>从设备复制文件或目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull remote local</span><br></pre></td></tr></table></figure><p>将文件目录复制到设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push local remote  // 比如：adb push foo.txt /sdcard/foo.txt</span><br></pre></td></tr></table></figure><p>重启adb服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-08-05 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>Android 调试桥：<a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为前些天，手机掉地上，摔碎了屏幕，现在手机是半身不遂(下半屏触摸失效)😢&lt;/p&gt;
&lt;p&gt;搜索一下，发现可以通过android的调试工具来触发点击事件的，而且不仅仅是触发点击事件功能。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="adb" scheme="https://lidong.me/tags/adb/"/>
    
  </entry>
  
</feed>

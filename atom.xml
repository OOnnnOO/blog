<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lidong&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lidong.me/"/>
  <updated>2018-11-18T15:04:33.000Z</updated>
  <id>https://lidong.me/</id>
  
  <author>
    <name>Lidong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>frp配置</title>
    <link href="https://lidong.me/frp/"/>
    <id>https://lidong.me/frp/</id>
    <published>2018-11-18T15:04:33.000Z</published>
    <updated>2018-11-18T15:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为光纤改造，安装上了光纤，没了公网IP，嗯，也没有去找客服要，想着试一下内网穿透。frp这个内网穿透的工具，使用配置起来，还是挺简单的</p><a id="more"></a><p>frp下载地址：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><h2 id="服务端配置（frps，具有公网IP的设备"><a href="#服务端配置（frps，具有公网IP的设备" class="headerlink" title="服务端配置（frps，具有公网IP的设备)"></a>服务端配置（frps，具有公网IP的设备)</h2><figure class="highlight plain"><figcaption><span>frps.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">subdomain_host = lidong.me</span><br><span class="line">vhost_https_port = 443</span><br></pre></td></tr></table></figure><h2 id="客户端配置（frpc-无公网IP的设备）"><a href="#客户端配置（frpc-无公网IP的设备）" class="headerlink" title="客户端配置（frpc 无公网IP的设备）"></a>客户端配置（frpc 无公网IP的设备）</h2><figure class="highlight plain"><figcaption><span>frpc.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = nas.lidong.me</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[audio]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = audio</span><br><span class="line"></span><br><span class="line">[download]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = download</span><br><span class="line"></span><br><span class="line">[files]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = files</span><br><span class="line"></span><br><span class="line">[mailplus]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = mailplus</span><br><span class="line"></span><br><span class="line">[note]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = note</span><br><span class="line"></span><br><span class="line">[drive]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = drive</span><br><span class="line"></span><br><span class="line">[moments]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = moments</span><br><span class="line"></span><br><span class="line">[video]</span><br><span class="line">type = https</span><br><span class="line">local_port = 443</span><br><span class="line">subdomain = video</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/11/18 15:04:33 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为光纤改造，安装上了光纤，没了公网IP，嗯，也没有去找客服要，想着试一下内网穿透。frp这个内网穿透的工具，使用配置起来，还是挺简单的&lt;/p&gt;
    
    </summary>
    
    
      <category term="frp" scheme="https://lidong.me/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://lidong.me/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>通过 Nginx 使用 Google Analytics</title>
    <link href="https://lidong.me/nginx-google-analytics/"/>
    <id>https://lidong.me/nginx-google-analytics/</id>
    <published>2018-10-05T23:53:53.000Z</published>
    <updated>2018-10-05T23:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常是通过引用 analytics.js 来使用 Google Analytics 。 但是这个方案缺点是：客户端安装 Adblock 等扩展，屏蔽了Google Analytics，导致统计信息偏差。</p><p>通过将统计转移到后端发送，则可以避免统计被扩展拦截的可能，同时也提高浏览器访问页面的速度。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">userid on;</span><br><span class="line">userid_name cid;</span><br><span class="line">userid_domain [domain];</span><br><span class="line">userid_path /;</span><br><span class="line">userid_expires max;</span><br><span class="line"></span><br><span class="line">location @tracker &#123;</span><br><span class="line">    resolver 100.100.2.138 8.8.8.8 233.5.5.5 valid=3600s;</span><br><span class="line">    proxy_method GET;</span><br><span class="line">    proxy_pass https://www.google-analytics.com/collect?v=1&amp;tid=[UA-XXXXXXXX-Y]&amp;$uid_set$uid_got&amp;t=pageview&amp;dh=$host&amp;dp=$uri&amp;uip=$remote_addr&amp;dr=$http_referer&amp;z=$msec;</span><br><span class="line">    proxy_set_header User-Agent $http_user_agent;</span><br><span class="line">    proxy_pass_request_headers off;</span><br><span class="line">    proxy_pass_request_body off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">    post_action @tracker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Ng­inx 默认自带的 userid 模块可以用于标记各个用户，而 post_ac­tion 配置项可以在 Ng­inx 收到的请求处理完成后向某处发送一个异步的 Get 请求，这个请求会附带原始请求的 ref­erer 与 user-agent</p></blockquote><blockquote><p>userid 模块将会在用户访问时检查 cook­ies 中是否有 cid 项，如果没有 cid 项，则会在返回的 header 中加入 set-cook­ies 头标记这个用户，并将$uid_set 变量设定为 cid=XXXXXX 这一形式，将$uid_got 变量设定为空。如果有 cid 项，则将$uid_got 变量设定为 cid=XXXXXX 这一形式，将$uid_set 变量设定为空。于是在@tracker 部分，上述变量会将$uid_set$uid_got 填充为 cid=XXXXXX。</p></blockquote><p>遵守 DNT (Do Not Track) 的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">    if ($http_dnt != 1) &#123;post_action @tracker;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的配置，查看我的 <a href="https://github.com/ryanlid/nginx-conf/blob/09eca098cfc8116a4d7e8105354480291aab0c35/www.lidong.me.conf" target="_blank" rel="noopener">Github</a></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>和相较于参考文章，我添加 <code>resolver 100.100.2.138 8.8.8.8 233.5.5.5 valid=3600s;</code>  这个是用于dns解析 <code>www.google-analytics.com</code> 的，在调试过程中：如果不添加 <code>resolver</code> ， 在 <code>proxy_pass</code> 填写 ip 测试没有问题，填写域名测试就接收不到数据了。</p><p>更多内容查看参考链接～～</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/10/5 23:53:53 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://darknode.in/network/nginx-google-analytics/" target="_blank" rel="noopener">Ng­inx 内配置 Google An­a­lyt­ics 指南</a></li><li><a href="https://imlonghao.com/36.html" target="_blank" rel="noopener">通过 Nginx 使用 Google Analytics 服务</a></li><li><a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide" target="_blank" rel="noopener">使用 Measurement Protocol</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常是通过引用 analytics.js 来使用 Google Analytics 。 但是这个方案缺点是：客户端安装 Adblock 等扩展，屏蔽了Google Analytics，导致统计信息偏差。&lt;/p&gt;
&lt;p&gt;通过将统计转移到后端发送，则可以避免统计被扩展拦截的可能，同时也提高浏览器访问页面的速度。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>raspberrypi 安装 ffmpeg</title>
    <link href="https://lidong.me/raspberry-pi-ffmpeg/"/>
    <id>https://lidong.me/raspberry-pi-ffmpeg/</id>
    <published>2018-08-19T21:10:11.000Z</published>
    <updated>2018-08-19T21:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装编译x264"><a href="#安装编译x264" class="headerlink" title="安装编译x264"></a>安装编译x264</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> git://git.videolan.org/x264</span><br><span class="line"><span class="comment"># git clone https://gitea.lidong.me/mirrors/x264.git</span></span><br><span class="line"><span class="built_in">cd</span> x264</span><br><span class="line">./configure --host=arm-unknown-linux-gnueabi --<span class="built_in">enable</span>-static --<span class="built_in">disable</span>-opencl</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p><code>make -j4</code> 表示使用4线程编译，raspberry pi 3 为四核 CPU，使用4线程可以加快编译速度</p></blockquote><h2 id="安装-FFMPEG"><a href="#安装-FFMPEG" class="headerlink" title="安装 FFMPEG"></a>安装 FFMPEG</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> git://source.ffmpeg.org/ffmpeg.git</span><br><span class="line"><span class="built_in">cd</span> ffmpeg</span><br><span class="line">./configure --arch=armel --target-os=linux --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-nonfree</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="配置-ldconfig"><a href="#配置-ldconfig" class="headerlink" title="配置 ldconfig"></a>配置 ldconfig</h2><p>完成上述步骤后，直接运行命令 ffmpeg 会报错：<code>ffmpeg: error while loading shared libraries: libx264.so.157: cannot open shared object file: No such file or directory。</code></p><p>找不到对应库，库文件存放在 /usr/local/lib 这个目录，这里将目录添加到配置文件中，命令行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>添加 <code>/usr/local/lib</code>，最终文件内容为：</p><figure class="highlight plain"><figcaption><span>ld.so.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /etc/ld.so.conf.d/*.conf</span><br><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>运行 ldconfig 使配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>这时输入 <code>ffmpeg</code> 命令即可看到类似下面的输出，则表示已经安装成功。</p><p><img src="https://static.lidong.me/upload/images/_Zwvgbb_S.png" alt="raspberrypi-ffmpeg"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/19 21:10:11 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://gist.github.com/dudewheresmycode/154df74824aadef2b8c1b8a6bccb66c7" target="_blank" rel="noopener">install ffmpeg on Raspberry Pi</a></li><li><a href="https://segmentfault.com/a/1190000014681834" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014681834</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装编译x264&quot;&gt;&lt;a href=&quot;#安装编译x264&quot; class=&quot;headerlink&quot; title=&quot;安装编译x264&quot;&gt;&lt;/a&gt;安装编译x264&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://lidong.me/tags/ffmpeg/"/>
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装 Nextcloud ，并挂载阿里云 OSS</title>
    <link href="https://lidong.me/nextcloud/"/>
    <id>https://lidong.me/nextcloud/</id>
    <published>2018-08-06T20:21:27.000Z</published>
    <updated>2018-08-06T20:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，阿里 OSS 最近出了个优惠，1T存储3年99元，看起来蛮便宜的，当然流量费另算，不过同区域的内网流量免费，入网流量免费，灰常适合作备份。哈哈 😄<br>于是弄个nextcloud，倒腾一下~~，顺道记录一下倒腾过程。</p><a id="more"></a><h2 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择"></a>镜像选择</h2><p><img src="https://static.lidong.me/upload/images/SJS6BxLrQ.png" alt="nextcloud-docker-tags.png"></p><p><a href="https://hub.docker.com/_/nextcloud/" target="_blank" rel="noopener">查看链接</a></p><p>官方提供了多种版本的 image ，目前最新稳定版是 <code>13.x.x</code> 我选择的是 <code>nextcloud:stable-apache</code>，这是我的 <code>docker-compose.yml</code>文件</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/datadir:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">     MYSQL_ROOT_PASSWORD:</span> <span class="string">mysql_root_password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  nextcloud:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nextcloud:stable-apache</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/nextcloud/html:/var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  website:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">onnno/nginx:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/www:/var/www</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/etc/nginx/conf.d:/usr/local/nginx/conf.d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/nginx:/usr/local/nginx/logs</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/etc/letsencrypt:/etc/letsencrypt</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nextcloud</span></span><br></pre></td></tr></table></figure><blockquote><p>这里简化过的 <code>docker-compose.yml</code> 。因为MySQL的密码直接写在了 yml 文件中，就不贴完整原文件了，仅供参考，使用时注意替换。</p></blockquote><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>通过你的域名或IP访问你的服务器安装就可以了，操作简单，就不细说了，如有需要，查看我的 <a href="https://github.com/ryanlid/nginx-conf" target="_blank" rel="noopener">Nginx的配置</a> 以及我的 <a href="https://github.com/ryanlid/nginx-conf/blob/master/cloud.lidong.me.conf" target="_blank" rel="noopener"> Nextcloud Nginx的配置</a></p><blockquote><p>注意：安装填写 MySQL 数据地址要填写 <code>mysql</code>, 而不是 <code>localhost</code> 了</p></blockquote><h2 id="OSS-挂载权限"><a href="#OSS-挂载权限" class="headerlink" title="OSS 挂载权限"></a>OSS 挂载权限</h2><p>阿里 OSS 提供一个工具 ossfs ， 可以将 OSS 挂载到本地文件系统上。</p><p>查看<a href="https://help.aliyun.com/document_detail/32196.html" target="_blank" rel="noopener">oss文档</a></p><p>先按照文档安装ossfs，配置 passwd-ossfs ，挂载目录就不能按照文档操作了，因为 NextCloud 有点不一样，“外部存储” 挂载的目录权限必须是 0770 ，用户是 33，（也不知道是为什么是这个鬼，应该 docker 的问题），否则在使用 NextCloud 时无法读取到文件。</p><p>正确的挂载方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my-bucket:oss的bucket名 ouid: 用户id ogid:组id</span></span><br><span class="line">ossfs my-bucket my-mount-point -ourl=my-oss-endpoint -ouid=33 -ogid=0  -oumask=007 -o allow_other</span><br></pre></td></tr></table></figure><p>具体缘由：<a href="https://github.com/aliyun/ossfs/wiki/FAQ#11" target="_blank" rel="noopener">看这里</a> 和 <a href="https://github.com/aliyun/ossfs/issues/5" target="_blank" rel="noopener">看这里</a></p><p>这是我的挂载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ossfs cloud-fs /var/nextcloud/html/cloudossfs -ourl=http://oss-cn-hongkong-internal.aliyuncs.com -ouid=33 -ogid=0  -oumask=007 -o allow_other</span><br></pre></td></tr></table></figure><blockquote><p>注意：因为我在 docker 映射的是 <code>/var/nextcloud/html/</code> 目录， <code>my-mount-point</code> 必须在 <code>/var/nextcloud/html/</code>之下，否则在容器中是读取不到的。</p><p>我这里 my-mount-point 是 <code>/var/nextcloud/html/cloudossfs</code>，在docker容器中对应的则是<code>/var/www/html/cloudossfs</code></p></blockquote><p>这时在 Nextcloud 中启用 External storage support 应用（插件），添加路径就可以通过 OSS 存取数据啦。</p><p><img src="https://static.lidong.me/upload/images/r1TzObIrX.png" alt="External storage"></p><blockquote><p>看不清图片，可以右键图片，选择新标签页打开图片</p></blockquote><p>如果还是不行，尝试进入到容器，将 <code>/var/www/html/cloudossfs</code> 目录的用户属性手动修改为 <code>www-data</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown www-data:root /var/www/html/cloudossfs/</span><br></pre></td></tr></table></figure><p>重新扫描用户文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u www-data php occ files:scan --all</span><br></pre></td></tr></table></figure><p>缘由<a href="https://www.zhihu.com/question/267841887/answer/393946741" target="_blank" rel="noopener">看这里</a></p><p>在容器中不带 <code>sudo</code> 命令，需要安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install sudo</span><br></pre></td></tr></table></figure><blockquote><p>PS： 最初我也是想把 Nextcloud 中的整个目录都映射到 OSS 的中的，即上面的目录 <code>/var/nextcloud/html:/var/www/html</code>，因为权限问题 Nextcloud 一直没有操作成功，而且文件巨多，不算用户上传的数据，就有13000多个， OSS 的一部分费用是按请求计算的，每1万次1分钱。在安装过程中，拷贝了两次，产生了两万多个请求。直接把我 OSS 账号搞欠费了（因为账号本没有余额😆），于是放弃了。</p></blockquote><h2 id="客户端同步设置"><a href="#客户端同步设置" class="headerlink" title="客户端同步设置"></a>客户端同步设置</h2><p>Nextcould是见过为数不多的支持自定义忽略文件、文件夹的云同步软件</p><h3 id="设置忽略文件"><a href="#设置忽略文件" class="headerlink" title="设置忽略文件"></a>设置忽略文件</h3><p>在Windows上，忽略文件的配置文件保存在<code>C:\Program Files (x86)\Nextcloud\sync-exclude.lst</code>中。</p><p>其他操作系统，请自行查找，可以在客户端的设置中查看</p><p>找到文件，在文件末尾，添加 <code>node_modules</code> ，同步的时候就会自动跳过 <code>node_modules</code> 目录了 😆</p><h3 id="设置隐藏文件同步"><a href="#设置隐藏文件同步" class="headerlink" title="设置隐藏文件同步"></a>设置隐藏文件同步</h3><p>Nextcloud 默认是不同步隐藏文件的，即点开头的文件</p><p>文档在这里：<a href="https://docs.nextcloud.com/desktop/2.3/advancedusage.html#configuration-file" target="_blank" rel="noopener">链接</a></p><ul><li><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">HOME/.config/Nextcloud/nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li><li><p>Windows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">APPDATA%\Nextcloud\nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li><li><p>macOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">HOME/Library/Preferences/Nextcloud/nextcloud.cfg</span></span><br></pre></td></tr></table></figure></li></ul><p>将 <code>ignoreHiddenFiles=true</code> 修改为 <code>ignoreHiddenFiles=false</code> 即可</p><blockquote><p>按文档来说是这样，但是修改后重启客户端后，就无法连接服务端了。貌似是 bug 了，额，尴尬。😱</p></blockquote><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><p>通常，在访问 Nextcloud 过程中，程序会自动检查请求是 http 请求还是 https 请求，而动态生成页面中资源的链接，而现在的部署方式，使用nginx代理过请求， 如果是是https访问，程序并不能检测到https请求，所以需要在 Nextcloud 配置文件 <code>/var/nextcloud/html/config/config.php</code> 添加为 <code>&#39;overwriteprotocol&#39; =&gt; &#39;https&#39;</code>来覆盖默认设置。</p></li><li><p>如果要上传大文件，注意在nginx中设置 <code>client_max_body_size</code> ,看我的<a href="https://github.com/ryanlid/nginx-conf/blob/5678e4bab3b7a34ec92043e3a9566fc471d04775/cloud.lidong.me.conf#L14" target="_blank" rel="noopener">示例</a></p></li><li><p>欢迎使用我的阿里云的 <a href="https://promotion.aliyun.com/ntms/act/oss-discount.html?userCode=hk4wst53" target="_blank" rel="noopener">推荐链接</a> ，参团一起购买有优惠，你懂的 ~~~</p></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/6 20:21:27 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://crabdave.iteye.com/blog/2356624" target="_blank" rel="noopener">使用OwnCloud Docker容器+阿里云OSS搭建自己的云盘服务 on Centos 7</a></li><li><a href="https://oing9179.github.io/blog/2017/03/Setup-Nextcloud-using-Docker-and-Nginx/" target="_blank" rel="noopener">用 Docker 和 Nginx 搭建自己的云服务器（Nextcloud）</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，阿里 OSS 最近出了个优惠，1T存储3年99元，看起来蛮便宜的，当然流量费另算，不过同区域的内网流量免费，入网流量免费，灰常适合作备份。哈哈 😄&lt;br&gt;于是弄个nextcloud，倒腾一下~~，顺道记录一下倒腾过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="nextcloud" scheme="https://lidong.me/tags/nextcloud/"/>
    
      <category term="oss" scheme="https://lidong.me/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>使用 ffmpeg 下载加密 ts 视频流</title>
    <link href="https://lidong.me/ffmpeg-download-ts/"/>
    <id>https://lidong.me/ffmpeg-download-ts/</id>
    <published>2018-08-02T22:30:53.000Z</published>
    <updated>2018-08-02T22:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为朋友需要下载某课的付费视频，某课的视频是以ts文件后缀格式的视频流一小段一小段边下边播的，而且使用了加密手段。研究了一下，发现通过 ffmpeg 下载还是挺容易的，直接可以生成一个ts的文件，播放器都播放这个文件也是没有问题的。</p><p>现在记录一下下载方法，不过前提是你有在线观看的权限。否则拿不到视频流地址，何谈下载？</p><a id="more"></a><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>  最好使用 Linux 环境</p><p>  我使用的是 wsl 中 ubuntu (WSL 中的 Ubuntu 16.04.5 LTS)<br>  <img src="https://static.lidong.me/upload/images/HkQVn9xB7.png" alt="lsb_release.png"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>安装ffmpeg，在 ubuntu 系统中，可以直接 <code>apt install</code> 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>下载m3u8</p><p>如果播放的视频是ts形式的视频流，浏览器播放视频之前一定会加载一个.m3u8 文件，可以通过浏览器开发者工具network查看到，下载这个文件</p></li><li><p>下载key文件，替换m3u8中的key文件</p><p>在m3u8 中的密钥通常是这样的：<code>#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://xxx&quot;</code>，这时需要用能够在线观看到这个视频的浏览器会话去访问这个 URI （通过 cookies 验证），并保存到本地，并把 m3u8 也保存到本地，将密钥的 URI 改为下载好的本地路径（一个 m3u8 中可能有多个密钥，需要一一处理）。</p><blockquote><p>如果报错可以将文件保存为以.m3u8后缀的文件</p></blockquote><p>下载视频文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 02.m3u8  -c copy 02.ts  <span class="comment"># ffmpeg -i m3u8路径 -c copy 下载文件保存文件名</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="遇到的问题及参考资料列表"><a href="#遇到的问题及参考资料列表" class="headerlink" title="遇到的问题及参考资料列表"></a>遇到的问题及参考资料列表</h2><ol><li><p><a href="http://www.cuplayer.com/player/PlayerCode/FFmpeg/2017/0419/2873.html" target="_blank" rel="noopener">[ffmpeg]如何使用ffmpeg下载分段并加密的m3u8视频流</a></p></li><li><p><a href="https://blog.csdn.net/dzreal_7/article/details/79277636" target="_blank" rel="noopener">ffmpeg读取加密的m3u8文件时无法访问.key文件</a></p></li><li><p><a href="https://blog.csdn.net/cnhome/article/details/73250495" target="_blank" rel="noopener">ffmpeg分解视频文件并加密</a></p></li></ol><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/8/2 22:30:53 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为朋友需要下载某课的付费视频，某课的视频是以ts文件后缀格式的视频流一小段一小段边下边播的，而且使用了加密手段。研究了一下，发现通过 ffmpeg 下载还是挺容易的，直接可以生成一个ts的文件，播放器都播放这个文件也是没有问题的。&lt;/p&gt;
&lt;p&gt;现在记录一下下载方法，不过前提是你有在线观看的权限。否则拿不到视频流地址，何谈下载？&lt;/p&gt;
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://lidong.me/tags/ffmpeg/"/>
    
      <category term="ts视频流" scheme="https://lidong.me/tags/ts%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    
      <category term="视频下载" scheme="https://lidong.me/tags/%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>weex 从入门到放弃</title>
    <link href="https://lidong.me/weex-getting-started-and-giving-up/"/>
    <id>https://lidong.me/weex-getting-started-and-giving-up/</id>
    <published>2018-07-18T13:31:57.000Z</published>
    <updated>2018-07-21T23:43:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中尝试使用，研究了好几天，感觉框架不成熟，很多功能需要原生支撑，最终决定弃坑，不过还是记录一下。</p><a id="more"></a><h2 id="初始使用"><a href="#初始使用" class="headerlink" title="初始使用"></a>初始使用</h2><p>安装 weex-toolkit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install weex-toolkit -g</span><br></pre></td></tr></table></figure><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weex create awesome-app</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd awesome-app</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>编译运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weex platform add ios</span><br><span class="line">weex platform add android</span><br></pre></td></tr></table></figure><p>在模拟器或真实设备上启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weex run ios</span><br><span class="line">weex run android</span><br><span class="line">weex run web</span><br></pre></td></tr></table></figure><h2 id="一些有用的资料"><a href="#一些有用的资料" class="headerlink" title="一些有用的资料"></a>一些有用的资料</h2><p>weex-ui：阿里飞猪支持的一个UI库</p><p><a href="https://alibaba.github.io/weex-ui/#/" target="_blank" rel="noopener">https://alibaba.github.io/weex-ui/#/</a></p><p>natjs: 提供一些常用原生功能</p><p><a href="http://natjs.com/#/zh-cn/" target="_blank" rel="noopener">http://natjs.com/#/zh-cn/</a></p><p>weex 插件市场: 可以找到一些插件</p><p><a href="https://market.dotwe.org/ext/list.htm" target="_blank" rel="noopener">https://market.dotwe.org/ext/list.htm</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/7/18 13:31:57 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中尝试使用，研究了好几天，感觉框架不成熟，很多功能需要原生支撑，最终决定弃坑，不过还是记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="weex" scheme="https://lidong.me/tags/weex/"/>
    
      <category term="vuejs" scheme="https://lidong.me/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>使用 travis-ci 自动化部署 hexo</title>
    <link href="https://lidong.me/hexo-travis-ci/"/>
    <id>https://lidong.me/hexo-travis-ci/</id>
    <published>2018-07-16T22:18:39.000Z</published>
    <updated>2018-07-16T22:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前有使用 hexo 记录 blog ，但不能在线修改，每次写完都要本地构建、提交、上传，操作繁琐， 遂弃之，今天重新尝试使用 hexo ，不过这次配置好了 CI，简化日常操作，现在记录一下操作步骤。</p><a id="more"></a><h2 id="配置-Acess-Token"><a href="#配置-Acess-Token" class="headerlink" title="配置 Acess Token"></a>配置 Acess Token</h2><p>我使用的是<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a>, 免费版只能用于开源项目，所以不能使用ssh-key来认证的（常规方法，貌似通过奇技淫巧也是可以，没具体操作），所以只能使用 Personal Access Token。</p><p>管理自己 Personal Access Token 的地方在 Settings 中，链接地址：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> ,在最小权限原则下，可以授予 <code>public_repo</code> 权限即可。</p><p><img src="https://static.lidong.me/upload/images/HJXs1HqQm.png" alt="Personal-Access-Token-Permissions"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>将 access token 添加到 Travis CI环境变量中，添加之后，就可以在配置文件中使用 <code>$环境变量</code> 指代 access token，从而不用把重要的密钥提交到代码中</p><p><img src="https://static.lidong.me/upload/images/rJRxrLcXQ.png" alt="travis-ci-setting"></p><h2 id="编写travis-yaml"><a href="#编写travis-yaml" class="headerlink" title="编写travis.yaml"></a>编写travis.yaml</h2><blockquote><p>代码放在Gist上，如无法查看，请自行想办法 😜</p></blockquote><p>Travis CI 将安装配置文件设置执行</p><script src="//gist.github.com/cb1e1aca4f2914b2f550599dc09510d9.js"></script><p>在部署完后添加将代码提交到gh-pages分支</p><script src="//gist.github.com/2a5c496e38491ab90fae86ad1fc0a5aa.js"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>目前通过 travis-ci 自动部署到了 GitHub Pages 上 , <a href="https://ryanlid.github.io/blog/" target="_blank" rel="noopener">https://ryanlid.github.io/blog/</a> ，但主站还是部署在我的云主机上，将代码同步到我云主机上这一步还是通过手动操作，后期将准备通过 webhook，触发自动部署</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/7/16 22:18:39 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="hlttps://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo 博客 - Blessing Studio</a></li><li><a href="https://www.jianshu.com/p/5e74046e7a0f" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo</a></li><li><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前有使用 hexo 记录 blog ，但不能在线修改，每次写完都要本地构建、提交、上传，操作繁琐， 遂弃之，今天重新尝试使用 hexo ，不过这次配置好了 CI，简化日常操作，现在记录一下操作步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://lidong.me/tags/hexo/"/>
    
      <category term="travis-ci" scheme="https://lidong.me/tags/travis-ci/"/>
    
      <category term="ci" scheme="https://lidong.me/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6 学习</title>
    <link href="https://lidong.me/es6-learning/"/>
    <id>https://lidong.me/es6-learning/</id>
    <published>2018-06-18T20:00:27.000Z</published>
    <updated>2018-06-18T20:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>又学习了一下 JavaScript 的 ES6 的语法，记录一下～</p><a id="more"></a><p><a href="https://static.lidong.me/upload/images/407Uqvai1.jpg" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/407Uqvai1.jpg" alt="ECMAScript 6"></a></p><h2 id="使用-let-声明变量"><a href="#使用-let-声明变量" class="headerlink" title="使用 let 声明变量"></a>使用 <code>let</code> 声明变量</h2><p>let 声明的变量尽在代码块内有效。(ES6 中新增的块级作用域)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Let/index.js</span></span><br><span class="line"><span class="keyword">var</span> ourFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'this is in the outer scope'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">'this is a new value'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a new value</span></span><br><span class="line"><span class="comment">// this is in the outer scope</span></span><br></pre></td></tr></table></figure><p>在 ES5 中只有全局作用域和函数作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Let/es5.js</span></span><br><span class="line"><span class="keyword">var</span> ourFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">'this is in the outer scope'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'this is a new value'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a new value</span></span><br><span class="line"><span class="comment">// this is a new value</span></span><br></pre></td></tr></table></figure><h2 id="数组展开运算符-Spread-Operator"><a href="#数组展开运算符-Spread-Operator" class="headerlink" title="数组展开运算符 (Spread Operator)"></a>数组展开运算符 (Spread Operator)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpreadOperator/index.js</span></span><br><span class="line"><span class="keyword">var</span> awesomerBands = [<span class="string">'Bayside'</span>, <span class="string">'Semses Fail'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bands = [<span class="string">'silverstein'</span>, <span class="string">'three days grace'</span>, ...awesomerBands];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bands)</span><br><span class="line"><span class="comment">// ["silverstein", "three days grace", "Bayside", "Semses Fail"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bandsFunction = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &amp;amp;lt; args.length; x++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args[x]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bandsFunction(...awesomerBands)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sB</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">y</span></span><br><span class="line"><span class="comment">s</span></span><br><span class="line"><span class="comment">i</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">e</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(rest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">[ 3, 4, 5, 6, 7, 8 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> awesomerBands = [<span class="string">'Bayside'</span>,<span class="string">'Semses Fail'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bands = [<span class="string">'silverstein'</span>,<span class="string">'three days grace'</span>, awesomerBands];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bands)</span><br><span class="line"><span class="comment">// [ "silverstein", "three days grace", [ "Bayside", "Semses Fail" ] ]</span></span><br></pre></td></tr></table></figure><h2 id="对象快速创建-Shorthand"><a href="#对象快速创建-Shorthand" class="headerlink" title="对象快速创建 (Shorthand)"></a>对象快速创建 (Shorthand)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> genre = <span class="string">'Rock'</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Bayside'</span>;</span><br><span class="line"><span class="keyword">var</span> origin = <span class="string">'Queens, New York'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> band = &#123; name, genre, origin &#125;</span><br><span class="line"><span class="built_in">console</span>.log(band);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; name: "Bayside", genre: "Rock", origin: "Queens, New York" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrowFunctions/index.js</span></span><br><span class="line"><span class="keyword">var</span> oldway = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oldway(); <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrowFunction = a =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrowFunction() <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrowFunction2 = (arg1, arg2) =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg1, arg2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arrowFunction2(<span class="string">"this is arg1"</span>, <span class="string">"this is arg2"</span>) <span class="comment">// this is arg1 this is arg2</span></span><br></pre></td></tr></table></figure><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>使用 <code>` `</code> 作为标记，变量通过 <code>`${ }`</code> 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TemplateLiterals/index.js</span></span><br><span class="line"><span class="keyword">var</span> longString1 = <span class="string">`</span></span><br><span class="line"><span class="string">this is long string</span></span><br><span class="line"><span class="string">this is more long string</span></span><br><span class="line"><span class="string">test testing</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> band = <span class="string">'bayside'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longString2 = <span class="string">`</span></span><br><span class="line"><span class="string">this is long string</span></span><br><span class="line"><span class="string">this is more long string</span></span><br><span class="line"><span class="string">Band Name = <span class="subst">$&#123;band&#125;</span></span></span><br><span class="line"><span class="string">test testing</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longStringFunction = (bandname, aroundSince) =&amp;amp;gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;bandname&#125;</span> is a rock band that has been around</span></span><br><span class="line"><span class="string">  since <span class="subst">$&#123;aroundSince + <span class="number">5</span>&#125;</span> years`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longString1)</span><br><span class="line"><span class="comment">// this is long string</span></span><br><span class="line"><span class="comment">// this is more long string</span></span><br><span class="line"><span class="comment">// test testing</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longString2)</span><br><span class="line"><span class="comment">// this is long string</span></span><br><span class="line"><span class="comment">// this is more long string</span></span><br><span class="line"><span class="comment">// Band Name = bayside</span></span><br><span class="line"><span class="comment">// test testing</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longStringFunction(band, <span class="number">10</span>))</span><br><span class="line"><span class="comment">//   bayside is a rock band that has been around</span></span><br><span class="line"><span class="comment">//   since 15 years</span></span><br></pre></td></tr></table></figure><h2 id="类-class-的使用"><a href="#类-class-的使用" class="headerlink" title="类 (class) 的使用"></a>类 (class) 的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class/index.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  printName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name= "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  printOrigin() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"origin = "</span> + <span class="keyword">this</span>.origin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bayside = <span class="keyword">new</span> Band(<span class="string">'bayside'</span>, <span class="string">'Queens,New York'</span>);</span><br><span class="line"></span><br><span class="line">bayside.printName();     <span class="comment">// name= bayside</span></span><br><span class="line">bayside.printOrigin();   <span class="comment">// origin = Queens,New York</span></span><br></pre></td></tr></table></figure><h2 id="class-继承和-super-使用"><a href="#class-继承和-super-使用" class="headerlink" title="class 继承和 super 使用"></a>class 继承和 super 使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  printName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name= "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  printOrigin() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"origin = "</span> + <span class="keyword">this</span>.origin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">Band</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, origin,genre)&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.genre = genre</span><br><span class="line">  &#125;</span><br><span class="line">  printGenre()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.genre)</span><br><span class="line">  &#125;</span><br><span class="line">  printName()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is an override"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bayside = <span class="keyword">new</span> Member(<span class="string">'bayside'</span>, <span class="string">'Queens,New York'</span>,<span class="string">"alternative"</span>);</span><br><span class="line"></span><br><span class="line">bayside.printName();     <span class="comment">// this is an override</span></span><br><span class="line">bayside.printOrigin();   <span class="comment">// origin = Queens,New York</span></span><br><span class="line">bayside.printGenre();   <span class="comment">// alternative</span></span><br></pre></td></tr></table></figure><h2 id="函数默认参数-default-arguments"><a href="#函数默认参数-default-arguments" class="headerlink" title="函数默认参数 default arguments"></a>函数默认参数 default arguments</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultArguments/index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">10</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="for-8230-of-8230-循环"><a href="#for-8230-of-8230-循环" class="headerlink" title="for&#8230;of&#8230; 循环"></a>for&#8230;of&#8230; 循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ForOf-loops/index.js</span></span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &amp;amp;lt; myArray.length; x++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[x])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i  <span class="keyword">of</span> myArray)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p>通过 <code>import ... from ...</code></p><p>使用 <code>default</code> 导出的引入的时候需要可以直接使用，没有使用 <code>default</code> 导出，导出相当于是一个对象，需要使用 <code>{}</code> 来引入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is first,default'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this is second,not default"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/index.js</span></span><br><span class="line"><span class="keyword">import</span>  first  <span class="keyword">from</span> <span class="string">"./test"</span></span><br><span class="line"><span class="keyword">import</span>  &#123;second&#125;  <span class="keyword">from</span> <span class="string">"./test"</span></span><br><span class="line"></span><br><span class="line">first(); <span class="comment">// this is first,default</span></span><br><span class="line">second(); <span class="comment">// "this is second,not default"</span></span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/6/18 20:00:27 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又学习了一下 JavaScript 的 ES6 的语法，记录一下～&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ecmascript 6" scheme="https://lidong.me/tags/ecmascript-6/"/>
    
      <category term="es6" scheme="https://lidong.me/tags/es6/"/>
    
      <category term="Javascript" scheme="https://lidong.me/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 中的 Linux(wsl) 使用</title>
    <link href="https://lidong.me/win10-wsl/"/>
    <id>https://lidong.me/win10-wsl/</id>
    <published>2018-06-13T09:01:39.000Z</published>
    <updated>2018-06-13T09:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://static.lidong.me/upload/images/keqvjWA_P.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/keqvjWA_P.png" alt="store"></a></p><p>wsl开启相关内容参考 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">巨硬的文档</a></p><p>这里记录一下我在 wsl 中的使用情况</p><a id="more"></a><h2 id="node-nvm-安装"><a href="#node-nvm-安装" class="headerlink" title="node(nvm) 安装"></a>node(nvm) 安装</h2><blockquote><p>注意：安装完 nvm 需要重启终端，wsl 中就直接重新进入 Linux 终端，才能使用 nvm 安装 Nodejs</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 nvm</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line"></span><br><span class="line"># 安装最新长期支持版本 Nodejs</span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"># 安装最新稳定版本版本 Nodejs</span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/6/13 9:01:39 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://static.lidong.me/upload/images/keqvjWA_P.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://static.lidong.me/upload/images/keqvjWA_P.png&quot; alt=&quot;store&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wsl开启相关内容参考 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/install-win10&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;巨硬的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里记录一下我在 wsl 中的使用情况&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows" scheme="https://lidong.me/tags/windows/"/>
    
      <category term="wsl" scheme="https://lidong.me/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>cordova 开发环境搭建</title>
    <link href="https://lidong.me/cordova-setup/"/>
    <id>https://lidong.me/cordova-setup/</id>
    <published>2018-05-14T22:12:43.000Z</published>
    <updated>2018-05-14T22:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司的一个项目是使用 cordova 框架做的，现在在自己电脑重新搭建一下开发环境，整理一下文档备忘。</p><a id="more"></a><h2 id="Java-环境搭建"><a href="#Java-环境搭建" class="headerlink" title="Java 环境搭建"></a>Java 环境搭建</h2><h3 id="下载-Java"><a href="#下载-Java" class="headerlink" title="下载 Java"></a>下载 Java</h3><blockquote><p>需要下载 JavaSE 8 貌似最新的 JavaSE10 ，cordova还不支持<br>Java SE 8 下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>Java SE 8 目前最新版本 jdk1.8.0_171</p></blockquote><details><br><summary>新版安装不需要手动配置环境变量，点击查看环境变量配置</summary><br>javaSE 安装程序会自动添加环境变量 Path 中添加一条<br><img src="https://static.oonnnoo.com/upload/images/rJk6kyuCM.png" alt="Java SE8配置安装环境变量"><br></details><h2 id="Nodejs-安装"><a href="#Nodejs-安装" class="headerlink" title="Nodejs 安装"></a>Nodejs 安装</h2><p>前端必备，略。</p><p>Windows 平台建议通过 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 安装，也可参考<a href="https://lidong.me/wordpress/2018/nvm-windows/">nvm-windows 使用</a> ；</p><p>macOS 平台和 Linux 平台建议通过 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 安装。</p><h2 id="安装-cordova"><a href="#安装-cordova" class="headerlink" title="安装 cordova"></a>安装 cordova</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><h2 id="创建-cordova-应用"><a href="#创建-cordova-应用" class="headerlink" title="创建 cordova 应用"></a>创建 cordova 应用</h2><h3 id="创建-app"><a href="#创建-app" class="headerlink" title="创建 app"></a>创建 app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create hello com.example.first firstApp</span><br></pre></td></tr></table></figure><blockquote><p><code>cordova create</code> 是创建项目的命令，紧接着hello为目录，com.example.first为命名空间，firstApp为app名称</p></blockquote><h3 id="添加平台"><a href="#添加平台" class="headerlink" title="添加平台"></a>添加平台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hello</span><br><span class="line">cordova platform add android</span><br></pre></td></tr></table></figure><h3 id="编译-app"><a href="#编译-app" class="headerlink" title="编译 app"></a>编译 app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><details><br><summary>上述命令的集合</summary><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cordova create hello com.example.first firstApp</span><br><span class="line">cd hello</span><br><span class="line">cordova platform add android</span><br><span class="line">cordova build android</span><br></pre></td></tr></table></figure><br><br></details><h3 id="运行-app"><a href="#运行-app" class="headerlink" title="运行 app"></a>运行 app</h3><p>模拟器运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova emulate android</span><br></pre></td></tr></table></figure><p>浏览器运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova serve android</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 即可<br>真机上运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova run android</span><br></pre></td></tr></table></figure><h3 id="更多-cordova-命令"><a href="#更多-cordova-命令" class="headerlink" title="更多 cordova 命令"></a>更多 cordova 命令</h3><p>创建应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create first com.example.first firstApp</span><br></pre></td></tr></table></figure><p>添加平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cordova platform add android</span><br><span class="line">cordova platform add ios</span><br><span class="line">cordova platform add windows</span><br><span class="line">cordova platform add osx</span><br></pre></td></tr></table></figure><p>查看平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms ls</span><br></pre></td></tr></table></figure><p>删除平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova platform remove android</span><br><span class="line">cordova platform rm android</span><br></pre></td></tr></table></figure><p>打包app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>预编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova prepare android</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova compile android</span><br></pre></td></tr></table></figure><p>运行app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cordova emulate android</span><br><span class="line">cordova serve android</span><br><span class="line">cordova run android</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/u011175079/article/details/72841065" target="_blank" rel="noopener">移动开发cordova环境搭建</a></li><li><a href="https://segmentfault.com/a/1190000004868680" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004868680</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的一个项目是使用 cordova 框架做的，现在在自己电脑重新搭建一下开发环境，整理一下文档备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="app" scheme="https://lidong.me/tags/app/"/>
    
      <category term="cordova" scheme="https://lidong.me/tags/cordova/"/>
    
      <category term="ios" scheme="https://lidong.me/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 在右键添加快捷方式</title>
    <link href="https://lidong.me/vscode-shortcut-to-right-key/"/>
    <id>https://lidong.me/vscode-shortcut-to-right-key/</id>
    <published>2018-05-13T22:48:40.000Z</published>
    <updated>2018-05-13T22:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安装 VSCode 的时候勾选添加到PATH，是可以在右键自动添加快捷方式的，不过某些请情况，可能没有快捷方式，需要手动添加。当然以下方式可以适用于把其他软件添加到右键快捷方式的。</p><a id="more"></a><h2 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h2><ol><li><p>Win+R 打开运行，输入 regedit ，打开注册表，找到HKEY_CLASSES_ROOT&#42;\shell分支，如果没有shell分支，则在*下点击右键，选择“新建－项”，建立shell分支。</p><p></p></li><li><p>在shell下新建“VisualCode”项，在右侧窗口的“默认”键值栏内输入<code>Open w&amp;amp;ith Code</code>，这是单击鼠标右键时VisualCode启动程序的显示值。项的名称和键值可以任意，以含义明确为好。其中键值将显示在右键菜单中。</p></li><li><p>在“VisualCode”下再新建Command项，在右侧窗口的“默认”键值栏内输入记事本程序所在的路径，我的是：<code>&quot;C:\Program Files\Microsoft VS Code\code.exe&quot; &quot;%1&quot;</code>。其中的%1表示要打开的文件参数。也就是Visual Code启动程序，找不到的话就在开始里面查找Visual Studio Code，再右键打开文件位置</p></li><li><p>关闭注册表，即可生效。</p></li></ol><h2 id="文件夹打开"><a href="#文件夹打开" class="headerlink" title="文件夹打开"></a>文件夹打开</h2><blockquote><p>以上方法可以在选中文件时右键在菜单栏中显示：&#8221;open with visual code&#8221;，但当右键文件夹时仍然不能显示此选项，所以还要进行下面的操作：</p></blockquote><p>打开注册表，找到HKEY_CLASSES_ROOT\Directory\shell，按照上面2、3的方法添加即可。</p><h2 id="添加Icon"><a href="#添加Icon" class="headerlink" title="添加Icon"></a>添加Icon</h2><p>在原有的项上新建可扩充字符串值，命名为Icon，像一个键值对那样把D:\Program Files (x86)\Microsoft VS Code\code.exe放进去就可以了。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/5/13 22:48:40 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.jianshu.com/p/b49002fa10a7" target="_blank" rel="noopener">https://www.jianshu.com/p/b49002fa10a7</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安装 VSCode 的时候勾选添加到PATH，是可以在右键自动添加快捷方式的，不过某些请情况，可能没有快捷方式，需要手动添加。当然以下方式可以适用于把其他软件添加到右键快捷方式的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编辑器" scheme="https://lidong.me/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="vscode" scheme="https://lidong.me/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>nvm-windows 使用</title>
    <link href="https://lidong.me/nvm-windows/"/>
    <id>https://lidong.me/nvm-windows/</id>
    <published>2018-05-11T22:03:35.000Z</published>
    <updated>2018-05-11T22:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便的安装不同版本的 Nodejs，在 Linux或macOS上可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> ，在 Windows 上则可以使用 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a></p><a id="more"></a><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><p>安装：直接下一步，下一步。就可以了~</p><h2 id="查看nvm的版本，验证安装是否成功"><a href="#查看nvm的版本，验证安装是否成功" class="headerlink" title="查看nvm的版本，验证安装是否成功"></a>查看nvm的版本，验证安装是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version  // 1.1.6</span><br></pre></td></tr></table></figure><h2 id="设置-nodejs、npm-下载镜像"><a href="#设置-nodejs、npm-下载镜像" class="headerlink" title="设置 nodejs、npm 下载镜像"></a>设置 nodejs、npm 下载镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><blockquote><p>8.11.1 为文章完成时的最新的长期支持版，请根据实际情况安装最新版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 8.11.1</span><br></pre></td></tr></table></figure><h2 id="启用-nodejs"><a href="#启用-nodejs" class="headerlink" title="启用 nodejs"></a>启用 nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm use 8.11.1</span><br></pre></td></tr></table></figure><details><br><summary>上述全部内容的集合</summary><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class="line">npm install 8.11.1</span><br><span class="line">npm use 8.11.1</span><br></pre></td></tr></table></figure><br><br></details><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/5/11 22:03:35 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便的安装不同版本的 Nodejs，在 Linux或macOS上可以使用 &lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm&lt;/a&gt; ，在 Windows 上则可以使用 &lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm-windows&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://lidong.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="windows" scheme="https://lidong.me/tags/windows/"/>
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>树莓派 Raspberry Pi 安装 plex</title>
    <link href="https://lidong.me/raspberrypi-plex/"/>
    <id>https://lidong.me/raspberrypi-plex/</id>
    <published>2018-04-08T18:22:01.000Z</published>
    <updated>2018-04-08T18:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Plex是一款功能强大的流媒体播放器</p><a id="more"></a><p><a href="https://static.lidong.me/upload/images/UqMscMvsN.jpg" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/UqMscMvsN.jpg" alt="bitcoin"></a></p><h2 id="1-添加软件源"><a href="#1-添加软件源" class="headerlink" title="1.添加软件源"></a>1.添加软件源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo &quot;deb https://dev2day.de/pms/ jessie main&quot; | sudo tee /etc/apt/sources.list.d/pms.list</span><br></pre></td></tr></table></figure><h2 id="2-为软件源添加GPG密钥"><a href="#2-为软件源添加GPG密钥" class="headerlink" title="2.为软件源添加GPG密钥"></a>2.为软件源添加GPG密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev2day.de/pms/dev2day-pms.gpg.key</span><br><span class="line">sudo apt-key add dev2day-pms.gpg.key</span><br></pre></td></tr></table></figure><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install plexmediaserver-installer</span><br></pre></td></tr></table></figure><h2 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/plexmediaserver.prev</span><br></pre></td></tr></table></figure><p>将里面的的</p><blockquote><p>PLEX_MEDIA_SERVER_USER=plex</p></blockquote><p>修改为</p><blockquote><p>PLEX_MEDIA_SERVER_USER=pi</p></blockquote><h2 id="5-重启PLEX服务"><a href="#5-重启PLEX服务" class="headerlink" title="5.重启PLEX服务"></a>5.重启PLEX服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart plexmediaserver</span><br><span class="line">sudo systemctl status plexmediaserver</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 18:22:01 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Plex是一款功能强大的流媒体播放器&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="plex" scheme="https://lidong.me/tags/plex/"/>
    
  </entry>
  
  <entry>
    <title>使用 vcgencmd 指令查看 Raspberry Pi 的 CPU 运行速度、温度信息</title>
    <link href="https://lidong.me/raspberrypi-vcgencmd-clock-temperature/"/>
    <id>https://lidong.me/raspberrypi-vcgencmd-clock-temperature/</id>
    <published>2018-04-08T18:02:26.000Z</published>
    <updated>2018-04-08T18:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Raspberry Pi 中我们可以利用 vcgencmd 指令来查看各种硬件信息和状态，以下是常用的指令示例。</p><a id="more"></a><h2 id="时钟频率（clock-frequency）"><a href="#时钟频率（clock-frequency）" class="headerlink" title="时钟频率（clock frequency）"></a>时钟频率（clock frequency）</h2><p>如果要查询硬件目前的时钟频率，可以使用 measure_clock 参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_clock &lt;clock&gt;</span><br></pre></td></tr></table></figure></p><p>其中的 <code>&lt;clock&gt;</code> 是指定要查询的硬件，可用的选项有 arm、 core、 h264、 isp、 v3d、 uart、pwm、 emmc、 pixel、 vec、 hdmi、 dpi。</p><p>如果要查询 CPU 的时钟频率（也就是速度），可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_clock arm</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>frequency(45)=700000000</p></blockquote><p>如果想查询所有的硬件时钟频率，可以使用简单的 shell 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \</span><br><span class="line">  echo -e &quot;$src:\t$(vcgencmd measure_clock $src)&quot; ; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>arm: frequency(45)=700000000</p><p>core: frequency(1)=250000000</p><p>h264: frequency(28)=250000000</p><p>isp: frequency(42)=250000000</p><p>v3d: frequency(43)=250000000</p><p>uart: frequency(22)=3000000</p><p>pwm: frequency(25)=0</p><p>emmc: frequency(47)=250000000</p><p>pixel: frequency(29)=108000000</p><p>vec: frequency(10)=0</p><p>hdmi: frequency(9)=163682000</p><p>dpi: frequency(4)=0</p></blockquote><h2 id="电压（voltage）"><a href="#电压（voltage）" class="headerlink" title="电压（voltage）"></a>电压（voltage）</h2><p>如果要查询硬件目前的工作电压，可以使用 measure_volts 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_volts &lt;id&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>&lt;id&gt;</code> 是指定要查询的硬件，可用的选项有 core、 sdram_c、 sdram_i、 sdram_p。如果没有指定 <code>&lt;id&gt;</code>，则预设为 core：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_volts</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>volt=1.2000V</p></blockquote><p>查询所有工作电压的 shell 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for id in core sdram_c sdram_i sdram_p ; do \</span><br><span class="line">  echo -e &quot;$id:\t$(vcgencmd measure_volts $id)&quot; ; \</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>core: volt=1.200V</p><p>sdram_c: volt=1.200V</p><p>sdram_i: volt=1.200V</p><p>sdram_p: volt=1.225V</p></blockquote><h2 id="温度（temperature）"><a href="#温度（temperature）" class="headerlink" title="温度（temperature）"></a>温度（temperature）</h2><p>如果要查询目前的温度，可以使用 measure_temp 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_temp</span><br></pre></td></tr></table></figure><p>输出为</p><blockquote><p>temp=43.3’C</p></blockquote><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 18:02:26 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>节选翻译自： <a href="https://blog.gtwang.org/iot/raspberry-pi-vcgencmd-hardware-information/" target="_blank" rel="noopener">使用 vcgencmd 指令查看 Raspberry Pi 的 CPU 溫度、運行速度與電壓等資訊</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Raspberry Pi 中我们可以利用 vcgencmd 指令来查看各种硬件信息和状态，以下是常用的指令示例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上安装DLNA实现流媒体服务器</title>
    <link href="https://lidong.me/raspberrypi-dlna/"/>
    <id>https://lidong.me/raspberrypi-dlna/</id>
    <published>2018-04-08T17:29:46.000Z</published>
    <updated>2018-04-08T17:29:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。嗯，通过它可以实现流媒体服务器～</p><a id="more"></a><h2 id="1-安装-minidlna"><a href="#1-安装-minidlna" class="headerlink" title="1.安装 minidlna"></a>1.安装 minidlna</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install minidlna</span><br></pre></td></tr></table></figure><h2 id="2-设置配置文件"><a href="#2-设置配置文件" class="headerlink" title="2.设置配置文件"></a>2.设置配置文件</h2><p>修改 <code>/etc/minidlna.conf</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">media_dir=A,/data/DLNA/Music    #A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件</span><br><span class="line">media_dir=P,/data/DLNA/Music</span><br><span class="line">media_dir=V,/data/DLNA/Video</span><br><span class="line">db_dir=/data/DLNA/db            #配置minidlna的数库数据的存放目录</span><br><span class="line">log_dir=/data/DLNA/log          #配置日志目录</span><br></pre></td></tr></table></figure><h2 id="3-后续操作"><a href="#3-后续操作" class="headerlink" title="3.后续操作"></a>3.后续操作</h2><p>建立文件夹</p><p>在 <code>/data</code> 文件夹下，建立以上文件夹，并设置好权限为 read and write。</p><p>重启 minidlna</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/minidlna restart</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/minidlna status</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/8 17:29:46 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DLNA并不是创造技术，而是形成一种解决的方案，一种大家可以遵守的规范。嗯，通过它可以实现流媒体服务器～&lt;/p&gt;
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="dlna" scheme="https://lidong.me/tags/dlna/"/>
    
  </entry>
  
  <entry>
    <title>l2tp VPN 搭建</title>
    <link href="https://lidong.me/l2tp-vpn-setup/"/>
    <id>https://lidong.me/l2tp-vpn-setup/</id>
    <published>2018-04-06T12:43:04.000Z</published>
    <updated>2018-04-06T12:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为在路由器上需要用到，这里记录一下VPN安装方式。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</span><br><span class="line">chmod +x l2tp.sh</span><br><span class="line">./l2tp.sh</span><br></pre></td></tr></table></figure><blockquote><p>一些可能用到的操作</p><p>l2tp -a (Add a user)</p><p>l2tp -d (Delete a user)</p><p>l2tp -l (List all users)</p><p>l2tp -m (Modify a user password)</p><p>more <a href="https://teddysun.com/448.html" target="_blank" rel="noopener">https://teddysun.com/448.html</a></p></blockquote><p>更多详情查看。原作者的 <a href="https://github.com/teddysun/across/" target="_blank" rel="noopener">GitHub</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/4/6 12:43:04 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为在路由器上需要用到，这里记录一下VPN安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="l2tp" scheme="https://lidong.me/tags/l2tp/"/>
    
      <category term="vpn" scheme="https://lidong.me/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>二维码生成服务</title>
    <link href="https://lidong.me/qrcode-generate-service/"/>
    <id>https://lidong.me/qrcode-generate-service/</id>
    <published>2018-03-22T21:50:23.000Z</published>
    <updated>2018-03-22T21:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>现成二维码生成器有很多，但是我还是自己弄了一个哈～</p><a id="more"></a><p>项目地址: <a href="https://api.oonnnoo.com/qr/" target="_blank" rel="noopener">https://api.oonnnoo.com/qr/</a></p><p>源码地址: <a href="https://github.com/oonnnoo/qrcode" target="_blank" rel="noopener">https://github.com/oonnnoo/qrcode</a></p><p><a href="https://api.oonnnoo.com/qr/qrcode" target="_blank" rel="noopener"><img src="https://api.oonnnoo.com/qr/qrcode" alt="二维码生成服务"></a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/3/22 21:50:23 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现成二维码生成器有很多，但是我还是自己弄了一个哈～&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="项目" scheme="https://lidong.me/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="qrcode" scheme="https://lidong.me/tags/qrcode/"/>
    
  </entry>
  
  <entry>
    <title>在 android 手机上共享代理 HTTP Proxy</title>
    <link href="https://lidong.me/android-share-http-proxy/"/>
    <id>https://lidong.me/android-share-http-proxy/</id>
    <published>2018-03-12T16:34:42.000Z</published>
    <updated>2018-03-12T16:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是自己搭建shadowsocks，访问外网，前不久都被block了，在手机上有很多免费的软件可用，于是想着通过手机共享上网。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>连接WIFI的安卓手机</li><li>Termux APP（其他类似终端APP应该也可以）</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>安装 NodeJS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure><p>安装proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g proxy</span><br></pre></td></tr></table></figure><p>开启proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy -p 8080</span><br></pre></td></tr></table></figure><blockquote><p>-p 指定端口号</p></blockquote><p>将 termux 切换到后台，然后该干嘛，干嘛去~~~</p><p>这时候，就可以在其他设备，将 HTTP Proxy 访问外网了，如电脑，连接到手机 ip:8080</p><blockquote><p>手机ip地址可以在手机中，通过 <code>系统设置</code> -&gt; <code>关于手机</code> -&gt; <code>状态</code> 查看，或者登录路由器查看。</p></blockquote><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/3/12 16:34:42 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都是自己搭建shadowsocks，访问外网，前不久都被block了，在手机上有很多免费的软件可用，于是想着通过手机共享上网。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="http" scheme="https://lidong.me/tags/http/"/>
    
      <category term="proxy" scheme="https://lidong.me/tags/proxy/"/>
    
      <category term="termux" scheme="https://lidong.me/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>docker 中 mysql 数据库导出导入</title>
    <link href="https://lidong.me/docker-mysql-export-import/"/>
    <id>https://lidong.me/docker-mysql-export-import/</id>
    <published>2018-02-07T21:24:55.000Z</published>
    <updated>2018-02-07T21:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为做 wordpress 的数据库备份，通过 docker 使用了 mysql 导入导出，记录一下与 mysql 导入导出的操作。</p><a id="more"></a><h2 id="1-导出"><a href="#1-导出" class="headerlink" title="1. 导出"></a>1. 导出</h2><h3 id="导出所有数据库"><a href="#导出所有数据库" class="headerlink" title="导出所有数据库"></a>导出所有数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> &#123;cxontainerID&#125; sh -c \</span></span><br><span class="line">  'exec mysqldump --all-databases -uroot -p "$MYSQL_ROOT_PASSWORD"' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /some/path/on/your/host/all-databases.sql</span></span><br></pre></td></tr></table></figure><h3 id="导出指定数据库"><a href="#导出指定数据库" class="headerlink" title="导出指定数据库"></a>导出指定数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> &#123;containerID or name&#125; sh -c \</span></span><br><span class="line">  'exec mysqldump --databases wordpress -uroot -p "$MYSQL_ROOT_PASSWORD"' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /some/path/on/your/host/wordpress.sql</span></span><br></pre></td></tr></table></figure><p>如导出指定容器ID为9244及指定数据库名 wordpress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> 9244 sh -c \</span></span><br><span class="line">  'exec mysqldump --databases wordpress -uroot -pmy-secret-pw' \</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> /var/backup/wordpress.sql</span></span><br></pre></td></tr></table></figure><h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2. 导入"></a>2. 导入</h2><h3 id="首先要创建一个container"><a href="#首先要创建一个container" class="headerlink" title="首先要创建一个container"></a>首先要创建一个container</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run --name some-mysql -v /var/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql</span></span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -i some-mysql mysql -uroot -pmy-secret-pw &amp;lt; /var/backup/wordpress.sql</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it some-mysql /bin/bash mysql -uroot -pmy-secret-pw</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> wordpress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>检查一下数据表。</p><p><a href="https://static.lidong.me/upload/images/Sk8gBSdUf.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/Sk8gBSdUf.png" alt=""></a></p><!-- <a href=""><img class="alignnone size-medium" src="https://static.lidong.me/upload/images/Sk8gBSdUf.png" /></a> --><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://jeeinn.com/2016/08/128/" target="_blank" rel="noopener">关于导入导出docker中的mysql数据库</a></li><li><a href="https://hub.docker.com/r/_/mysql/" target="_blank" rel="noopener">library/mysql - Docker Hub </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为做 wordpress 的数据库备份，通过 docker 使用了 mysql 导入导出，记录一下与 mysql 导入导出的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://lidong.me/tags/mysql/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>通过 formdata 上传文件</title>
    <link href="https://lidong.me/formdata-upload/"/>
    <id>https://lidong.me/formdata-upload/</id>
    <published>2018-01-28T00:00:18.000Z</published>
    <updated>2018-01-28T00:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常表单上传是通过form提交上传的文件的话，对form设置 <code>enctype:&#39;multipart/form-data&#39;</code> ，将文件和其他字段一起提交就好了，但是这只能导致页面刷新，嗯，这是老的做法。</p><a id="more"></a><p>现在可以使用new FormData</p><p class="codepen" data-height="500" data-theme-id="0" data-slug-hash="goVrJK" data-default-tab="js,result" data-user="oonnnoo" data-embed-version="2" data-pen-title="通过 formData 上传">See the Pen <a href="https://codepen.io/oonnnoo/pen/goVrJK/" target="_blank" rel="noopener">通过 formData 上传</a> by oonnnoo (<a href="https://codepen.io/oonnnoo" target="_blank" rel="noopener">@oonnnoo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/28 0:00:18 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常表单上传是通过form提交上传的文件的话，对form设置 &lt;code&gt;enctype:&amp;#39;multipart/form-data&amp;#39;&lt;/code&gt; ，将文件和其他字段一起提交就好了，但是这只能导致页面刷新，嗯，这是老的做法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="codepen" scheme="https://lidong.me/tags/codepen/"/>
    
      <category term="web" scheme="https://lidong.me/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>通过shell监控网页 无法访问就自动重启Docker</title>
    <link href="https://lidong.me/shell-monitor-web-restart-docker/"/>
    <id>https://lidong.me/shell-monitor-web-restart-docker/</id>
    <published>2018-01-25T21:32:41.000Z</published>
    <updated>2018-01-25T21:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，不知道是 MySQL Container 的问题，还是迁移到阿里云，阿里主机的问题，抑或网络爬虫，抓取频繁，挂掉了？反正隔个两天，CPU占用100%，MySQL Container运行出错，导致我的 Wordpress 无法访问。我了个擦。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>自身水平不行，排查不出问题，就来个简单粗暴的，直接自动重启docker。于是学着做了一个监控脚本，隔一段时间请求一次页面，访问不了就自动重启 Docker。仅仅重启一个 Container貌似也是不行的。不过现在这样粗暴的方式会导致所有的 Container 都会重启一次 。😂</p><p>因为我在启动 Container 时设置了 <code>restart：always</code>，所以重启 Docker 之后，Container 就会自动启动，就不用自己写脚本去控制了。</p><p>脚本大致流程是：每隔10分钟运行一次，访问网站，如果发现返回状态码不是200，直接重启docker，并记录监控日志、出错日志。哈哈，参考别人的。</p><div class="gist-oembed" data-gist="a4aa182bfff3abf2df7cfc5cc07db289.json"></div><p><a href="https://gist.github.com/a4aa182bfff3abf2df7cfc5cc07db289" target="_blank" rel="noopener">查看Gist</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/25 21:32:41 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1.<a href="https://www.cnblogs.com/ddxueyu/p/6209932.html" target="_blank" rel="noopener">linux上监控tomcat down掉后自动重启tomcat</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，不知道是 MySQL Container 的问题，还是迁移到阿里云，阿里主机的问题，抑或网络爬虫，抓取频繁，挂掉了？反正隔个两天，CPU占用100%，MySQL Container运行出错，导致我的 Wordpress 无法访问。我了个擦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="shell" scheme="https://lidong.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>安装 dropbox 同步备份主机数据</title>
    <link href="https://lidong.me/dropbox-linux-command-sync/"/>
    <id>https://lidong.me/dropbox-linux-command-sync/</id>
    <published>2018-01-22T02:45:39.000Z</published>
    <updated>2018-01-22T02:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前就是用dropbox同步备份了，没有记录。现在迁移主机，都不知道怎么操作了，重新整理记录一下。😓</p><a id="more"></a><p>操作很简单，Dropbox提供了文档和相关工具，这里记录一下，操作过程，中间一部分内容来自dropbox文档。</p><pre>环境：1.centos 7.02.阿里云香港（如果是土啬内主机，那就别用 Dropbox 了，瞎折腾）</pre><blockquote><p>如果之前没有注册过Dropbox，欢迎使用我的推荐码注册，使用后，我俩各多得500MB空间  <a href="https://db.tt/Mcf2xYeC" target="_blank" rel="noopener">https://db.tt/Mcf2xYeC</a></p></blockquote><h2 id="通过命令行安装-Dropbox"><a href="#通过命令行安装-Dropbox" class="headerlink" title="通过命令行安装 Dropbox"></a>通过命令行安装 Dropbox</h2><p>32-bit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86&quot; | tar xzf -</span><br></pre></td></tr></table></figure><p>64-bit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -</span><br></pre></td></tr></table></figure><p>接着，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure><p>首次在服务器上运行 Dropbox，系统会生成一个授权链接，浏览器打开链接登录账号，就可以将服务器中Dropbox与账号关联了。操作完成后，程序会在主目录中创建 Dropbox 文件夹。</p><p>下载这个 <a href="https://www.dropbox.com/download?dl=packages/dropbox.py" target="_blank" rel="noopener">Python 脚本</a>，可以通过命令行控制 Dropbox。</p><h2 id="准备同步"><a href="#准备同步" class="headerlink" title="准备同步"></a>准备同步</h2><h3 id="添加软链接"><a href="#添加软链接" class="headerlink" title="添加软链接"></a>添加软链接</h3><p>如果文件夹是已经同步过，务必在同步开始前创建文件夹软连接，以减少不必要的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 想要同步文件夹路径 dropbox同步盘的路径</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/www ~/Dropbox/www</span><br></pre></td></tr></table></figure><h3 id="添加shell别名"><a href="#添加shell别名" class="headerlink" title="添加shell别名"></a>添加shell别名</h3><p>可以设置成任意你喜欢的别名，我设置成 <code>drp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias drp=&apos;python ~/dropbox.py&apos;</span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp start</span><br></pre></td></tr></table></figure><h3 id="查看同步状态"><a href="#查看同步状态" class="headerlink" title="查看同步状态"></a>查看同步状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp status</span><br></pre></td></tr></table></figure><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp autostart</span><br></pre></td></tr></table></figure><h3 id="排除目录"><a href="#排除目录" class="headerlink" title="排除目录"></a>排除目录</h3><p>在开始开启同步后，可以尽快添加排除目录，毕竟不是所有文件都要同步到主机上。就不浪费空间和流量了。Dropbox不能在没有开始同步提前设置排除目录，这个不是太好，或许是python脚本的问题，没细看 🙂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drp exclude add Apps</span><br></pre></td></tr></table></figure><blockquote><p>我的完整排除目录查看 <a href="https://gist.github.com/ryanlid/secret" target="_blank" rel="noopener">secret gist</a>, 不公开的哈 🙂</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1.<a href="https://www.dropbox.com/zh_CN/install-linux" target="_blank" rel="noopener">linux 安装 Dropbox</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/22 2:45:39 首次发布</li></ol><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前就是用dropbox同步备份了，没有记录。现在迁移主机，都不知道怎么操作了，重新整理记录一下。😓&lt;/p&gt;
    
    </summary>
    
    
      <category term="dropbox" scheme="https://lidong.me/tags/dropbox/"/>
    
      <category term="备份" scheme="https://lidong.me/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Centos 安装 Docker</title>
    <link href="https://lidong.me/docker-centos-install/"/>
    <id>https://lidong.me/docker-centos-install/</id>
    <published>2018-01-20T12:53:10.000Z</published>
    <updated>2018-01-20T12:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为更换主机，重新部署环境，顺便整理一下文档 😄<br><a id="more"></a></p><blockquote><p>本文内容仅适用于 Centos7.X 安装 Docker EE，如果是其他操作系统，安装其他其他版本，请自行查看 Docker 公司提供的文档。</p></blockquote><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li><p>安装需要依赖包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></li><li><p>添加docker repository</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>（可选）开启 edge 或 test 仓库（repository）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --enable docker-ce-edge</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure><p> 通过 <code>--disable</code> 参数，禁用 edge 或 test 仓库，如：禁用 edge 仓库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --disable docker-ce-edge</span><br></pre></td></tr></table></figure></li><li><p>安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li><li><p>通过运行hello-world镜像，验证docker安装启动是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><p>上面全部操作的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo \</span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ol><li><p>删除docker</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br></pre></td></tr></table></figure></li><li><p>删除docker相关文件，这些文件在删除docker软件包的时候不会自动删除，包括 Images, containers, volumes 和 自定义的文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">Get Docker CE for CentOS</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为更换主机，重新部署环境，顺便整理一下文档 😄&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>图床搭建</title>
    <link href="https://lidong.me/upload-host/"/>
    <id>https://lidong.me/upload-host/</id>
    <published>2018-01-11T01:40:22.000Z</published>
    <updated>2018-01-11T01:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在需要贴图的时，上传图片都是用ftp上传，或者通过 Dropshare 这个好用的工具，但是局限性比较大。一直想搭建一个图片上传的工具，无奈拖延症晚期，一直没有弄，不过现在，终于弄了一个，现在功能超级简单，就是上传图片。</p><a id="more"></a><p><a href="https://github.com/oonnnoo/upload" target="_blank" rel="noopener">Github地址</a>, <a href="https://upload.oonnnoo.com/" target="_blank" rel="noopener">项目地址</a></p><p>预览：</p><iframe src="https://upload.lidong.me/" width="100%" height="300px"></iframe><p>UPDATE：</p><p>做完才两天，emmm. 被人上传了一张小黄图。于是就在页面底部加上一段声明，也是算是装13了 😄</p><p><img src="https://static.oonnnoo.com/upload/images/BJTYkvwrM.png" alt="upload 声明"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/11 1:40:22 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在需要贴图的时，上传图片都是用ftp上传，或者通过 Dropshare 这个好用的工具，但是局限性比较大。一直想搭建一个图片上传的工具，无奈拖延症晚期，一直没有弄，不过现在，终于弄了一个，现在功能超级简单，就是上传图片。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://lidong.me/tags/nodejs/"/>
    
      <category term="图片上传" scheme="https://lidong.me/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>重新配置WordPress</title>
    <link href="https://lidong.me/second-set-wordpress/"/>
    <id>https://lidong.me/second-set-wordpress/</id>
    <published>2018-01-10T01:25:24.000Z</published>
    <updated>2018-01-10T01:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看上一篇内容：<a href="https://lidong.me/blog/install-wordpress-with-docker/">使用Docker安装WordPress</a></p><p>不到黄河不死心，早先就想把Wordpress部署在子目录，前几天把捣鼓了差不多一天都没弄好，今天有捣鼓了大约三四个小时，如您所见，终于弄成现在这个样子了。</p><p><span id="more-143"></span></p><p>这次主要做了：</p><ul><li>将Wordpress部署在了子目录。</li><li>还是用回原来的域名，<a href="https://lidong.me">https://lidong.me</a> 这个域名就专门用来写点文章，整理资料，用别的域名捣鼓其他东西吧。</li></ul><h2 id="重点配置："><a href="#重点配置：" class="headerlink" title="重点配置："></a>重点配置：</h2><h3 id="1-修改nginx-conf"><a href="#1-修改nginx-conf" class="headerlink" title="1.修改nginx.conf"></a>1.修改nginx.conf</h3><p>在 <code>nginx.conf</code>中添加下面这段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /wordpress/ &#123;</span><br><span class="line">  proxy_set_header Host $host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">  proxy_pass http://wordpress:80/; # &amp;lt;-- mind the trailing slash!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整配置查看<a href="https://github.com/ryanlid/nginx-conf/blob/b6d3ecff36727930978676dbd9ed93e6d9c31f08/www.lidong.me.conf#L24-L30" target="_blank" rel="noopener">Github</a></p><h3 id="2-修改-wp-config-php"><a href="#2-修改-wp-config-php" class="headerlink" title="2.修改 wp-config.php"></a>2.修改 wp-config.php</h3><p>在 <code>wp-config.php</code> 中添加下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 写上篇文章就加上了，为了HTTPS访问</span><br><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br><span class="line"></span><br><span class="line">// 定义网站域名，在Wordpress后台修改或数据库修改也可以</span><br><span class="line">define(&apos;WP_HOME&apos;, &apos;https://lidong.me/wordpress&apos;);</span><br><span class="line">define(&apos;WP_SITEURL&apos;, &apos;https://lidong.me/wordpress&apos;);</span><br><span class="line"></span><br><span class="line">// 修复后台链接错误</span><br><span class="line">$_SERVER[&apos;REQUEST_URI&apos;] = str_replace(&quot;/wp-admin/&quot;, &quot;/wordpress/wp-admin/&quot;, $_SERVER[&apos;REQUEST_URI&apos;]);</span><br></pre></td></tr></table></figure><h3 id="3-修改-htaccess"><a href="#3-修改-htaccess" class="headerlink" title="3.修改 .htaccess"></a>3.修改 .htaccess</h3><p>完成上面的配置，如果使用固定链接，文章详情可能无法访问，出现 internal server error 的500错误，查看日志提示 <code>Request exceeded the limit of 10 internal redirects due to probable configuration error. Use &#39;LimitInternalRecursion&#39; to increase the limit if necessary.</code> 大概意思是重定向次数太多。修改 <code>.htaccess</code> ，找到一个解决办法，内容在gist上，用作者提供的new <code>.htaccess</code> 替换原来就可以。</p><div class="gist-oembed" data-gist="effa1ee0f20ab9b8886a209c95b719c0.json"></div><p>⚠️ 注意：每次在Wordpress的设置&#8211;常规选项等页面，修改保存操作，Wordpress都会自动修改 <code>.htaccess</code> 的文件，还原我们设置，导致页面访问出错。所以修改了设置后，要注意检查页面是否访问正常～～</p><p><small>别问为什么，我也不知道为什么[摊手]</small>，查看原来作者的 <a href="https://gist.github.com/JustThomas/141ebe0764d43188d4f2" target="_blank" rel="noopener">Gist</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/10 1:25:24 首次发布</li></ol><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol><li><a href="https://wordpress.stackexchange.com/questions/191747/how-can-i-have-nginx-serve-wordpress-at-blog" target="_blank" rel="noopener">https://wordpress.stackexchange.com/questions/191747/how-can-i-have-nginx-serve-wordpress-at-blog</a></li><li><a href="https://yuji.wordpress.com/2010/03/08/nginx-wordpress-proxy-subdirectory-to-wordpress-subdomain/" target="_blank" rel="noopener">https://yuji.wordpress.com/2010/03/08/nginx-wordpress-proxy-subdirectory-to-wordpress-subdomain/</a></li><li><a href="https://docs.j7k6.org/wordpress-nginx-proxy-subdirectory/" target="_blank" rel="noopener">https://docs.j7k6.org/wordpress-nginx-proxy-subdirectory/</a></li><li><a href="http://www.ur-ban.com/2015/07/27/nginx-proxy_pass-wordpress-in-a-sub-directory/" target="_blank" rel="noopener">http://www.ur-ban.com/2015/07/27/nginx-proxy_pass-wordpress-in-a-sub-directory/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看上一篇内容：&lt;a href=&quot;https://lidong.me/blog/install-wordpress-with-docker/&quot;&gt;使用Docker安装WordPress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不到黄河不死心，早先就想把Wordpress部署在子目录，前几天把捣
      
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="wordpress" scheme="https://lidong.me/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>关于比特币</title>
    <link href="https://lidong.me/bitcoin/"/>
    <id>https://lidong.me/bitcoin/</id>
    <published>2018-01-02T22:49:05.000Z</published>
    <updated>2018-01-02T22:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉比特币现在很火（嗯，好像已经火过了～），作为一个自认为有点极客的人，却一直没有参与到这项极客活动中来，现在上车了。</p><a id="more"></a><p>早先通过一个APP，看一个广告500聪，得到了35000聪，记得当时也是一个比特币上涨的日子，当时APP中还有5000聪没有支付，老板跑路了。35000聪兑换成人民币大约2元（1比特币大约5K多RMB），一直也没有管它的，现在算了一下兑换可以兑换35元(5.7美元)，增值十多倍了。</p><p><a href="https://static.lidong.me/upload/images/d5ERqGLRm.png" target="_blank" rel="noopener"><img src="https://static.lidong.me/upload/images/d5ERqGLRm.png" alt="bitcoin"></a></p><p>刚刚过去的半年，比特币那叫一个疯狂，虽然没有特别关注，但是一些资讯网站隔几天就发文比特币6000刀，8000刀，10000刀。。。然鹅没有钱，就没关注所谓的行情。这两天休息没事，不小心就被感化了，关注 and 上车了，想想“所谓的经济啊、金融啊不就是把钱换来换去的，换的多就变成了很有钱的样子”。自己不把钱拿去换来换去怎么能像有钱人?。</p><p>昨天注册账号，今天开始买币，本来想着只买500元玩玩，一不小心就投了3500元，交易6笔已经变现300元。之前没参与过交易所的交易，不知道交易所怎么搞的，我注册的这个平台是场外交易（宣传这么说的），具体操作是平台上交易比特币，然后支付宝或微信等方式付款，嗯，就像淘宝购物，只不过是在网上买钱。买钱！。。貌似整个中国区都禁止比特币人民币交易，但是机智的人民推出场外交易的平台：线上购买，然后支付宝或微信转账。然后进行着事实上的人民币与比特币的交易。不过价格比交易所的价格高一些，高百分之十几。</p><h2 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h2><p>经过几笔交易觉得，真是城会玩系列，总结一下完全是一场心理游戏，赚钱就是：低买高卖，投机倒把，买了卖，卖了买，想赚钱，找准时间上车，也找准时间下车，并没看到实际价值。我没买过股票什么的，不知道股票交易是不是也是这样的。</p><p>不过个人还是看好区块链这个技术，比特币是区块链的代表，要买就买比特币，其他的就算了，纯粹是无中生有，哪有每个人都发行一种自己的货币的说法。虽然现在比特币的价格相比最高点的跌去一半了，但相比去年的价格现在挺高的，不知道什么时候还会跌下去了，但愿自己不当接盘侠。</p><p>2018.01.04 Update:</p><p>每次交易都要支付手续费，要在搜索区域显示，需要缴纳广告费，余额不足的不显示，额真是万恶的资本主义！（一开始我以为只要支付手续费，公告中称最近一个月免广告费，我以为现阶段什么都不要呢，买家的钱全部到卖家手里，嗯看来还是 too young ?）</p><p>不过邀请好友是有奖励。如果你想参与到比特币交易中，欢迎使用我的邀请链接，<a href="https://www.oonnnoo.com/static/ref.html#OTCBTC" target="_blank" rel="noopener">查看我的邀请链接</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/2 22:49:05 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉比特币现在很火（嗯，好像已经火过了～），作为一个自认为有点极客的人，却一直没有参与到这项极客活动中来，现在上车了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="比特币" scheme="https://lidong.me/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
      <category term="bitcoin" scheme="https://lidong.me/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 安装 WordPress</title>
    <link href="https://lidong.me/install-wordpress-with-docker/"/>
    <id>https://lidong.me/install-wordpress-with-docker/</id>
    <published>2018-01-01T12:48:54.000Z</published>
    <updated>2018-01-01T12:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.lidong.me/upload/images/zgVFGyB2j.png" alt="docker-wordpress.png"></p><p>今天是元旦，首先要祝自己、祝大家元旦快乐?。</p><p>好久没有写东西了，新年新开始，从今天开始写点东西吧。</p><p>昨天刚把Wordpress装上了，记录一些安装过程。毕竟不是像原来那样常规的安装方式。</p><a id="more"></a><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>通过docker安装，docker-compose 放在gist上，其中包含一些其他 services，请自行忽略</p><script src="https://gist.github.com/1209a07f07b718854e5c9e7bc2589ecb.js"></script><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1.通过 nginx 转发 wordpress</p><p>因为做了多个services，所以不能直接将宿主机的80端口或443端给wordpress，一开始我不知道怎么弄，后来发现可以直接转到通过反向代理转到<code>http://wordpress:80</code></p><p>参考<a href="https://github.com/oonnnoo/nginx-conf/blob/63e574ce73c7adcf11c26e0a746feb6452f2eefb/worpdress.oonnnoo.com.conf#L10" target="_blank" rel="noopener">GitHub链接</a></p><p>2.SSL证书错误</p><p>因为1中使用http，80端口访问的，也就是从nginx container到wordpress container中访问是通过HTTP访问的，由于wordpress container中没有配置SSL证书，目前也只能这样了。正因为这样，wordpress中检测不到https访问，所以资源链接一律返回HTTP，到浏览器一片红。</p><p>找到一个解决办法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ($_SERVER[&apos;HTTP_X_FORWARDED_PROTO&apos;] === &apos;https&apos;)</span><br><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line"></span><br><span class="line">if (isset($_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;])) &#123;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的配置，简单粗暴，不带判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[&apos;HTTPS&apos;] = &apos;1&apos;;</span><br><span class="line">$_SERVER[&apos;HTTP_HOST&apos;] = $_SERVER[&apos;HTTP_X_FORWARDED_HOST&apos;];</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://github.com/docker-library/wordpress/issues/251#issuecomment-345687824" target="_blank" rel="noopener">https://github.com/docker-library/wordpress/issues/251#issuecomment-345687824</a></p><p>3.数据库保存</p><p>目前将数据保存在mysql container中，对mysql image还没有深入研究，毕竟经常会 <code>docker-compose up -d --force-recreate</code> ，数据保存在container，多危险。这是一个 <code>//TODO</code> 的事情。</p><p>2018.01.10 update:</p><p><a href="https://lidong.me/wordpress/2018/second-set-wordpress/">重新配置WordPress</a></p><p>2018.03.24 update:</p><p>4.客户端IP获取错误</p><p>由于请求是通过nginx转发了一次，Wordpress获取到的客户端IP是docker传过去的形似 <code>172.18.0.x</code> 的IP地址，在评论中显示作者IP那就是 <code>172.18.0.x</code>了，要想拿到真实的客户端IP，可以这样做：</p><p>在nginx配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header  X-Real-IP          $remote_addr;</span><br></pre></td></tr></table></figure><p>在Wordpress中 <code>wp-config.php</code> 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (isset($_SERVER[&apos;HTTP_X_REAL_IP&apos;])) &#123;</span><br><span class="line">    $_SERVER[&apos;REMOTE_ADDR&apos;] = $_SERVER[&apos;HTTP_X_REAL_IP&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2018/1/1 12:48:54 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://static.lidong.me/upload/images/zgVFGyB2j.png&quot; alt=&quot;docker-wordpress.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天是元旦，首先要祝自己、祝大家元旦快乐?。&lt;/p&gt;
&lt;p&gt;好久没有写东西了，新年新开始，从今天开始写点东西吧。&lt;/p&gt;
&lt;p&gt;昨天刚把Wordpress装上了，记录一些安装过程。毕竟不是像原来那样常规的安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
      <category term="wordpress" scheme="https://lidong.me/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>使用 VNC</title>
    <link href="https://lidong.me/use-vnc/"/>
    <id>https://lidong.me/use-vnc/</id>
    <published>2017-08-06T00:14:19.000Z</published>
    <updated>2017-08-06T00:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-VNC-服务端"><a href="#安装-VNC-服务端" class="headerlink" title="安装 VNC 服务端"></a>安装 VNC 服务端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><p>启动 VNC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure></p><h3 id="设置-VNC-服务端"><a href="#设置-VNC-服务端" class="headerlink" title="设置 VNC 服务端"></a>设置 VNC 服务端</h3><p>第一次启动 VNC，需要设置VNC的密码，可选设置一个可供其他人浏览只读(read-only)密码，登入的密码会加密后保存在 <code>~/.vnc/passwd</code> 文件中。</p><h2 id="安装-VNC-客户端"><a href="#安装-VNC-客户端" class="headerlink" title="安装 VNC 客户端"></a>安装 VNC 客户端</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>可以使用自带客户端（屏幕共享）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/CoreServices/Applications/Screen Sharing.app</span><br></pre></td></tr></table></figure><p>可以通过spotlight 或 alfred 的搜索 Screen Sharing (屏幕共享)打开，使用时，输入 <code>ip:port</code> 进行连接</p><p><img src="https://static.lidong.me/img/blog/t9IaxaqawMpf.png" alt="MacOS屏幕共享"></p><h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>可以使用 VNC Viewer（Chrome App）<br><a href="https://chrome.google.com/webstore/detail/iabmpiboiopbgfabjmgeedhcmjenhbla" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/iabmpiboiopbgfabjmgeedhcmjenhbla</a></p><p>在服务端启动时候，默认创建的用户为1，开放的端口为5901</p><p>客户端中，输入 <code>ip:1</code> 或 <code>ip:5901</code> 或 <code>ip::5901</code>连接 VNC，输入密码确认连接。</p><p>VNC Viewer 登录页<br><img src="https://static.lidong.me/img/blog/5WEtijRrqiUw.png" alt="VNC Viewer 截屏"></p><p>使用VNC登录 raspberry Pi<br><img src="https://static.lidong.me/img/blog/7yO0KhNoyl6U.png" alt="使用vnc登录 raspberry Pi"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>1.2017-08-06 首次发布</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-VNC-服务端&quot;&gt;&lt;a href=&quot;#安装-VNC-服务端&quot; class=&quot;headerlink&quot; title=&quot;安装 VNC 服务端&quot;&gt;&lt;/a&gt;安装 VNC 服务端&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
      <category term="vnc" scheme="https://lidong.me/tags/vnc/"/>
    
  </entry>
  
  <entry>
    <title>通过adb命令操作android设备</title>
    <link href="https://lidong.me/use-adb-command/"/>
    <id>https://lidong.me/use-adb-command/</id>
    <published>2017-08-05T21:59:44.000Z</published>
    <updated>2017-08-05T21:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为前些天，手机掉地上，摔碎了屏幕，现在手机是半身不遂(下半屏触摸失效)😢</p><p>搜索一下，发现可以通过android的调试工具来触发点击事件的，而且不仅仅是触发点击事件功能。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载-platform-tools"><a href="#下载-platform-tools" class="headerlink" title="下载 platform tools"></a>下载 platform tools</h3><p>要通过电脑来操作android终端，首先需要下载adb工具</p><p>下载页面：</p><p><a href="https://developer.android.com/studio/releases/platform-tools.html" target="_blank" rel="noopener">https://developer.android.com/studio/releases/platform-tools.html</a></p><p>下载链接：</p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-darwin.zip</a></p><p><a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/platform-tools-latest-linux.zip</a></p><p>MacOS可以通过brew来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><h3 id="下载安装手机驱动"><a href="#下载安装手机驱动" class="headerlink" title="下载安装手机驱动"></a>下载安装手机驱动</h3><p>这个不同手机驱动不同，要到各自手机厂商去下载，或者要简单一些，各种手机助手随便下载一个，会自动帮你把需要安装的手机驱动安装完成。</p><h3 id="开启手机调试"><a href="#开启手机调试" class="headerlink" title="开启手机调试"></a>开启手机调试</h3><p>用过手机助手都懂，不解释</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>查看设备连接情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>进入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>点击坐标（500，1600）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell tap 500，1600</span><br></pre></td></tr></table></figure><p>输入字符abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>屏幕截图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap /sdcard/screen.png</span><br></pre></td></tr></table></figure><p>录制视频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure><p>安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install path_to_apk</span><br></pre></td></tr></table></figure><p>从设备复制文件或目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull remote local</span><br></pre></td></tr></table></figure><p>将文件目录复制到设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push local remote  // 比如：adb push foo.txt /sdcard/foo.txt</span><br></pre></td></tr></table></figure><p>重启adb服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-08-05 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>Android 调试桥：<a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为前些天，手机掉地上，摔碎了屏幕，现在手机是半身不遂(下半屏触摸失效)😢&lt;/p&gt;
&lt;p&gt;搜索一下，发现可以通过android的调试工具来触发点击事件的，而且不仅仅是触发点击事件功能。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="android" scheme="https://lidong.me/tags/android/"/>
    
      <category term="adb" scheme="https://lidong.me/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>使用 Certbot工具，签发 Let&#39;s Encrypt 证书</title>
    <link href="https://lidong.me/certbot-letsencrypt/"/>
    <id>https://lidong.me/certbot-letsencrypt/</id>
    <published>2017-06-22T21:35:49.000Z</published>
    <updated>2017-06-22T21:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前是使用 <a href="https://github.com/diafygi/acme-tiny" target="_blank" rel="noopener">acme-tiny</a>获取 Let’s Encrypt 证书，但是这次弄死活就弄不上，就尝试一下用官方的工具了，用起来也很方便。<a href="https://certbot.eff.org/" target="_blank" rel="noopener">官方文档</a>写的已经很详细了。</p><p>我记录一下方便下次～🤗</p><h2 id="安装certbot工具"><a href="#安装certbot工具" class="headerlink" title="安装certbot工具"></a>安装certbot工具</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install yum-utils</span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line">sudo yum install certbot</span><br></pre></td></tr></table></figure><h2 id="配置用于验证域名访问路径"><a href="#配置用于验证域名访问路径" class="headerlink" title="配置用于验证域名访问路径"></a>配置用于验证域名访问路径</h2><p>在Nginx配置文件 <code>server{}</code> 中添加下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下面配置的作用：</span><br><span class="line"># certbot会在 /var/www/challenges/ 中生称一个文件(xxx)，</span><br><span class="line"># Let&apos;s Encrypt 通过访问 http://lidong.me/.well-known/acme-challenge/xxx 来验证域名的归属</span><br><span class="line"></span><br><span class="line">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">  root      /var/www/challenges/;</span><br><span class="line">  try_files $uri =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --webroot 使用webroot的插件方式（还有其他插件模式，详情请看官方文档～）</span></span><br><span class="line"><span class="comment"># -w 指定用于验证文件保存路径，确保文件可以通过域名访问到。</span></span><br><span class="line"><span class="comment"># -d 指定签发证书的域名</span></span><br><span class="line">sudo certbot certonly --webroot -w /var/www/challenges \</span><br><span class="line">-d lidong.me -d www.lidong.me</span><br></pre></td></tr></table></figure><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>如果一切正常的话，获取后证书保存在到 <code>/etc/letsencrypt/</code> 中，通过 <code>/etc/letsencrypt/live/lidong.me/xxxx</code> 就可以使用刚刚获取的证书了。</p><p>我的设置：在Nginx的<code>server{}</code>中添加下面内容，用于指定SSL证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate      /etc/letsencrypt/live/lidong.me/fullchain.pem;</span><br><span class="line">ssl_certificate_key  /etc/letsencrypt/live/lidong.me/privkey.pem;</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-06-22 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://certbot.eff.org" target="_blank" rel="noopener">Let’s Encrypt</a></li><li><a href="https://github.com/OOnnnOO/nginx-conf" target="_blank" rel="noopener">我的nginx配置信息</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前是使用 &lt;a href=&quot;https://github.com/diafygi/acme-tiny&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;acme-tiny&lt;/a&gt;获取 Let’s Encrypt 证书，但是这次弄死活就弄不上，就尝试一下用官方
      
    
    </summary>
    
    
      <category term="https" scheme="https://lidong.me/tags/https/"/>
    
      <category term="server" scheme="https://lidong.me/tags/server/"/>
    
      <category term="letsencrypt" scheme="https://lidong.me/tags/letsencrypt/"/>
    
  </entry>
  
  <entry>
    <title>使用docker部署</title>
    <link href="https://lidong.me/deploy-by-docker/"/>
    <id>https://lidong.me/deploy-by-docker/</id>
    <published>2017-06-22T07:56:10.000Z</published>
    <updated>2017-06-22T07:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-Container"><a href="#PHP-Container" class="headerlink" title="PHP Container"></a>PHP Container</h2><p>负责处理php程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --name php \</span><br><span class="line">-v /var/www/file:/var/www/html \</span><br><span class="line">php:7.1-fpm</span><br></pre></td></tr></table></figure><blockquote><p>注意在这里有坑，因为映射的目录路径不一致导，致与Nginx搭配时，文件读取错误，出现F。目前的做法是在nginx配置文件中单独设置，后期想想有没有好的方法再调整</p></blockquote><h2 id="Nginx-Container"><a href="#Nginx-Container" class="headerlink" title="Nginx Container"></a>Nginx Container</h2><p>负责静态文件处理静态文件及对其他程序的转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name site -p 80:80 -p 443:443 \</span><br><span class="line">-v /var/www:/var/www \</span><br><span class="line">-v /etc/nginx/conf.d:/usr/local/nginx/conf.d \</span><br><span class="line">-v /var/log/nginx:/usr/local/nginx/logs \</span><br><span class="line">-v /etc/letsencrypt:/etc/letsencrypt \</span><br><span class="line">onnno/nginx</span><br></pre></td></tr></table></figure><p>各 Volume 作用，请查看<a href="https://github.com/OOnnnOO/docker-nginx" target="_blank" rel="noopener">README.md</a>及<a href="https://github.com/OOnnnOO/docker-nginx/blob/master/Dockerfile" target="_blank" rel="noopener">dockerfile</a></p><p><a href="https://github.com/OOnnnOO/nginx-conf" target="_blank" rel="noopener">https://github.com/OOnnnOO/nginx-conf</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-06-22 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP-Container&quot;&gt;&lt;a href=&quot;#PHP-Container&quot; class=&quot;headerlink&quot; title=&quot;PHP Container&quot;&gt;&lt;/a&gt;PHP Container&lt;/h2&gt;&lt;p&gt;负责处理php程序&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
      <category term="php" scheme="https://lidong.me/tags/php/"/>
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>初始服务器设置</title>
    <link href="https://lidong.me/initial-server-setup/"/>
    <id>https://lidong.me/initial-server-setup/</id>
    <published>2017-06-20T00:15:00.000Z</published>
    <updated>2017-06-20T00:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><blockquote><p>请将下面提到dong替换成你自己的用户名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">adduser dong</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码</span></span><br><span class="line">passwd dong</span><br></pre></td></tr></table></figure><blockquote><p>添加用户还有另一种方法</p><p>在centos7系统中会创建用户的home目录，但在ubuntu17.10系统不会创建用户的home目录(其他版本请自测)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd dong</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="添加root用户权限"><a href="#添加root用户权限" class="headerlink" title="添加root用户权限"></a>添加root用户权限</h2><blockquote><p>强烈建议不要使用修改<code>/etc/sudoers</code>的方法，一旦修改出错，后果很严重</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG sudo dong (ubuntu)</span><br><span class="line">usermod -aG wheel dong (centos)</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：</p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="noopener">How To Create a Sudo User on CentOS</a></p><p><a href="https://askubuntu.com/questions/7477/how-can-i-add-a-new-user-as-sudoer-using-the-command-line" target="_blank" rel="noopener">How can I add a new user as sudoer using the command line</a> </p></blockquote><h2 id="设置使用ssh-key远程登录"><a href="#设置使用ssh-key远程登录" class="headerlink" title="设置使用ssh-key远程登录"></a>设置使用ssh-key远程登录</h2><p>如果本地机器是MacOS系统或Linux系统，可以使用<code>ssh-copy-id</code>快速导入将公钥远程主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub user@ip</span><br></pre></td></tr></table></figure><p>如果本地是Windows系统，请参考 <a href="https://lidong.me/blog/ssh-key/#拷贝公钥到远程主机">https://lidong.me/blog/ssh-key/#拷贝公钥到远程主机</a></p><h2 id="调整ssh远程登录的设置"><a href="#调整ssh远程登录的设置" class="headerlink" title="调整ssh远程登录的设置"></a>调整ssh远程登录的设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure><p>修改配置文件中下面字段内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes  //允许使用基于密钥认证的方式登陆</span><br><span class="line">PasswordAuthentication no //禁止使用基于口令认证的方式登陆</span><br><span class="line">PermitRootLogin no        //禁止root用户远程登录</span><br></pre></td></tr></table></figure><p>重启sshd</p><blockquote><p>在重启sshd之前务必确保密钥登陆的可用，否则重启sshd之后可能无法远程登陆！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload sshd</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-06-20 首次发布</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请将下面提到dong替换成你自己的用户名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="linux" scheme="https://lidong.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>curl</title>
    <link href="https://lidong.me/curl/"/>
    <id>https://lidong.me/curl/</id>
    <published>2017-05-09T22:53:07.000Z</published>
    <updated>2017-05-09T22:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>显示输出内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://example.com</span><br></pre></td></tr></table></figure><p><code>-i</code> 输出响应头信息和内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://example.com</span><br></pre></td></tr></table></figure><p><code>--head</code> <code>-I</code> 输出响应头信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --head http://example.com</span><br><span class="line">curl -I http://example.com</span><br></pre></td></tr></table></figure><p><code>-o</code> 输出内容到文件，另存为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://example.com/hello.txt -o hello.txt</span><br></pre></td></tr></table></figure><p><code>-O</code> 输出内容到文件，保持原文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o http://example.com /hello.txt</span><br></pre></td></tr></table></figure><p><code>-d</code> post请求中的data</p><p>post请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d &quot;title=hello&amp;&amp;body=hello world&quot; http://</span><br></pre></td></tr></table></figure><p><code>-X</code> 设置请求方式</p><p>put请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X put -d &quot;title=hello&amp;&amp;body=hello world&quot; http://</span><br></pre></td></tr></table></figure><p><code>-L</code>  跟踪跳转（Follow redirects）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://google.com</span><br><span class="line">curl -L http://google.com</span><br></pre></td></tr></table></figure><p><code>-u</code> 上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u user@example.com:123456 -T hello.txt ftp://ftp.expample.com</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u user@example.com:123456 -o hello.txt ftp://ftp.expample.com/hello.txt</span><br></pre></td></tr></table></figure><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-05-09 首次发布</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.youtube.com/watch?v=7XUibDYw4mc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7XUibDYw4mc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令参数&quot;&gt;&lt;a href=&quot;#命令参数&quot; class=&quot;headerlink&quot; title=&quot;命令参数&quot;&gt;&lt;/a&gt;命令参数&lt;/h2&gt;&lt;p&gt;显示输出内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="curl" scheme="https://lidong.me/tags/curl/"/>
    
      <category term="命令" scheme="https://lidong.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>反向代理apt镜像</title>
    <link href="https://lidong.me/mirrors-reverse-proxy/"/>
    <id>https://lidong.me/mirrors-reverse-proxy/</id>
    <published>2017-05-08T00:22:17.000Z</published>
    <updated>2017-06-30T01:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过apt镜像，可以快速的安装软件包，但由于部分镜像地址直接访问有困难，所以我对这些镜像地址使用nginx搭建了一个反向代理。如需使用，请修改 <code>/etc/apt/sources.list.d/</code> 中对应文件中URL。</p><a id="more"></a><p>虽然我是为了方便在树莓派上安装而搭建反向代理，但大多数镜像地址是可以安装所有的版本的相关软件包，需要使用请自行尝试，更多信息 <a href="https://apt.proxy.oonnnoo.com/" target="_blank" rel="noopener">👇戳这里</a>。如有疑问可以邮件联系我  <img src="https://static.lidong.me/img/email-x28.png" alt="email"></p><h2 id="镜像地址替换"><a href="#镜像地址替换" class="headerlink" title="镜像地址替换"></a>镜像地址替换</h2><p> <code>#</code> 开头为为注释内容，是原地址，</p><ul><li><p>docker</p>  <figure class="highlight plain"><figcaption><span>docker.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb [arch=armhf] https://apt.proxy.oonnnoo.com/docker/repo raspbian-jessie main</span><br><span class="line">#deb [arch=armhf] https://apt.dockerproject.org/repo raspbian-jessie main</span><br></pre></td></tr></table></figure></li><li><p>gitlab</p>  <figure class="highlight plain"><figcaption><span>gitlab_raspberry-pi2.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://apt.proxy.oonnnoo.com/gitlab/raspberry-pi2/raspbian/ jessie main</span><br><span class="line">deb-src https://apt.proxy.oonnnoo.com/gitlab/raspberry-pi2/raspbian/ jessie main</span><br><span class="line">#deb https://packages.gitlab.com/gitlab/raspberry-pi2/raspbian/ jessie main</span><br><span class="line">#deb-src https://packages.gitlab.com/gitlab/raspberry-pi2/raspbian/ jessie main</span><br></pre></td></tr></table></figure></li><li><p>syncthing</p>  <figure class="highlight plain"><figcaption><span>syncthing-release.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://apt.proxy.oonnnoo.com/syncthing/ syncthing release</span><br><span class="line">#deb http://apt.syncthing.net/ syncthing release</span><br></pre></td></tr></table></figure></li><li><p>megasync</p>  <figure class="highlight plain"><figcaption><span>megasync.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb https://apt.proxy.oonnnoo.com/mega/linux/MEGAsync/Raspbian_8.0/ ./</span><br><span class="line">#deb https://mega.nz/linux/MEGAsync/Raspbian_8.0/ ./</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2017-05-08 首次发布</li><li>2017-06-30 更换 mega 代理目录名称</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过apt镜像，可以快速的安装软件包，但由于部分镜像地址直接访问有困难，所以我对这些镜像地址使用nginx搭建了一个反向代理。如需使用，请修改 &lt;code&gt;/etc/apt/sources.list.d/&lt;/code&gt; 中对应文件中URL。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
      <category term="代理" scheme="https://lidong.me/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="镜像" scheme="https://lidong.me/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>创建只有gh-pages分支github仓库</title>
    <link href="https://lidong.me/github-gh-pages/"/>
    <id>https://lidong.me/github-gh-pages/</id>
    <published>2017-03-19T14:47:59.000Z</published>
    <updated>2017-03-19T14:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时项目只需要使用gh-pages分支，并不要master分支<br><a id="more"></a></p><h2 id="创建-只有gh-pages分支"><a href="#创建-只有gh-pages分支" class="headerlink" title="创建 只有gh-pages分支"></a>创建 只有gh-pages分支</h2><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建 gh-pages 分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitcheckout --orphan gh-pages</span><br></pre></td></tr></table></figure><p>添加文件至暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p>添加远程地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:username/project.git</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jianshu.com/p/2352c5a6f229" target="_blank" rel="noopener">在github上建立gh-pages分支</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时项目只需要使用gh-pages分支，并不要master分支&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx安装、升级</title>
    <link href="https://lidong.me/nginx/"/>
    <id>https://lidong.me/nginx/</id>
    <published>2017-03-18T01:39:34.000Z</published>
    <updated>2017-03-18T01:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install pcre-devel</span><br><span class="line">sudo yum -y install zlib-devel</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="下载openssl"><a href="#下载openssl" class="headerlink" title="下载openssl"></a>下载openssl</h3><p>使用最新版的openssl对nginx进行编译，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://www.openssl.org/source/openssl-1.0.2k.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxf openssl-1.0.2k.tar.gz</span><br><span class="line">mv openssl-1.0.2k/ openssl</span><br></pre></td></tr></table></figure><h3 id="下载ngx-http-substitutions-filter-module"><a href="#下载ngx-http-substitutions-filter-module" class="headerlink" title="下载ngx_http_substitutions_filter_module"></a>下载ngx_http_substitutions_filter_module</h3><p>用于反向代理中的字符替换(如果nginx不用于反向代理，可选)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://github.com/yaoweibin/ngx_http_substitutions_filter_module/archive/master.zip</span><br><span class="line"></span><br><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure><p>解压之后文件夹为 <code>ngx_http_substitutions_filter_module-master</code></p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://nginx.org/download/nginx-1.11.10.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.11.10/</span><br><span class="line">./configure --with-http_v2_module --with-http_ssl_module --with-openssl=./../openssl/ --add-module=./../ngx_http_substitutions_filter_module-master/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>——分割线—–(如升级安装，会用到)</p><h2 id="升级安装"><a href="#升级安装" class="headerlink" title="升级安装"></a>升级安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>同上</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>同上（去掉最后一步，<code>make install</code> ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.11.10/</span><br><span class="line">./configure --with-http_v2_module --with-http_ssl_module --with-openssl=./../openssl/ --add-module=./../ngx_http_substitutions_filter_module-master/</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>重命名保存进程号的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span><br></pre></td></tr></table></figure><p>复制编译后的 <code>objs/</code>目录下的 <code>nginx</code> 到 <code>sbin</code> 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure><p>测试复制文件及配置文件的是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><p>让nginx把nginx.pid文件修改成nginx.pid.oldbin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`(发送平滑升级信号将旧的nginx.pid文件添加后缀nginx.pid.oldbin)</span><br></pre></td></tr></table></figure><p>停止老版本运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo kill  -WINCH(平缓停止worker process) `cat /usr/local/nginx/log/nginx.pid.oldbin</span><br><span class="line">sudo kill -QUIT `cat /usr/local/nginx／log/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><p>升级完成了，最后在看一下升级后的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -v</span><br><span class="line">// nginx: nginx version: nginx/1.11.10</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/u010391029/article/details/48658399" target="_blank" rel="noopener">nginx之平滑升级详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;依赖安装&quot;&gt;&lt;a href=&quot;#依赖安装&quot; class=&quot;headerlink&quot; title=&quot;依赖安装&quot;&gt;&lt;/a&gt;依赖安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum -y install pcre-devel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum -y install zlib-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>webpack 笔记</title>
    <link href="https://lidong.me/webpack-notes/"/>
    <id>https://lidong.me/webpack-notes/</id>
    <published>2017-03-14T23:56:09.000Z</published>
    <updated>2017-03-14T23:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>特点：<br>静态资源<br>支持导入第三方工具<br>支持代码分割<br>支持模块热更新<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.先全局安装webpack，再在项目目录安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure><p>项目目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><p>直接使用webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack hello.js hello.bundle.js</span><br></pre></td></tr></table></figure><h2 id="简单示例使用"><a href="#简单示例使用" class="headerlink" title="简单示例使用"></a>简单示例使用</h2><h3 id="安装必要的loader"><a href="#安装必要的loader" class="headerlink" title="安装必要的loader"></a>安装必要的loader</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">require (&apos;./world.js&apos;)</span><br><span class="line">require(&apos;style-loader!css-loader!./style.css&apos;)</span><br><span class="line">function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;hello.bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="使用webpack命令"><a href="#使用webpack命令" class="headerlink" title="使用webpack命令"></a>使用webpack命令</h3><p>Webpack命令的常用参数：<br>在命令行中绑定loader，<br>自动更新，打包，<br>显示打包过程，<br>显示打包模块，<br>显示为什么打包，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack hello.js hello.bundle.js --module-bind &apos;css=style-loader!css-loader&apos; --watch --progress --display-modules --display-reasons --colors</span><br></pre></td></tr></table></figure><h2 id="使用-webpack-config-js"><a href="#使用-webpack-config-js" class="headerlink" title="使用 webpack.config.js"></a>使用 webpack.config.js</h2><h3 id="单文件输入输出"><a href="#单文件输入输出" class="headerlink" title="单文件输入输出"></a>单文件输入输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">entry:&apos;/src/script/main.js&apos;</span><br><span class="line"></span><br><span class="line">outfile:&#123;</span><br><span class="line">  path:&apos;./dist/js&apos;,</span><br><span class="line">  filename:&apos;bundle.js&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多文件输入输出"><a href="#多文件输入输出" class="headerlink" title="多文件输入输出"></a>多文件输入输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">entry:&apos;/src/script/main.js&apos;</span><br><span class="line"></span><br><span class="line">outfile:&#123;</span><br><span class="line">  path:&apos;./dist/js&apos;,</span><br><span class="line">  //占位符： name 表示原文件名，hash当前打包的hash,chunkhash表示每个打包文件的hash，</span><br><span class="line">  filename:&apos;[name]-[hash]-bundle.js&apos;</span><br><span class="line">  //filename:&apos;[name]-[chunkhash]-bundle.js&apos;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>安装使用插件 <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a>，让js自动引入到html中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlWebpckPlugin=<span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">    main:<span class="string">'./src/script/main.js'</span>,</span><br><span class="line">    a:<span class="string">'./src/script/a.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:<span class="string">'./dist/'</span>,</span><br><span class="line">    filename:<span class="string">'js/[name]-[hash]-bundle.js'</span>,</span><br><span class="line">    publicPath:<span class="string">'http://cdn.com/'</span> </span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> htmlWebpckPlugin(&#123;</span><br><span class="line">    filename:<span class="string">'index-[hash].html'</span>,</span><br><span class="line">    <span class="comment">// 嵌入到head标签中</span></span><br><span class="line">    inhect:<span class="string">'head'</span>,</span><br><span class="line">    template:<span class="string">'index.html'</span>,</span><br><span class="line">    title:<span class="string">"webpck is good"</span>,</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    minify:&#123;</span><br><span class="line">      <span class="comment">// 删除注释，删除空格</span></span><br><span class="line">      removeComments:<span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;特点：&lt;br&gt;静态资源&lt;br&gt;支持导入第三方工具&lt;br&gt;支持代码分割&lt;br&gt;支持模块热更新&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://lidong.me/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>http服务-包含http204服务</title>
    <link href="https://lidong.me/http/"/>
    <id>https://lidong.me/http/</id>
    <published>2017-03-14T23:37:00.000Z</published>
    <updated>2017-03-14T23:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，正常情况联网，并不能联机到google的。所以android手机网络标示处会出现感叹号，提示无法连接网络。<br><a id="more"></a><br>一直以来我都是不做消除感叹号的，前两天看到v2ex在讨论204服务时，有人推荐使用 <a href="http://httpbin.org" target="_blank" rel="noopener">http://httpbin.org</a> 的204状态码，看了它的功能，不算难。</p><p>于是就想自己也可以弄一个，而且可以监控服务器是否在线。哈哈，一举多得。</p><p>那个网站是使用python做的。我刚刚学习NodeJS，于是用NodeJS做了一个，不过只做了为数不多的几个功能，当然包含http204啦，而且有两个。</p><p>欢迎使用<br><a href="//http.lidong.me">//http.lidong.me</a>;<br>源码地址：<a href="https://github.com/oonnnoo/http" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，正常情况联网，并不能联机到google的。所以android手机网络标示处会出现感叹号，提示无法连接网络。&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="https://lidong.me/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>使用firebase制作评论框</title>
    <link href="https://lidong.me/firebase-comment/"/>
    <id>https://lidong.me/firebase-comment/</id>
    <published>2017-03-13T22:06:09.000Z</published>
    <updated>2017-03-13T22:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>想做一个简单应用，不想搭建后台，也不知道怎么搭建后台。<br><a id="more"></a><br>很早就知道什么leancloud，什么野狗等等，但是才疏学浅，不知何用，无从下手。最近知道Google Firebase，跑去学习了一下，有中文文档，最最重要的是有视频教程！！</p><p>简单做了一个评论框，后期可以用到博客中的评论中。</p><p>GitHub地址：<a href="https://github.com/oonnnoo/firebase-comment" target="_blank" rel="noopener">https://github.com/oonnnoo/firebase-comment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想做一个简单应用，不想搭建后台，也不知道怎么搭建后台。&lt;br&gt;
    
    </summary>
    
    
      <category term="firebase" scheme="https://lidong.me/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>simple-theme 制作简单的hexo主题</title>
    <link href="https://lidong.me/hexo-theme-simple/"/>
    <id>https://lidong.me/hexo-theme-simple/</id>
    <published>2017-03-12T22:13:13.000Z</published>
    <updated>2017-03-12T22:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己做了一个主题,算是用来练手。<br><a id="more"></a><br>简单记录一下</p><p>主题特点：</p><ol><li>主页的内容区，只有标题及相关消息，不显示摘要内容，方便快速定位文章信息。</li><li>背景图片与首页的图片相同，风格相似</li><li>使用jade作为模版语言，是less编写css文件，</li><li>木有javascript，纳尼？嗯，目前还没写javascript文件</li></ol><p>Github地址：<a href="https://github.com/oonnnoo/hexo-theme-simple" target="_blank" rel="noopener">https://github.com/oonnnoo/hexo-theme-simple</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己做了一个主题,算是用来练手。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jade笔记</title>
    <link href="https://lidong.me/jade-note/"/>
    <id>https://lidong.me/jade-note/</id>
    <published>2017-03-07T19:03:46.000Z</published>
    <updated>2018-11-18T07:47:04.785Z</updated>
    
    <content type="html"><![CDATA[<p>Jade模版引擎<br><mark><br>好吧，它的新版本已经改名叫 <code>pug</code> 了，但我看的书中讲的是 <code>Jade</code>， 而且感觉使用上几乎木有问题，所以就先记 <code>Jade</code>，之后再去看看 <code>pug</code> 的文档。语法应该差不多的。😝<br></mark><br><a id="more"></a></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>Jade模版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">    div</span><br><span class="line">        h1 Pracical Jade</span><br><span class="line">        p The useful template engine</span><br><span class="line">    div</span><br><span class="line">        footer &amp;copy; Hah</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Pracical Jade<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The useful template engine<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>&amp;copy; Hah<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量-数据"><a href="#变量-数据" class="headerlink" title="变量/数据"></a>变量/数据</h2><p>// todo 有问题,语法貌似不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h1= title</span><br><span class="line">p= body</span><br><span class="line"></span><br><span class="line">(locals):&#123;</span><br><span class="line">title: &quot;express.js&quot;,</span><br><span class="line">body: &quot;the book on express&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>紧跟标签之后，用括号括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meta(charset=&quot;utf-8&quot;)</span><br><span class="line">div(id=&quot;content&quot; class=&quot;main&quot;)</span><br><span class="line">    a(href=&quot;http://www.google.com&quot;, title=&quot;google&quot;, target=&quot;_blank&quot;) google</span><br><span class="line">    form(action=&quot;/login&quot;)</span><br><span class="line">        input(type=&quot;text&quot;)</span><br><span class="line">        input(type=&quot;submit&quot; value=&quot;提交&quot;)</span><br><span class="line">    div(class=&quot;hero-init&quot;) here we go!</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com"</span> <span class="attr">title</span>=<span class="string">"google"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero-init"</span>&gt;</span>here we go!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字变量"><a href="#字变量" class="headerlink" title="字变量"></a>字变量</h2><p>直接在标签名之后写类(class)或ID，再次使用 <code>|</code> 创建文本内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div#content</span><br><span class="line">    p.lead.center</span><br><span class="line">        | webapplog: where code lives</span><br><span class="line">        #side-bar.pull-right</span><br><span class="line">        span.contact.span4</span><br><span class="line">            a(href=&apos;/contact&apos;) contact us</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead center"</span>&gt;</span></span><br><span class="line">        webapplog: where code lives</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"side-bar"</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"contact span4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/contact"</span>&gt;</span>contact us<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果没有写标签名，默认是div标签</p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>通过符号 <code>|</code> 可以输出原始文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">    | jade is a template engine</span><br><span class="line">    | It can be used in Node.js and in the browser Javascript.</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    jade is a template engine</span><br><span class="line">    It can be used in Node.js and in the browser Javascript.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="script-和-style-块"><a href="#script-和-style-块" class="headerlink" title="script 和 style 块"></a>script 和 style 块</h2><p>将script和style标签里内容写内容块，需要使用点号<code>.</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">    console.log(&apos;hello Jade!&apos;);</span><br><span class="line">    console.log(&apos;Good bye!&apos;);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'hello Jade!'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'Good bye!'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-代码"><a href="#JavaScript-代码" class="headerlink" title="JavaScript 代码"></a>JavaScript 代码</h2><p>可以在jade中写可以操作输出的可执行JavaScript代码，可以使用符号 <code>-</code>,<code>=</code>,<code>!=</code> 这在要输出html元素和注入JavaScript时很有用。(注：个人感觉不好用😢)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- var arr = [&apos;&lt;a&gt;&apos;,&apos;&lt;b&gt;&apos;,&apos;&lt;c&gt;&apos;]</span><br><span class="line">ul</span><br><span class="line">    - for(var i=0 ;i&lt;arr.length;i++)</span><br><span class="line">        li</span><br><span class="line">            span= i</span><br><span class="line">            span!= &quot;unescaped:&quot; + arr[i] + &quot;vs.&quot;</span><br><span class="line">            span=&quot;escaped:&quot; + arr[i]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;unescaped:&lt;a&gt;vs.&lt;/span&gt;&lt;span&gt;escaped:&amp;lt;a&amp;gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;unescaped:&lt;b&gt;vs.&lt;/span&gt;&lt;span&gt;escaped:&amp;lt;b&amp;gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;unescaped:&lt;c&gt;vs.&lt;/span&gt;&lt;span&gt;escaped:&amp;lt;c&amp;gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>如果想输出注释，使用JavaScript的注释形式 <code>//</code> ，如果不想输出它，使用 <code>//~</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// content goes here</span><br><span class="line">p Node.js is a non-blocking I/O</span><br><span class="line">//- @todo change this line</span><br><span class="line">p(id=footer) Copyright 2017</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- content goes here--&gt;</span><br><span class="line">&lt;p&gt;Node.js is a non-blocking I/O&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Copyright 2017&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><h2 id="each-语句"><a href="#each-语句" class="headerlink" title="each 语句"></a>each 语句</h2><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h2 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h2><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h2 id="函数minxin"><a href="#函数minxin" class="headerlink" title="函数minxin"></a>函数minxin</h2><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>将逻辑提取到单独的文件里的一种方式，旨在让多个文件重用它，是一种自顶向下的方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 模版名字和路径不需要加引号</span><br><span class="line">include ./includes/header</span><br></pre></td></tr></table></figure><h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><p>是一种自底向上的方法（和include相反），包含的文件决定它要替换主文件的哪一部分。格式为 <code>extend filename</code> 和 <code>block blockname</code></p><p>文件file_a中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">block header</span><br><span class="line">    p some default text</span><br><span class="line">block content</span><br><span class="line">    p loading</span><br><span class="line">block footer</span><br><span class="line">    p copyright</span><br></pre></td></tr></table></figure><p>文件file_b中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends file_a</span><br><span class="line">block header</span><br><span class="line">    p very specific text</span><br><span class="line">block content</span><br><span class="line">    .main-content</span><br></pre></td></tr></table></figure><p>输出</p><p>file_b.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;very specific text&lt;/p&gt;</span><br><span class="line">&lt;div class=&quot;main-content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;copyright&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="单独使用jade"><a href="#单独使用jade" class="headerlink" title="单独使用jade"></a>单独使用jade</h2><p>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g jade</span><br></pre></td></tr></table></figure><p>执行以下命令，将jade文件编译成html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade file.jade</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jade模版引擎&lt;br&gt;&lt;mark&gt;&lt;br&gt;好吧，它的新版本已经改名叫 &lt;code&gt;pug&lt;/code&gt; 了，但我看的书中讲的是 &lt;code&gt;Jade&lt;/code&gt;， 而且感觉使用上几乎木有问题，所以就先记 &lt;code&gt;Jade&lt;/code&gt;，之后再去看看 &lt;code&gt;pug&lt;/code&gt; 的文档。语法应该差不多的。😝&lt;br&gt;&lt;/mark&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://lidong.me/tags/notes/"/>
    
      <category term="模版" scheme="https://lidong.me/tags/%E6%A8%A1%E7%89%88/"/>
    
      <category term="jade" scheme="https://lidong.me/tags/jade/"/>
    
      <category term="pug" scheme="https://lidong.me/tags/pug/"/>
    
  </entry>
  
  <entry>
    <title>SSH密钥对的使用</title>
    <link href="https://lidong.me/ssh-key/"/>
    <id>https://lidong.me/ssh-key/</id>
    <published>2017-02-24T23:33:40.000Z</published>
    <updated>2018-11-18T07:47:04.785Z</updated>
    
    <content type="html"><![CDATA[<p>常见SSH密钥对使用场景：</p><ol><li>Git SSH拉取和提交时认证</li><li>Linux SSH远程登录认证</li><li>rsync 等工具使用时认证<a id="more"></a><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;备注&quot;</span><br></pre></td></tr></table></figure><h2 id="在后台运行ssh-agent"><a href="#在后台运行ssh-agent" class="headerlink" title="在后台运行ssh-agent"></a>在后台运行ssh-agent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><h2 id="开启ssh-agent转发"><a href="#开启ssh-agent转发" class="headerlink" title="开启ssh-agent转发"></a>开启ssh-agent转发</h2><p>编辑 <code>~/.ssh/config</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cat ~/.ssh/config</span><br><span class="line"># 开启ssh-agent转发</span><br><span class="line">Host *</span><br><span class="line">    ForwardAgent yes</span><br><span class="line"># 针对特定主机开启ssh-agent转发</span><br><span class="line">Host vps</span><br><span class="line">    HostName 12.34.56.78</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    User oonnnoo</span><br><span class="line">    ForwardAgent yes</span><br></pre></td></tr></table></figure><h2 id="使密钥对ssh-agent可见"><a href="#使密钥对ssh-agent可见" class="headerlink" title="使密钥对ssh-agent可见"></a>使密钥对ssh-agent可见</h2><p>查看密钥是否对 <code>ssh-agent</code> 可见</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -L</span><br></pre></td></tr></table></figure><p>如果该命令未显示你的密钥，可以通过以下命令添加密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>⚠️注： 在 Mac OS X 上，当系统重新启动后，ssh-agent 再次启动时会 “忘记” 这个密钥。可以通过以下命令将SSH密钥导入到密钥链中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="拷贝公钥到远程主机"><a href="#拷贝公钥到远程主机" class="headerlink" title="拷贝公钥到远程主机"></a>拷贝公钥到远程主机</h2><ul><li><p>命令快捷导入方法（推荐）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub user@ip</span><br></pre></td></tr></table></figure></li><li><p>手动拷贝</p><p>  将公钥拷贝，追加至远程主机 <code>~/.ssh/authorized_keys</code> 文件中（不存在则请新建），并确保此文件权限为 0600 ，(修改权限：<code>chmod 0600 ~/.ssh/authorized_keys</code>）</p></li></ul><p>我的公钥：<a href="https://labs.lidong.me/key/" target="_blank" rel="noopener">获取</a></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><p><a href="http://wiki.jikexueyuan.com/project/github-developer-guides/using-ssh-agent.html" target="_blank" rel="noopener">SSH agent 转发 - 极客学院</a></p></li><li><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">Generating a new SSH key and adding it to the ssh-agent</a></p></li><li><p><a href="https://wiki.archlinux.org/index.php/SSH_keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">SSH keys - Archlinux Wiki(中文)</a>)</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见SSH密钥对使用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git SSH拉取和提交时认证&lt;/li&gt;
&lt;li&gt;Linux SSH远程登录认证&lt;/li&gt;
&lt;li&gt;rsync 等工具使用时认证
    
    </summary>
    
    
      <category term="ssh" scheme="https://lidong.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker部署</title>
    <link href="https://lidong.me/sites-docker/"/>
    <id>https://lidong.me/sites-docker/</id>
    <published>2017-01-18T12:09:40.000Z</published>
    <updated>2017-01-18T12:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用docker部署主要是为了方便迁移<br><a id="more"></a></p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>从去年开始一直都是使用的是linode VPS，实际使用量也没多大，每月10刀，感觉有点贵，就很想把它上东西迁移到其他的vps上，然后把linode的退了。再一想既然要迁移，不如开始启用docker，再以后要迁移，会容易一些，出现意外恢复备份也会容易一些。</p><p>于是就在就倒腾了docker，尝试将网站通过docker部署。为了再巩固docker的使用方法，前一段时间专门借到一本叫《docker全指南》的书。</p><h2 id="部署结构"><a href="#部署结构" class="headerlink" title="部署结构"></a>部署结构</h2><p>目前裸域名的内容有三部分：首页及其目录下的少量页面，Blog，Wiki</p><p>所以部署的情况： </p><ol><li>使用一个Nginx container作为入口</li><li>首页和blog均为静态文件，将目录映射到nginx容器中，直接访问。</li><li>Wiki是使用dokuwiki搭建，需要PHP运行环境，使用 <a href="https://hub.docker.com/r/onnno/dokuwiki/" target="_blank" rel="noopener">onnno/dokuwiki</a> 镜像，这个镜像是在istepanov/dokuwiki基础上进行修改，单独运行一个container，然后通过入口的Nginx反向代理访问。</li></ol><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>使用docker-compose对容器进行管理。</p><p>配置文件内容使用git进行记录。<br><a href="https://github.com/oonnnoo/onoservers" target="_blank" rel="noopener">https://github.com/oonnnoo/onoservers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用docker部署主要是为了方便迁移&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lidong.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>《深网》读书笔记</title>
    <link href="https://lidong.me/deep-web/"/>
    <id>https://lidong.me/deep-web/</id>
    <published>2017-01-14T00:48:49.000Z</published>
    <updated>2017-01-14T00:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>吸引我的是副标题中的Google，看完并不让我感到特别的收获，只是觉得Google搜索不到的世界很大，我们的世界还有另一种形式。<br><a id="more"></a><br>书的作者为”匿名者“，感觉就是故作玄虚，制造神秘感。通过内容推测，作者应该是名德国的记者，对技术并不在行，书的主要内容，就是讲故事咯，顺带提了提技术，所以技术部分并不深入。</p><h2 id="简单记一下"><a href="#简单记一下" class="headerlink" title="简单记一下"></a>简单记一下</h2><p>书中一开始就提到三个名词深网、暗网、Tor，看书也没有看明白。</p><p>查看维基百科：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E7%BD%91" target="_blank" rel="noopener">深网</a>：不能被搜索引擎找到的网络内容</li><li><a href="https://zh.wikipedia.org/wiki/%E6%9A%97%E7%BD%91" target="_blank" rel="noopener">暗网</a>：只使用非常规协议和端口以及可信节点进行连接的私有网络</li><li><a href="https://zh.wikipedia.org/wiki/Tor" target="_blank" rel="noopener">Tor(洋葱路由器)</a>：一款自由软件，Tor网络是目前世界上最大的暗网。</li><li><a href="">Tor网络</a>：Tor网络是目前世界上最大的暗网。</li></ul><p>Tor网络是暗网的一种，所有暗网的集合才是组成深网的一部分。深网所指的并不仅限于Tor之类的暗网的内容，还有很多，比如在我们常用的网络服务中，绝大部分涉及注册登录的服务，Google也都搜索不到呀。</p><h2 id="有用的东西"><a href="#有用的东西" class="headerlink" title="有用的东西"></a>有用的东西</h2><ul><li><p>Tor 浏览器<br><a href="">https://www.torproject.org/download/download.html.en</a></p></li><li><p>hidden wiki<br>Tor中维基、网址大全<br><a href="">http://kpvz7ki2v5agwt35.onion</a> 这个是书中介绍的，刚刚去喵了一眼，提供一个新的URL2017<br><a href="">http://zqktlwi4fecvo6ri.onion</a> 2017新URL</p></li><li><p>PGP<br>可以用来对文件加密和验证文件是否被篡改。<br>查看维基百科：<a href="https://zh.wikipedia.org/wiki/%E8%89%AF%E5%A5%BD%E9%9A%B1%E7%A7%81%E5%AF%86%E7%A2%BC%E6%B3%95" target="_blank" rel="noopener">链接</a></p></li><li><p>Tails系统<br>嗯，据说是斯诺登也在使用的安全操作系统。<br>链接 <a href="https://tails.boum.org/" target="_blank" rel="noopener">https://tails.boum.org/</a></p></li></ul><h2 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h2><blockquote><p>p49<br>虽然黑客总是闷闷不乐，无知很容易惹恼他们，但他们总是乐于提供帮助——当一件事你自己搞了很久或者干脆对这件事就不太灵通，但你有极大的兴趣时</p></blockquote><hr><blockquote><p>p51<br>Tor网络反映了数据保护者和安全局之间的斗争，一方面，匿名性可用于掩饰犯罪行为，另一方面，保持匿名也是基本的公民权利。是罪犯、自由捍卫者、间谍和正派者的停留地。</p></blockquote><hr><blockquote><p>p78<br>如果人们将深网和普通网络相比较，深网又一个冷清的地方，几乎没有营销，没有忙碌、没有多彩的颜色和图片。这里没有不间断播放的流行音乐，也没有持续且长的营业时间。这点我很喜欢。不过就像在一座鬼城，很快就有种被盯上了的感觉。直到有一天我才搞明白，其实情况正好相反，深网才是唯一的数字世界，<strong>人们在其中只为自己存在</strong>。万维网则恰恰相反，那里总有人盯着你，可能是谷歌、脸书、情报局，总有人在收集个人信息，并试图尽可能地把它用作盈利手段。</p></blockquote><p>注：呀，这里是自嗨聚集地</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;吸引我的是副标题中的Google，看完并不让我感到特别的收获，只是觉得Google搜索不到的世界很大，我们的世界还有另一种形式。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://lidong.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="深网" scheme="https://lidong.me/tags/%E6%B7%B1%E7%BD%91/"/>
    
      <category term="tor" scheme="https://lidong.me/tags/tor/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab CI 持续集成</title>
    <link href="https://lidong.me/gitlab-ci/"/>
    <id>https://lidong.me/gitlab-ci/</id>
    <published>2016-12-01T16:23:00.000Z</published>
    <updated>2016-12-01T16:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成，听起来很棒的样子，我就小做尝试一把<br><a id="more"></a></p><h2 id="1-GitLab-Runner下载"><a href="#1-GitLab-Runner下载" class="headerlink" title="1.GitLab-Runner下载"></a>1.GitLab-Runner下载</h2><p><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">https://docs.gitlab.com/runner/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl --output /usr/<span class="built_in">local</span>/bin/gitlab-ci-multi-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-darwin-amd64</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure><h2 id="2-查看-GitLab-中项目的Runners"><a href="#2-查看-GitLab-中项目的Runners" class="headerlink" title="2.查看 GitLab 中项目的Runners"></a>2.查看 GitLab 中项目的Runners</h2><p>项目页面 -&gt; ⚙️设置(齿轮图标) -&gt; Runners<br><img src="https://static.lidong.me/img/2016/12/xDeMEYp18c7r.png" alt="setting"></p><p>查看Runners<br><img src="https://static.lidong.me/img/2016/12/6NMsGI8l1d7s.png" alt="runners"></p><h2 id="3-注册Runners"><a href="#3-注册Runners" class="headerlink" title="3.注册Runners"></a>3.注册Runners</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ci-multi-runner register</span><br></pre></td></tr></table></figure><p>根据提示，填写<br>1) GitLab-&gt;Runners的Url地址①<br>2) GitLab-&gt;Runners的registration token②<br>3) runner名称，这个随便写<br>4) 分支名，master<br>5) 协议方式，shell<br>⚠️ 注：使用sudo，可以防止稍后runners中，执行可能因为权限问题而执行失败，</p><p><img src="https://static.lidong.me/img/2016/12/sknaczoIxw98.png" alt="示例"></p><h2 id="4-开启gitlab-runner服务"><a href="#4-开启gitlab-runner服务" class="headerlink" title="4.开启gitlab-runner服务"></a>4.开启gitlab-runner服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ci-multi-runner install</span><br><span class="line">gitlab-ci-multi-runner start</span><br></pre></td></tr></table></figure><h2 id="5-设置-gitlab-ci-yml-脚本"><a href="#5-设置-gitlab-ci-yml-脚本" class="headerlink" title="5.设置 .gitlab-ci.yml 脚本"></a>5.设置 .gitlab-ci.yml 脚本</h2><p>编辑 <code>.gitlab-ci.yml</code>，文件名为固定格式，并将文件放在git库的跟目录下。</p><p>下面是gitlab-ci中的一个部署 hexo 模版，正好可以拿来使用</p><p>更多配置文件编写方法 👉<a href="http://docs.gitlab.com/ee/ci/yaml/README.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight yml"><figcaption><span>yml</span><a href="/blog/downloads/code/gitlab-ci/.gitlab-ci.yml">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is a template, and might need editing before it works on your project.</span></span><br><span class="line"><span class="comment"># Full project: https://gitlab.com/pages/hexo</span></span><br><span class="line"><span class="attr">image:</span> <span class="attr">node:4.2.2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">public</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="6-完成配置"><a href="#6-完成配置" class="headerlink" title="6.完成配置"></a>6.完成配置</h2><p>设置完成 .gitlab-ci.yml ，每当有新的提交 Gitlab CI 就会运行</p><p><img src="https://static.lidong.me/img/2016/12/7OVccmT27N87.png" alt=""></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2016年12月1日 首次发布</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ul><li><a href="https://www.cnblogs.com/newP/p/5735366.html#_Toc458009359" target="_blank" rel="noopener">GitLab CI持续集成配置方案</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续集成，听起来很棒的样子，我就小做尝试一把&lt;br&gt;
    
    </summary>
    
    
      <category term="gitlab" scheme="https://lidong.me/tags/gitlab/"/>
    
      <category term="gitlab-ci" scheme="https://lidong.me/tags/gitlab-ci/"/>
    
  </entry>
  
  <entry>
    <title>macOS下将shadowsocks转换成http代理</title>
    <link href="https://lidong.me/macos-shadowsocks-http.md/"/>
    <id>https://lidong.me/macos-shadowsocks-http.md/</id>
    <published>2016-11-14T06:16:00.000Z</published>
    <updated>2016-11-16T11:41:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h3><p>这里我是通过brew来进行的安装</p><pre><code>brew install privoxy</code></pre><a id="more"></a><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><pre><code>echo &apos;listen-address 0.0.0.0:8118&apos; &gt;&gt; /usr/local/etc/privoxy/configecho &apos;forward-socks5 / localhost:1080 .&apos; &gt;&gt; /usr/local/etc/privoxy/config</code></pre><p>说明:<br>8118 是要监听的http端口<br>1080 是本地的shadowsocks监听端口。请修改为你自己的</p><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><pre><code>privoxy /usr/local/etc/privoxy/config或brew services restart privoxy</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>可以使用下面2个命令检查是否启动成功和端口是否已经监听<br>1.</p><pre><code>ps aux  | grep privoxy</code></pre><p>看到如下进程</p><pre><code>xxx             57930   0.0  0.0  2461168   1496   ??  S    11:19上午   0:00.02 /usr/local/Cellar/privoxy/3.0.26/sbin/privoxy --no-daemon /usr/local/etc/privoxy/config</code></pre><p>证明已经启动<br>2.</p><pre><code>netstat -an | grep 8118</code></pre><p>看到这个</p><pre><code>tcp4       0      0  *.8118                 *.*                    LISTEN</code></pre><p>证明已经监听。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这时本机可以可以通过 <code>127.0.0.1:8118</code> ,局域网中都可以可以通过 <code>本机ip:8118</code> 使用http代理了。</p><p>PS: 可以做到在命令行中使用代理的软件还有 <a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">proxychains-ng</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装privoxy&quot;&gt;&lt;a href=&quot;#安装privoxy&quot; class=&quot;headerlink&quot; title=&quot;安装privoxy&quot;&gt;&lt;/a&gt;安装privoxy&lt;/h3&gt;&lt;p&gt;这里我是通过brew来进行的安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install privoxy
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="macos" scheme="https://lidong.me/tags/macos/"/>
    
      <category term="shadowsocks" scheme="https://lidong.me/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>各大浏览器下载地址</title>
    <link href="https://lidong.me/browser/"/>
    <id>https://lidong.me/browser/</id>
    <published>2016-11-07T07:22:29.000Z</published>
    <updated>2018-07-24T01:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下各大浏览器下载地址，需要的时候可以直接下载</p><a id="more"></a><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>Chrome 正式版<br><a href="https://www.google.com/chrome/browser/" target="_blank" rel="noopener">https://www.google.com/chrome/browser/</a></p><p>Chrome canary测试版<br><a href="https://www.google.com/chrome/browser/canary.html" target="_blank" rel="noopener">https://www.google.com/chrome/browser/canary.html</a></p><p>chrome 各种版本<br><a href="https://www.chromium.org/getting-involved/dev-channel" target="_blank" rel="noopener">https://www.chromium.org/getting-involved/dev-channel</a></p><h2 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h2><p>Firefox 正式版<br><a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank" rel="noopener">https://www.mozilla.org/en-US/firefox/new/</a></p><p>Firefox 各种版本（包括Beta版，Developer Edition，Night版）<br><a href="https://www.mozilla.org/en-US/firefox/channel/desktop/" target="_blank" rel="noopener">https://www.mozilla.org/en-US/firefox/channel/desktop/</a></p><h2 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h2><p>Safari 正式版<br><a href="https://developer.apple.com/safari/" target="_blank" rel="noopener">https://developer.apple.com/safari/</a></p><p>Safari 开发者版<br><a href="https://developer.apple.com/safari/technology-preview/" target="_blank" rel="noopener">https://developer.apple.com/safari/technology-preview/</a></p><h2 id="Internet-Explorer"><a href="#Internet-Explorer" class="headerlink" title="Internet Explorer"></a>Internet Explorer</h2><p>F12 开发人员工具简介<br><a href="https://msdn.microsoft.com/zh-cn/library/gg589512(v=vs.85).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/gg589512(v=vs.85).aspx</a></p><h2 id="私藏下载地址"><a href="#私藏下载地址" class="headerlink" title="私藏下载地址"></a>私藏下载地址</h2><p><a href="https://file.lidong.me/soft/browser/" target="_blank" rel="noopener">https://file.lidong.me/soft/browser/</a></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ol><li>2016/11/07 7:22:29 首次发布</li><li>2018/7/24 1:02:25 整理排版</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下各大浏览器下载地址，需要的时候可以直接下载&lt;/p&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="https://lidong.me/tags/chrome/"/>
    
      <category term="firefox" scheme="https://lidong.me/tags/firefox/"/>
    
      <category term="safari" scheme="https://lidong.me/tags/safari/"/>
    
      <category term="浏览器" scheme="https://lidong.me/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上安装 lnmp</title>
    <link href="https://lidong.me/raspberry-lnmp/"/>
    <id>https://lidong.me/raspberry-lnmp/</id>
    <published>2016-10-27T08:00:34.000Z</published>
    <updated>2018-11-18T07:47:04.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>1.更新</p><pre><code>sudo apt-get updatesudo apt-get upgrade</code></pre><p>2.创建一个用户，用户组</p><pre><code>sudo usermod -a -G www-data www-data</code></pre><a id="more"></a><p>3.安装PHP,MySQL及一些相关软件包</p><pre><code>sudo apt-get install openssl ssl-cert php5-cli php5-mysql php5-gd \php5-common php5-cgi mysql-server php-pear php-apc curl libapr1 libtool \libcurl4-openssl-dev php-xml-parser php5 php5-dev php5-curl php5-fpm \memcached php5-memcache varnish安装过程中出现下图弹窗，设置MySQL的root密码。![IMG]()</code></pre><p>3.安装 Nginx</p><p> 安装中会提示缺少一些依赖库，可以提前先安装了：<br> sudo apt-get install libpcre3 libpcre3-dev </p><pre><code>wget -c https://nginx.org/download/nginx-1.11.5.tar.gztar zxf nginx-1.11.5.tar.gzcd nginx-1.11.5/./configure --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_modulemakesudo make install</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;1.更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.创建一个用户，用户组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo usermod -a -G www-data www-data
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="lnmp" scheme="https://lidong.me/tags/lnmp/"/>
    
      <category term="linux" scheme="https://lidong.me/tags/linux/"/>
    
      <category term="nginx" scheme="https://lidong.me/tags/nginx/"/>
    
      <category term="php" scheme="https://lidong.me/tags/php/"/>
    
      <category term="mysql" scheme="https://lidong.me/tags/mysql/"/>
    
      <category term="raspberrypi" scheme="https://lidong.me/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>实用的 JavaScript 代码片段</title>
    <link href="https://lidong.me/useful-javascript-snippets/"/>
    <id>https://lidong.me/useful-javascript-snippets/</id>
    <published>2016-10-27T01:45:26.000Z</published>
    <updated>2016-10-27T07:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>实现字符串长度截取</p></li><li><p>获取域名主机</p> <!--3. 清除空格 4. 替换全部--></li><li><p>转义html标签</p></li><li><p>还原html标签</p></li><li><p>时间日期格式转换</p></li><li><p>判断是否为数字类型</p></li><li><p>设置cookie值</p></li><li><p>获取cookie值</p><a id="more"></a></li><li><p>加入收藏夹</p></li><li><p>设为首页</p><!--13. 判断IE6--></li><li><p>加载样式文件</p><!--15. 返回脚本内容16. 清除脚本内容17. 动态加载脚本文件--></li><li><p>返回按ID检索的元素对象</p><!--19. 返回浏览器版本内容--></li><li><p>元素显示的通用方法</p><!--21. 中有insertBefore方法,可惜却没有insertAfter方法?用如下函数实现22. 中兼容浏览器绑定元素事件23. 光标停在文字的后面，文本框获得焦点时调用--></li><li><p>检验URL链接是否有效</p></li><li><p>格式化CSS样式代码</p></li><li><p>压缩CSS样式代码</p><!--27. 获取当前路径--></li><li><p>IP转成整型</p></li><li><p>整型解析为IP地址</p></li><li><p>实现checkbox全选与全不选</p></li><li><p>判断是否移动设备</p></li><li><p>判断是否移动设备 userAgent 访问</p></li><li><p>判断是否苹果移动设备访问</p></li><li><p>判断是否安卓移动设备访问</p><!--35. 判断是否Touch屏幕--></li><li><p>判断是否在安卓上的谷歌浏览器</p><!--37. 判断是否打开视窗38. 获取移动设备初始化大小39. 获取移动设备最大化大小40. 获取移动设备屏幕宽度--></li><li><p>完美判断是否为网址</p><!--42. 根据样式名称检索元素对象43. 判断是否以某个字符串开头44. 判断是否以某个字符串结束45. 返回IE浏览器的版本号46. 获取页面高度47. 获取页面scrollLeft48. 获取页面可视宽度49. 获取页面宽度50. 获取页面scrollTop51. 获取页面可视高度52. 跨浏览器添加事件53. 跨浏览器删除事件54. 去掉url前缀--></li><li><p>随机数时间戳</p><!--56. 全角半角转换,iCase: 0全到半，1半到全，其他不转化--></li><li><p>确认是否键盘有效输入值</p><!--58. 获取网页被卷去的位置59. 另一种正则日期格式化函数+调用方法--></li><li><p>时间个性化输出功能</p><!--61. 解决offsetX兼容性问题62. 常用的正则表达式63. 实现返回顶部的通用方法64. 获得URL中GET参数值65. 实现全选通用方法66. 实现全部取消选择通用方法67. 实现打开一个窗体通用方法68. 判断是否为客户端设备--></li><li><p>获取单选按钮的值</p></li><li><p>获取复选框的值</p></li><li><p>判断是否为邮箱</p><!--72. 判断是否有列表中的危险字符--></li><li><p>判断字符串是否大于规定的长度</p><!--74. 判断字符串是为网址不区分大小写--></li><li><p>判断字符串是否为小数</p></li><li><p>判断字符串是否为整数</p></li><li><p>判断字符串是否为浮点数</p><!--78. 判断字符是否为A-Za-z英文字母--></li><li><p>判断字符串是否邮政编码</p><!--80. 判断字符是否空NULL81. 用正则表达式提取页面代码中所有网址--></li><li><p>用正则表达式清除相同的数组(低效率)</p></li><li><p>用正则表达式清除相同的数组(高效率)</p><!--84. 用正则表达式按字母排序，对每行进行数组排序--></li><li><p>字符串反序</p><!--86. 用正则表达式清除html代码中的脚本87. 动态执行JavaScript脚本88. 动态执行VBScript脚本--></li><li><p>实现金额大写转换函数</p><!--90. 常用的正则表达式大收集91. 实现窗体改变事件resize的操作（兼容所以的浏览器）92. 用正则清除空格分左右93. 判断变量是否空值--></li><li><p>实现base64解码</p></li><li><p>实现utf8解码</p></li></ol><!--96. 获取窗体可见范围的宽与高97. 判断IE版本号（既简洁、又向后兼容！）98. 获取浏览器版本号99. 半角转换为全角函数100. 全角转换为半角函数--><ol><li><p>实现字符串长度截取</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/cutstr.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现字符串长度截取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> temp;</span><br><span class="line">  <span class="keyword">var</span> icount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> patrn = <span class="regexp">/[^\x00-\xff]/</span>;</span><br><span class="line">  <span class="keyword">var</span> strre = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">    <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) {</span><br><span class="line">      temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) {</span><br><span class="line">        icount = icount + <span class="number">1</span>;</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        icount = icount + <span class="number">2</span>;</span><br><span class="line">      }</span><br><span class="line">      strre += temp</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> strre + <span class="string">"..."</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>获取域名主机</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/getHost.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取域名主机</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHost</span>(<span class="params">url</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> host = <span class="string">"null"</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> url == <span class="string">"undefined"</span> || <span class="literal">null</span> == url) {</span><br><span class="line">    url = <span class="built_in">window</span>.location.href;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+\:\/\/([^\/]*).*/</span>;</span><br><span class="line">  <span class="keyword">var</span> match = url.match(reg);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> match != <span class="string">"undefined"</span> &amp;&amp; <span class="literal">null</span> != match) {</span><br><span class="line">    host = match[<span class="number">1</span>];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> host;</span><br><span class="line">}</span><br></pre></td></tr></table></figure> <!--3. 清除空格 4. 替换全部--></li><li><p>转义html标签</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/HtmlEncode.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转义html标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> text.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp'</span>).replace(<span class="regexp">/\"/g</span>, <span class="string">'&amp;quot;'</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>还原html标签</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/htmlDecode.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还原html标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlDecode</span>(<span class="params">text</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> text.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">'&amp;'</span>).replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'\"'</span>).replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">'&lt;'</span>).replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">'&gt;'</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>时间日期格式转换</p></li><li><p>判断是否为数字类型</p></li><li><p>设置cookie值</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/setCookie.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">var</span> utc = d.getTime() + (d.getTimezoneOffset() * <span class="number">60000</span>);</span><br><span class="line">  <span class="keyword">var</span> nd = utc + (<span class="number">3600000</span> * offset);</span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line">  exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";path=/;expires="</span> + exp.toGMTString() + <span class="string">";domain=360doc.com;"</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>获取cookie值</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/getCookie.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取cookie值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line">  <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>加入收藏夹</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/addFavorite.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入收藏夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddFavorite</span>(<span class="params">sURL, sTitle</span>) </span>{</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="built_in">window</span>.external.addFavorite(sURL, sTitle)</span><br><span class="line">  } <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>)</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">      alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>设为首页</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/setHomepage.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设为首页</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.all) {</span><br><span class="line">    <span class="built_in">document</span>.body.style.behavior = <span class="string">'url(#default#homepage)'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.setHomePage(<span class="string">'http://***'</span>)</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        netscape.security.PrivilegeManager.enablePrivilege(<span class="string">"UniversalXPConnect"</span>)</span><br><span class="line">      } <span class="keyword">catch</span> (e) {</span><br><span class="line">        alert(<span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span>)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> prefs = Components.classes[<span class="string">'@mozilla.org/preferences-service;1'</span>].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line">    prefs.setCharPref(<span class="string">'browser.startup.homepage'</span>, <span class="string">'http://***'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--13. 判断IE6--></li><li><p>加载样式文件</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/loadStyle.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载样式文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadStyle</span>(<span class="params">url</span>) </span>{</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="built_in">document</span>.createStyleSheet(url)</span><br><span class="line">  } <span class="keyword">catch</span>(e) {</span><br><span class="line">    <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">    cssLink.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line">    cssLink.type = <span class="string">'text/css'</span>;</span><br><span class="line">    cssLink.href = url;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(cssLink)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--15. 返回脚本内容16. 清除脚本内容17. 动态加载脚本文件--></li><li><p>返回按ID检索的元素对象</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/$.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回按ID检索的元素对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--19. 返回浏览器版本内容--></li><li><p>元素显示的通用方法</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/display.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元素显示的通用方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params">id</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> obj = $(id);</span><br><span class="line">  <span class="keyword">if</span> (obj.style.visibility) {</span><br><span class="line">    obj.style.visibility = obj.style.visibility == <span class="string">'visible'</span> ? <span class="string">'hidden'</span> : <span class="string">'visible'</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    obj.style.display = obj.style.display == <span class="string">''</span> ? <span class="string">'none'</span> : <span class="string">''</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--21. 中有insertBefore方法,可惜却没有insertAfter方法?用如下函数实现22. 中兼容浏览器绑定元素事件23. 光标停在文字的后面，文本框获得焦点时调用--></li><li><p>检验URL链接是否有效</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/getUrlState.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检验URL链接是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>);</span><br><span class="line">  xmlhttp.Open(<span class="string">"GET"</span>, URL, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    xmlhttp.Send();</span><br><span class="line">  } <span class="keyword">catch</span> (e) {} <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">var</span> result = xmlhttp.responseText;</span><br><span class="line">    <span class="keyword">if</span> (result) {</span><br><span class="line">      <span class="keyword">if</span> (xmlhttp.Status == <span class="number">200</span>) {</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">true</span>);</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>格式化CSS样式代码</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/formatCss.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化CSS样式代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>) </span>{ <span class="comment">//格式化代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\{\}\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*{/g</span>, <span class="string">"{"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\{([^\s])/g</span>, <span class="string">"$1 {\n\t$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\}([^\n]*)/g</span>, <span class="string">"$1\n}\n$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s]);([^\s\}])/g</span>, <span class="string">"$1;\n\t$2"</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>压缩CSS样式代码</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/compressCss.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩CSS样式代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressCss</span>(<span class="params">s</span>) </span>{ <span class="comment">//压缩代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\/\*(.|\n)*?\*\//g</span>, <span class="string">""</span>); <span class="comment">//删除注释</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\{\}\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*\{/g</span>, <span class="string">"{"</span>); <span class="comment">//容错处理</span></span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.match(<span class="regexp">/^\s*(\S+(\s+\S+)*)\s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line">  <span class="keyword">return</span> (s == <span class="literal">null</span>) ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--27. 获取当前路径--></li><li><p>IP地址转成整型</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/ip2int.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IP地址转成整型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_ip2int</span>(<span class="params">ip</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  ip = ip.split(<span class="string">"."</span>);</span><br><span class="line">  num = <span class="built_in">Number</span>(ip[<span class="number">0</span>]) * <span class="number">256</span> * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">1</span>]) * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">2</span>]) * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">3</span>]);</span><br><span class="line">  num = num &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>整型解析为IP地址</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/int2ip.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整型解析为IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_int2iP</span>(<span class="params">num</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> str;</span><br><span class="line">  <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  tt[<span class="number">0</span>] = (num &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">  tt[<span class="number">1</span>] = ((num &lt;&lt; <span class="number">8</span>) &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">  tt[<span class="number">2</span>] = (num &lt;&lt; <span class="number">16</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">  tt[<span class="number">3</span>] = (num &lt;&lt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">  str = <span class="built_in">String</span>(tt[<span class="number">0</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">1</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">2</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">3</span>]);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>实现checkbox全选与全不选</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/checkAll.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现checkbox全选与全不选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAll</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> selectall = <span class="built_in">document</span>.getElementById(<span class="string">"selectall"</span>);</span><br><span class="line">  <span class="keyword">var</span> allbox = <span class="built_in">document</span>.getElementsByName(<span class="string">"allbox"</span>);</span><br><span class="line">  <span class="keyword">if</span> (selectall.checked) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) {</span><br><span class="line">      allbox[i].checked = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) {</span><br><span class="line">      allbox[i].checked = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断是否移动设备</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isMobile.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否移动设备</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">'boolean'</span>){</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line">  <span class="keyword">if</span>(!fixViewPortsExperiment){</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.isAppleMobileDevice()){</span><br><span class="line">      screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line">  <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断是否移动设备 userAgent 访问</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isMobileUserAgent.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过UserAgent判断是否移动设备</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase()));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断是否苹果移动设备访问</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isAppleMobileDevice.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否苹果移动设备访问</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断是否安卓移动设备访问</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isAndroidMobileDevice.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否安卓移动设备访问</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> (<span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--35. 判断是否Touch屏幕--></li><li><p>判断是否在安卓上的谷歌浏览器</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isChromeOnAndroid.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否在安卓上的谷歌浏览器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isChromeOnAndroid</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice()) {</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> ((<span class="regexp">/chrome/i</span>.test(userAgent))) {</span><br><span class="line">      <span class="keyword">var</span> parts = userAgent.split(<span class="string">'chrome/'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> fullVersionString = parts[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> versionString = fullVersionString.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> version = <span class="built_in">parseInt</span>(versionString);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (version &gt;= <span class="number">27</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--37. 判断是否打开视窗38. 获取移动设备初始化大小39. 获取移动设备最大化大小40. 获取移动设备屏幕宽度--></li><li><p>完美判断是否为网址</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isUrl.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为网址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isURL</span>(<span class="params">strUrl</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^https?:\/\/(([a-zA-Z0-9_-])+(\.)?)*(:\d+)?(\/((\.)?(\?)?=?&amp;?[a-zA-Z0-9_-](\?)?)*)*$/i</span>;</span><br><span class="line">  <span class="keyword">return</span> (reg.test(strUrl));</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--42. 根据样式名称检索元素对象43. 判断是否以某个字符串开头44. 判断是否以某个字符串结束45. 返回IE浏览器的版本号46. 获取页面高度47. 获取页面scrollLeft48. 获取页面可视宽度49. 获取页面宽度50. 获取页面scrollTop51. 获取页面可视高度52. 跨浏览器添加事件53. 跨浏览器删除事件54. 去掉url前缀--></li><li><p>随机数时间戳</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/uniqueId.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Math</span>.random, b = <span class="built_in">parseInt</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString() + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a());</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--56. 全角半角转换,iCase: 0全到半，1半到全，其他不转化--></li><li><p>确认是否键盘有效输入值</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/checkKey.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确认是否键盘有效输入值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>)</span>{</span><br><span class="line">  <span class="keyword">if</span>(iKey == <span class="number">32</span> || iKey == <span class="number">229</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*空格和异常*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*数字*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*字母*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*数字键盘1*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*数字键盘2*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*符号1*/</span></span><br><span class="line">  <span class="keyword">if</span>(iKey&gt;<span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>){<span class="keyword">return</span> <span class="literal">true</span>;}<span class="comment">/*符号2*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--58. 获取网页被卷去的位置59. 另一种正则日期格式化函数+调用方法--></li><li><p>时间个性化输出功能</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/timeFormat.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间个性化输出功能</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment"> 2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment"> 3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment"> 4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment"> 5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time),</span><br><span class="line">    curDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year = date.getFullYear(),</span><br><span class="line">    month = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    day = date.getDate(),</span><br><span class="line">    hour = date.getHours(),</span><br><span class="line">    minute = date.getMinutes(),</span><br><span class="line">    curYear = curDate.getFullYear(),</span><br><span class="line">    curHour = curDate.getHours(),</span><br><span class="line">    timeStr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (year &lt; curYear) {</span><br><span class="line">    timeStr = year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + day + <span class="string">'日 '</span> + hour + <span class="string">':'</span> + minute;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">var</span> pastTime = curDate - date,</span><br><span class="line">      pastH = pastTime / <span class="number">3600000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pastH &gt; curHour) {</span><br><span class="line">      timeStr = month + <span class="string">'月'</span> + day + <span class="string">'日 '</span> + hour + <span class="string">':'</span> + minute;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (pastH &gt;= <span class="number">1</span>) {</span><br><span class="line">      timeStr = <span class="string">'今天 '</span> + hour + <span class="string">':'</span> + minute + <span class="string">'分'</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line">      <span class="keyword">if</span> (pastM &gt; <span class="number">1</span>) {</span><br><span class="line">        timeStr = pastM + <span class="string">'分钟前'</span>;</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        timeStr = <span class="string">'刚刚'</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> timeStr;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--61. 解决offsetX兼容性问题62. 常用的正则表达式63. 实现返回顶部的通用方法64. 获得URL中GET参数值65. 实现全选通用方法66. 实现全部取消选择通用方法67. 实现打开一个窗体通用方法68. 判断是否为客户端设备--></li><li><p>获取单选按钮的值</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/getRadioValue.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取单选按钮的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_radio_value</span>(<span class="params">field</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (field &amp;&amp; field.length) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++) {</span><br><span class="line">      <span class="keyword">if</span> (field[i].checked) {</span><br><span class="line">        <span class="keyword">return</span> field[i].value;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>获取复选框的值</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/getCheckboxValue.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取复选框的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_value</span>(<span class="params">field</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (field &amp;&amp; field.length) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++) {</span><br><span class="line">      <span class="keyword">if</span> (field[i].checked &amp;&amp; !field[i].disabled) {</span><br><span class="line">        <span class="keyword">return</span> field[i].value;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断是否为邮箱</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isEmail.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为邮箱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">str</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> (re.test(str));</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--72. 判断是否有列表中的危险字符--></li><li><p>判断字符串是否大于规定的长度</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isValidLength.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否大于规定的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidLength</span>(<span class="params">chars, len</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> (chars.length &gt; len);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--74. 判断字符串是为网址不区分大小写--></li><li><p>判断字符串是否为小数</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isValidDecimal.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidDecimal</span>(<span class="params">chars</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/^\d*\.?\d{1,2}$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否为整数</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isNumber.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">chars</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/^\d*$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否为浮点数</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isFloat.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params"> str </span>) </span>{</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.length;i++)  {</span><br><span class="line">    <span class="keyword">if</span> ((str.charAt(i)&lt;<span class="string">"0"</span> || str.charAt(i)&gt;<span class="string">"9"</span>)&amp;&amp; str.charAt(i) != <span class="string">'.'</span>){</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--78. 判断字符是否为A-Za-z英文字母--></li><li><p>判断字符串是否邮政编码</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/isValidPostcode.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否邮政编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPost</span>(<span class="params">chars</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/^\d{6}$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--80. 判断字符是否空NULL81. 用正则表达式提取页面代码中所有网址--></li><li><p>用正则表达式清除相同的数组(低效率)</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/uniqueArray.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用正则表达式清除相同的数组(低效率)</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.reverse().join(<span class="string">","</span>).match(<span class="regexp">/([^,]+)(?!.*\1)/ig</span>).reverse();</span><br><span class="line">};</span><br></pre></td></tr></table></figure></li><li><p>用正则表达式清除相同的数组(高效率)</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/uniqueArray2.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用正则表达式清除相同的数组(高效率)</span></span><br><span class="line"><span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">this</span>.split(<span class="regexp">/[\r\n]+/</span>);</span><br><span class="line">  <span class="keyword">var</span> y = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i++) {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span> + x[i].replace(<span class="regexp">/([^\w])/ig</span>, <span class="string">"\\$1"</span>) + <span class="string">"$"</span>, <span class="string">"igm"</span>).test(y)) {</span><br><span class="line">      y += x[i] + <span class="string">"\r\n"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> y</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--84. 用正则表达式按字母排序，对每行进行数组排序--></li><li><p>字符串反序</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/reverseString.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串反序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsReverse</span>(<span class="params">text</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--86. 用正则表达式清除html代码中的脚本87. 动态执行JavaScript脚本88. 动态执行VBScript脚本--></li><li><p>实现金额大写转换函数</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/transformMoney.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现金额大写转换函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformMoney</span>(<span class="params">tranvalue</span>) </span>{</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line">    <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line">    <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>); <span class="comment">//整数部分用</span></span><br><span class="line">    <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中</span></span><br><span class="line">    <span class="comment">//分离整数与小数</span></span><br><span class="line">    <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line">    <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//转换整数部分</span></span><br><span class="line">    <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line">    <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) {</span><br><span class="line">      <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line">      <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) {</span><br><span class="line">        bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line">      }</span><br><span class="line">      sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line">      <span class="keyword">if</span> (sum != <span class="number">0</span>) {</span><br><span class="line">        str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="string">'0'</span>) sum = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) { <span class="comment">//在数字范围内</span></span><br><span class="line">        <span class="keyword">if</span> (k1 != <span class="number">3</span>) { <span class="comment">//加小单位</span></span><br><span class="line">          <span class="keyword">if</span> (bn != <span class="number">0</span>) {</span><br><span class="line">            str = dw1[k1].concat(str);</span><br><span class="line">          }</span><br><span class="line">          k1++;</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">//不加小单位，加大单位</span></span><br><span class="line">          k1 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>) <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line">            str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line">          str = dw2[k2].concat(str);</span><br><span class="line">          sum = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (k1 == <span class="number">3</span>) <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line">      {</span><br><span class="line">        k2++;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//转换小数部分</span></span><br><span class="line">    <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (dig != <span class="string">""</span>) {</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) {</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) {</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    str += <span class="string">"元"</span> + strdig;</span><br><span class="line">  } <span class="keyword">catch</span> (e) {</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">  temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) {</span><br><span class="line">    value[i] = temp[i];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><!--90. 常用的正则表达式大收集91. 实现窗体改变事件resize的操作（兼容所以的浏览器）92. 用正则清除空格分左右93. 判断变量是否空值--></li><li><p>实现base64解码</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/base64_decode.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base64解码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line">  <span class="keyword">var</span> o1, o2, o3, h1, h2, h3, h4, bits, i = <span class="number">0</span>,</span><br><span class="line">    ac = <span class="number">0</span>,</span><br><span class="line">    dec = <span class="string">""</span>,</span><br><span class="line">    tmp_arr = [];</span><br><span class="line">  <span class="keyword">if</span> (!data) {</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  }</span><br><span class="line">  data += <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">do</span> {</span><br><span class="line">    h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    bits = h1 &lt;&lt; <span class="number">18</span> | h2 &lt;&lt; <span class="number">12</span> | h3 &lt;&lt; <span class="number">6</span> | h4;</span><br><span class="line">    o1 = bits &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">    o2 = bits &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">    o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (h3 == <span class="number">64</span>) {</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) {</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line">  dec = tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">  dec = utf8_decode(dec);</span><br><span class="line">  <span class="keyword">return</span> dec;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>实现utf8解码</p><figure class="highlight js"><figcaption><span>Javascript</span><a href="/blog/downloads/code/useful-javascript-snippets/utf8_decode.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utf8解码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>)</span>{</span><br><span class="line">  <span class="keyword">var</span> tmp_arr = [],i = <span class="number">0</span>,ac = <span class="number">0</span>,c1 = <span class="number">0</span>,c2 = <span class="number">0</span>,c3 = <span class="number">0</span>;str_data += <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; str_data.length) {</span><br><span class="line">    c1 = str_data.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) {</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line">      i++;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) {</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">      i += <span class="number">2</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line">      i += <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ol><!--96. 获取窗体可见范围的宽与高97. 判断IE版本号（既简洁、又向后兼容！）98. 获取浏览器版本号99. 半角转换为全角函数100. 全角转换为半角函数-->]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;实现字符串长度截取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取域名主机&lt;/p&gt;
 &lt;!--3. 清除空格
 4. 替换全部--&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转义html标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还原html标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间日期格式转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断是否为数字类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置cookie值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取cookie值&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://lidong.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>实用的Linux命令</title>
    <link href="https://lidong.me/useful-linux-command/"/>
    <id>https://lidong.me/useful-linux-command/</id>
    <published>2016-10-25T21:58:24.000Z</published>
    <updated>2016-10-25T23:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看端口占用情况</p><pre><code>lsof -i:端口号netstat -apn | grep 端口号 </code></pre><p>查看进程</p><pre><code>ps -aux | grep 进程号ps -aux | grep 进程名</code></pre><p>时间同步</p><pre><code>ntpdate time.windows.com</code></pre><p>如果还没有安装ntpdate, 请先安装下载 yum install -y ntp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看端口占用情况&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsof -i:端口号

netstat -apn | grep 端口号 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ps -aux | grep 进程号

ps -aux | grep 进程名

      
    
    </summary>
    
    
      <category term="linux" scheme="https://lidong.me/tags/linux/"/>
    
  </entry>
  
</feed>
